### YamlMime:ManagedReference
items:
- uid: TinyGiantStudio.Text.Font
  commentId: T:TinyGiantStudio.Text.Font
  id: Font
  parent: TinyGiantStudio.Text
  children:
  - TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.GameObject)
  - TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.Mesh)
  - TinyGiantStudio.Text.Font.ConvertedValue(System.Single)
  - TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing
  - TinyGiantStudio.Text.Font.GetTypeFaceFromBytes
  - TinyGiantStudio.Text.Font.Kerning(System.Char,System.Char)
  - TinyGiantStudio.Text.Font.KerningReferencesCount(System.Int32)
  - TinyGiantStudio.Text.Font.MonoSpaceSpacing
  - TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter(System.Char,System.Boolean)
  - TinyGiantStudio.Text.Font.SetFontBytes(System.Byte[])
  - TinyGiantStudio.Text.Font.Spacing(System.Char)
  - TinyGiantStudio.Text.Font.Spacing(System.Char,System.Char)
  - TinyGiantStudio.Text.Font.Spacing(System.Single)
  - TinyGiantStudio.Text.Font.TabSpace
  - TinyGiantStudio.Text.Font.TypeFace
  - TinyGiantStudio.Text.Font.UpdateCharacterList
  - TinyGiantStudio.Text.Font.UpdateCharacterList(System.Boolean)
  - TinyGiantStudio.Text.Font.UpdateCharacterList(UnityEngine.GameObject)
  - TinyGiantStudio.Text.Font.autoSmoothAngleInput
  - TinyGiantStudio.Text.Font.averageYValue
  - TinyGiantStudio.Text.Font.characterSpacing
  - TinyGiantStudio.Text.Font.characters
  - TinyGiantStudio.Text.Font.emptySpaceSpacing
  - TinyGiantStudio.Text.Font.enableKerning
  - TinyGiantStudio.Text.Font.fallbackFonts
  - TinyGiantStudio.Text.Font.fontBytes
  - TinyGiantStudio.Text.Font.kernTable
  - TinyGiantStudio.Text.Font.kerningMultiplier
  - TinyGiantStudio.Text.Font.lineHeight
  - TinyGiantStudio.Text.Font.modelSource
  - TinyGiantStudio.Text.Font.monoSpaceFont
  - TinyGiantStudio.Text.Font.monoSpaceSpacing
  - TinyGiantStudio.Text.Font.sizeXYInput
  - TinyGiantStudio.Text.Font.sizeZInput
  - TinyGiantStudio.Text.Font.unitPerEM
  - TinyGiantStudio.Text.Font.useUpperCaseLettersIfLowerCaseIsMissing
  - TinyGiantStudio.Text.Font.vertexDensityInput
  langs:
  - csharp
  - vb
  name: Font
  nameWithType: Font
  fullName: TinyGiantStudio.Text.Font
  type: Class
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: Font
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 8
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [PreferBinarySerialization]

      [CreateAssetMenu(fileName = "New 3D Font", menuName = "Tiny Giant Studio/Modular 3D Text/Font/New Font")]

      public class Font : ScriptableObject
    content.vb: >-
      <PreferBinarySerialization>

      <CreateAssetMenu(fileName:="New 3D Font", menuName:="Tiny Giant Studio/Modular 3D Text/Font/New Font")>

      Public Class Font Inherits ScriptableObject
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.ScriptableObject
  attributes:
  - type: UnityEngine.PreferBinarySerialization
    ctor: UnityEngine.PreferBinarySerialization.#ctor
    arguments: []
  - type: UnityEngine.CreateAssetMenuAttribute
    ctor: UnityEngine.CreateAssetMenuAttribute.#ctor
    arguments: []
    namedArguments:
    - name: fileName
      type: System.String
      value: New 3D Font
    - name: menuName
      type: System.String
      value: Tiny Giant Studio/Modular 3D Text/Font/New Font
- uid: TinyGiantStudio.Text.Font.characters
  commentId: F:TinyGiantStudio.Text.Font.characters
  id: characters
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: characters
  nameWithType: Font.characters
  fullName: TinyGiantStudio.Text.Font.characters
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: characters
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public List<Character> characters
    return:
      type: System.Collections.Generic.List{TinyGiantStudio.Text.Character}
    content.vb: Public characters As List(Of Character)
- uid: TinyGiantStudio.Text.Font.useUpperCaseLettersIfLowerCaseIsMissing
  commentId: F:TinyGiantStudio.Text.Font.useUpperCaseLettersIfLowerCaseIsMissing
  id: useUpperCaseLettersIfLowerCaseIsMissing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: useUpperCaseLettersIfLowerCaseIsMissing
  nameWithType: Font.useUpperCaseLettersIfLowerCaseIsMissing
  fullName: TinyGiantStudio.Text.Font.useUpperCaseLettersIfLowerCaseIsMissing
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: useUpperCaseLettersIfLowerCaseIsMissing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("Use UpperCase If LowerCase Is Missing")]

      public bool useUpperCaseLettersIfLowerCaseIsMissing
    return:
      type: System.Boolean
    content.vb: >-
      <Tooltip("Use UpperCase If LowerCase Is Missing")>

      Public useUpperCaseLettersIfLowerCaseIsMissing As Boolean
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use UpperCase If LowerCase Is Missing
- uid: TinyGiantStudio.Text.Font.monoSpaceFont
  commentId: F:TinyGiantStudio.Text.Font.monoSpaceFont
  id: monoSpaceFont
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: monoSpaceFont
  nameWithType: Font.monoSpaceFont
  fullName: TinyGiantStudio.Text.Font.monoSpaceFont
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: monoSpaceFont
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 22
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("Mono space means all characters are spaced equally.\nIf turned on, individual spacing value from list below is ignored. The information is not removed to avoid accidentally turning it on ruin the font. \nCharacter spacing is used for everything")]

      public bool monoSpaceFont
    return:
      type: System.Boolean
    content.vb: >-
      <Tooltip("Mono space means all characters are spaced equally." & vbLf & "If turned on, individual spacing value from list below is ignored. The information is not removed to avoid accidentally turning it on ruin the font. " & vbLf & "Character spacing is used for everything")>

      Public monoSpaceFont As Boolean
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: >-
        Mono space means all characters are spaced equally.

        If turned on, individual spacing value from list below is ignored. The information is not removed to avoid accidentally turning it on ruin the font. 

        Character spacing is used for everything
- uid: TinyGiantStudio.Text.Font.monoSpaceSpacing
  commentId: F:TinyGiantStudio.Text.Font.monoSpaceSpacing
  id: monoSpaceSpacing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: monoSpaceSpacing
  nameWithType: Font.monoSpaceSpacing
  fullName: TinyGiantStudio.Text.Font.monoSpaceSpacing
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: monoSpaceSpacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float monoSpaceSpacing
    return:
      type: System.Single
    content.vb: Public monoSpaceSpacing As Single
- uid: TinyGiantStudio.Text.Font.emptySpaceSpacing
  commentId: F:TinyGiantStudio.Text.Font.emptySpaceSpacing
  id: emptySpaceSpacing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: emptySpaceSpacing
  nameWithType: Font.emptySpaceSpacing
  fullName: TinyGiantStudio.Text.Font.emptySpaceSpacing
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: emptySpaceSpacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 27
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("Word spacing and spacing for unavailable characters")]

      public float emptySpaceSpacing
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("Word spacing and spacing for unavailable characters")>

      Public emptySpaceSpacing As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Word spacing and spacing for unavailable characters
- uid: TinyGiantStudio.Text.Font.characterSpacing
  commentId: F:TinyGiantStudio.Text.Font.characterSpacing
  id: characterSpacing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: characterSpacing
  nameWithType: Font.characterSpacing
  fullName: TinyGiantStudio.Text.Font.characterSpacing
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: characterSpacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 29
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float characterSpacing
    return:
      type: System.Single
    content.vb: Public characterSpacing As Single
- uid: TinyGiantStudio.Text.Font.TabSpace
  commentId: M:TinyGiantStudio.Text.Font.TabSpace
  id: TabSpace
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: TabSpace()
  nameWithType: Font.TabSpace()
  fullName: TinyGiantStudio.Text.Font.TabSpace()
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: TabSpace
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 31
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float TabSpace()
    return:
      type: System.Single
    content.vb: Public Function TabSpace() As Single
  overload: TinyGiantStudio.Text.Font.TabSpace*
- uid: TinyGiantStudio.Text.Font.fallbackFonts
  commentId: F:TinyGiantStudio.Text.Font.fallbackFonts
  id: fallbackFonts
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: fallbackFonts
  nameWithType: Font.fallbackFonts
  fullName: TinyGiantStudio.Text.Font.fallbackFonts
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: fallbackFonts
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 37
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Space]

      [Tooltip("Avoid recursive references")]

      public List<Font> fallbackFonts
    return:
      type: System.Collections.Generic.List{TinyGiantStudio.Text.Font}
    content.vb: >-
      <Space>

      <Tooltip("Avoid recursive references")>

      Public fallbackFonts As List(Of Font)
  attributes:
  - type: UnityEngine.SpaceAttribute
    ctor: UnityEngine.SpaceAttribute.#ctor
    arguments: []
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Avoid recursive references
- uid: TinyGiantStudio.Text.Font.modelSource
  commentId: F:TinyGiantStudio.Text.Font.modelSource
  id: modelSource
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: modelSource
  nameWithType: Font.modelSource
  fullName: TinyGiantStudio.Text.Font.modelSource
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: modelSource
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 40
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("The 3d object with the characters as child object. \nNOT required.")]

      public GameObject modelSource
    return:
      type: UnityEngine.GameObject
    content.vb: >-
      <Tooltip("The 3d object with the characters as child object. " & vbLf & "NOT required.")>

      Public modelSource As GameObject
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: >-
        The 3d object with the characters as child object. 

        NOT required.
- uid: TinyGiantStudio.Text.Font.enableKerning
  commentId: F:TinyGiantStudio.Text.Font.enableKerning
  id: enableKerning
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: enableKerning
  nameWithType: Font.enableKerning
  fullName: TinyGiantStudio.Text.Font.enableKerning
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: enableKerning
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 44
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public bool enableKerning
    return:
      type: System.Boolean
    content.vb: Public enableKerning As Boolean
- uid: TinyGiantStudio.Text.Font.kerningMultiplier
  commentId: F:TinyGiantStudio.Text.Font.kerningMultiplier
  id: kerningMultiplier
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: kerningMultiplier
  nameWithType: Font.kerningMultiplier
  fullName: TinyGiantStudio.Text.Font.kerningMultiplier
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: kerningMultiplier
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 45
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float kerningMultiplier
    return:
      type: System.Single
    content.vb: Public kerningMultiplier As Single
- uid: TinyGiantStudio.Text.Font.kernTable
  commentId: F:TinyGiantStudio.Text.Font.kernTable
  id: kernTable
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: kernTable
  nameWithType: Font.kernTable
  fullName: TinyGiantStudio.Text.Font.kernTable
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: kernTable
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 48
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public List<KerningPair> kernTable
    return:
      type: System.Collections.Generic.List{TinyGiantStudio.Text.KerningPair}
    content.vb: Public kernTable As List(Of KerningPair)
- uid: TinyGiantStudio.Text.Font.unitPerEM
  commentId: F:TinyGiantStudio.Text.Font.unitPerEM
  id: unitPerEM
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: unitPerEM
  nameWithType: Font.unitPerEM
  fullName: TinyGiantStudio.Text.Font.unitPerEM
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: unitPerEM
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 57
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("An em is a unit of measurement, relative to the size of the font; therefore, in a typeface set at a font-size of 16px, one em is 16px.")]

      public float unitPerEM
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("An em is a unit of measurement, relative to the size of the font; therefore, in a typeface set at a font-size of 16px, one em is 16px.")>

      Public unitPerEM As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: An em is a unit of measurement, relative to the size of the font; therefore, in a typeface set at a font-size of 16px, one em is 16px.
- uid: TinyGiantStudio.Text.Font.lineHeight
  commentId: F:TinyGiantStudio.Text.Font.lineHeight
  id: lineHeight
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: lineHeight
  nameWithType: Font.lineHeight
  fullName: TinyGiantStudio.Text.Font.lineHeight
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: lineHeight
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 60
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: >-
      [Tooltip("Text's character spacing = font's character spacing * text's character spacing")]

      public float lineHeight
    return:
      type: System.Single
    content.vb: >-
      <Tooltip("Text's character spacing = font's character spacing * text's character spacing")>

      Public lineHeight As Single
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Text's character spacing = font's character spacing * text's character spacing
- uid: TinyGiantStudio.Text.Font.TypeFace
  commentId: P:TinyGiantStudio.Text.Font.TypeFace
  id: TypeFace
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: TypeFace
  nameWithType: Font.TypeFace
  fullName: TinyGiantStudio.Text.Font.TypeFace
  type: Property
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: TypeFace
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 67
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public TypeFace TypeFace { get; set; }
    parameters: []
    return:
      type: TinyGiantStudio.Text.TypeFace
    content.vb: Public Property TypeFace As TypeFace
  overload: TinyGiantStudio.Text.Font.TypeFace*
- uid: TinyGiantStudio.Text.Font.fontBytes
  commentId: F:TinyGiantStudio.Text.Font.fontBytes
  id: fontBytes
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: fontBytes
  nameWithType: Font.fontBytes
  fullName: TinyGiantStudio.Text.Font.fontBytes
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: fontBytes
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 82
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public byte[] fontBytes
    return:
      type: System.Byte[]
    content.vb: Public fontBytes As Byte()
- uid: TinyGiantStudio.Text.Font.sizeXYInput
  commentId: F:TinyGiantStudio.Text.Font.sizeXYInput
  id: sizeXYInput
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: sizeXYInput
  nameWithType: Font.sizeXYInput
  fullName: TinyGiantStudio.Text.Font.sizeXYInput
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: sizeXYInput
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 88
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public int sizeXYInput
    return:
      type: System.Int32
    content.vb: Public sizeXYInput As Integer
- uid: TinyGiantStudio.Text.Font.sizeZInput
  commentId: F:TinyGiantStudio.Text.Font.sizeZInput
  id: sizeZInput
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: sizeZInput
  nameWithType: Font.sizeZInput
  fullName: TinyGiantStudio.Text.Font.sizeZInput
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: sizeZInput
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 89
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public int sizeZInput
    return:
      type: System.Int32
    content.vb: Public sizeZInput As Integer
- uid: TinyGiantStudio.Text.Font.vertexDensityInput
  commentId: F:TinyGiantStudio.Text.Font.vertexDensityInput
  id: vertexDensityInput
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: vertexDensityInput
  nameWithType: Font.vertexDensityInput
  fullName: TinyGiantStudio.Text.Font.vertexDensityInput
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: vertexDensityInput
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 90
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float vertexDensityInput
    return:
      type: System.Single
    content.vb: Public vertexDensityInput As Single
- uid: TinyGiantStudio.Text.Font.autoSmoothAngleInput
  commentId: F:TinyGiantStudio.Text.Font.autoSmoothAngleInput
  id: autoSmoothAngleInput
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: autoSmoothAngleInput
  nameWithType: Font.autoSmoothAngleInput
  fullName: TinyGiantStudio.Text.Font.autoSmoothAngleInput
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: autoSmoothAngleInput
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 91
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float autoSmoothAngleInput
    return:
      type: System.Single
    content.vb: Public autoSmoothAngleInput As Single
- uid: TinyGiantStudio.Text.Font.averageYValue
  commentId: F:TinyGiantStudio.Text.Font.averageYValue
  id: averageYValue
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: averageYValue
  nameWithType: Font.averageYValue
  fullName: TinyGiantStudio.Text.Font.averageYValue
  type: Field
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: averageYValue
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 92
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float averageYValue
    return:
      type: System.Single
    content.vb: Public averageYValue As Single
- uid: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter(System.Char,System.Boolean)
  commentId: M:TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter(System.Char,System.Boolean)
  id: RetrievePrefabAndCharacter(System.Char,System.Boolean)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: RetrievePrefabAndCharacter(char, bool)
  nameWithType: Font.RetrievePrefabAndCharacter(char, bool)
  fullName: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter(char, bool)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: RetrievePrefabAndCharacter
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 118
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  summary: When this returns null, CharacterGenerator script is used to create it on the fly from ttf data
  example: []
  syntax:
    content: public (Mesh, Character) RetrievePrefabAndCharacter(char c, bool checkFallBackFonts = true)
    parameters:
    - id: c
      type: System.Char
      description: ''
    - id: checkFallBackFonts
      type: System.Boolean
      description: ''
    return:
      type: System.ValueTuple{UnityEngine.Mesh,TinyGiantStudio.Text.Character}
      description: ''
    content.vb: Public Function RetrievePrefabAndCharacter(c As Char, checkFallBackFonts As Boolean = True) As (Mesh, Character)
  overload: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter*
  nameWithType.vb: Font.RetrievePrefabAndCharacter(Char, Boolean)
  fullName.vb: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter(Char, Boolean)
  name.vb: RetrievePrefabAndCharacter(Char, Boolean)
- uid: TinyGiantStudio.Text.Font.Spacing(System.Char)
  commentId: M:TinyGiantStudio.Text.Font.Spacing(System.Char)
  id: Spacing(System.Char)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: Spacing(char)
  nameWithType: Font.Spacing(char)
  fullName: TinyGiantStudio.Text.Font.Spacing(char)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: Spacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 184
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float Spacing(char c)
    parameters:
    - id: c
      type: System.Char
    return:
      type: System.Single
    content.vb: Public Function Spacing(c As Char) As Single
  overload: TinyGiantStudio.Text.Font.Spacing*
  nameWithType.vb: Font.Spacing(Char)
  fullName.vb: TinyGiantStudio.Text.Font.Spacing(Char)
  name.vb: Spacing(Char)
- uid: TinyGiantStudio.Text.Font.Spacing(System.Char,System.Char)
  commentId: M:TinyGiantStudio.Text.Font.Spacing(System.Char,System.Char)
  id: Spacing(System.Char,System.Char)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: Spacing(char, char)
  nameWithType: Font.Spacing(char, char)
  fullName: TinyGiantStudio.Text.Font.Spacing(char, char)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: Spacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 218
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  summary: Spacing with kerning
  example: []
  syntax:
    content: public float Spacing(char previousCharacter, char currentCharacter)
    parameters:
    - id: previousCharacter
      type: System.Char
      description: ''
    - id: currentCharacter
      type: System.Char
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Function Spacing(previousCharacter As Char, currentCharacter As Char) As Single
  overload: TinyGiantStudio.Text.Font.Spacing*
  nameWithType.vb: Font.Spacing(Char, Char)
  fullName.vb: TinyGiantStudio.Text.Font.Spacing(Char, Char)
  name.vb: Spacing(Char, Char)
- uid: TinyGiantStudio.Text.Font.Spacing(System.Single)
  commentId: M:TinyGiantStudio.Text.Font.Spacing(System.Single)
  id: Spacing(System.Single)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: Spacing(float)
  nameWithType: Font.Spacing(float)
  fullName: TinyGiantStudio.Text.Font.Spacing(float)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: Spacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 250
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  summary: Used by getcharacterobject.cs
  example: []
  syntax:
    content: public float Spacing(float rawAdvance)
    parameters:
    - id: rawAdvance
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Function Spacing(rawAdvance As Single) As Single
  overload: TinyGiantStudio.Text.Font.Spacing*
  nameWithType.vb: Font.Spacing(Single)
  fullName.vb: TinyGiantStudio.Text.Font.Spacing(Single)
  name.vb: Spacing(Single)
- uid: TinyGiantStudio.Text.Font.MonoSpaceSpacing
  commentId: M:TinyGiantStudio.Text.Font.MonoSpaceSpacing
  id: MonoSpaceSpacing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: MonoSpaceSpacing()
  nameWithType: Font.MonoSpaceSpacing()
  fullName: TinyGiantStudio.Text.Font.MonoSpaceSpacing()
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: MonoSpaceSpacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 255
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  summary: This is the raw value used by unity after taking font EM into consideration
  example: []
  syntax:
    content: public float MonoSpaceSpacing()
    return:
      type: System.Single
      description: ''
    content.vb: Public Function MonoSpaceSpacing() As Single
  overload: TinyGiantStudio.Text.Font.MonoSpaceSpacing*
- uid: TinyGiantStudio.Text.Font.Kerning(System.Char,System.Char)
  commentId: M:TinyGiantStudio.Text.Font.Kerning(System.Char,System.Char)
  id: Kerning(System.Char,System.Char)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: Kerning(char, char)
  nameWithType: Font.Kerning(char, char)
  fullName: TinyGiantStudio.Text.Font.Kerning(char, char)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: Kerning
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 269
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float Kerning(char previousChar, char currentChar)
    parameters:
    - id: previousChar
      type: System.Char
    - id: currentChar
      type: System.Char
    return:
      type: System.Single
    content.vb: Public Function Kerning(previousChar As Char, currentChar As Char) As Single
  overload: TinyGiantStudio.Text.Font.Kerning*
  nameWithType.vb: Font.Kerning(Char, Char)
  fullName.vb: TinyGiantStudio.Text.Font.Kerning(Char, Char)
  name.vb: Kerning(Char, Char)
- uid: TinyGiantStudio.Text.Font.ConvertedValue(System.Single)
  commentId: M:TinyGiantStudio.Text.Font.ConvertedValue(System.Single)
  id: ConvertedValue(System.Single)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: ConvertedValue(float)
  nameWithType: Font.ConvertedValue(float)
  fullName: TinyGiantStudio.Text.Font.ConvertedValue(float)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: ConvertedValue
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 283
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public float ConvertedValue(float spacing)
    parameters:
    - id: spacing
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Function ConvertedValue(spacing As Single) As Single
  overload: TinyGiantStudio.Text.Font.ConvertedValue*
  nameWithType.vb: Font.ConvertedValue(Single)
  fullName.vb: TinyGiantStudio.Text.Font.ConvertedValue(Single)
  name.vb: ConvertedValue(Single)
- uid: TinyGiantStudio.Text.Font.KerningReferencesCount(System.Int32)
  commentId: M:TinyGiantStudio.Text.Font.KerningReferencesCount(System.Int32)
  id: KerningReferencesCount(System.Int32)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: KerningReferencesCount(int)
  nameWithType: Font.KerningReferencesCount(int)
  fullName: TinyGiantStudio.Text.Font.KerningReferencesCount(int)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: KerningReferencesCount
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 285
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public int KerningReferencesCount(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function KerningReferencesCount(index As Integer) As Integer
  overload: TinyGiantStudio.Text.Font.KerningReferencesCount*
  nameWithType.vb: Font.KerningReferencesCount(Integer)
  fullName.vb: TinyGiantStudio.Text.Font.KerningReferencesCount(Integer)
  name.vb: KerningReferencesCount(Integer)
- uid: TinyGiantStudio.Text.Font.UpdateCharacterList(UnityEngine.GameObject)
  commentId: M:TinyGiantStudio.Text.Font.UpdateCharacterList(UnityEngine.GameObject)
  id: UpdateCharacterList(UnityEngine.GameObject)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: UpdateCharacterList(GameObject)
  nameWithType: Font.UpdateCharacterList(GameObject)
  fullName: TinyGiantStudio.Text.Font.UpdateCharacterList(UnityEngine.GameObject)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: UpdateCharacterList
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 305
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void UpdateCharacterList(GameObject prefab)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    content.vb: Public Sub UpdateCharacterList(prefab As GameObject)
  overload: TinyGiantStudio.Text.Font.UpdateCharacterList*
- uid: TinyGiantStudio.Text.Font.UpdateCharacterList(System.Boolean)
  commentId: M:TinyGiantStudio.Text.Font.UpdateCharacterList(System.Boolean)
  id: UpdateCharacterList(System.Boolean)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: UpdateCharacterList(bool)
  nameWithType: Font.UpdateCharacterList(bool)
  fullName: TinyGiantStudio.Text.Font.UpdateCharacterList(bool)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: UpdateCharacterList
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 311
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void UpdateCharacterList(bool overwriteOldSet)
    parameters:
    - id: overwriteOldSet
      type: System.Boolean
    content.vb: Public Sub UpdateCharacterList(overwriteOldSet As Boolean)
  overload: TinyGiantStudio.Text.Font.UpdateCharacterList*
  nameWithType.vb: Font.UpdateCharacterList(Boolean)
  fullName.vb: TinyGiantStudio.Text.Font.UpdateCharacterList(Boolean)
  name.vb: UpdateCharacterList(Boolean)
- uid: TinyGiantStudio.Text.Font.UpdateCharacterList
  commentId: M:TinyGiantStudio.Text.Font.UpdateCharacterList
  id: UpdateCharacterList
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: UpdateCharacterList()
  nameWithType: Font.UpdateCharacterList()
  fullName: TinyGiantStudio.Text.Font.UpdateCharacterList()
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: UpdateCharacterList
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 319
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void UpdateCharacterList()
    content.vb: Public Sub UpdateCharacterList()
  overload: TinyGiantStudio.Text.Font.UpdateCharacterList*
- uid: TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.GameObject)
  commentId: M:TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.GameObject)
  id: AddCharacter(UnityEngine.GameObject)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: AddCharacter(GameObject)
  nameWithType: Font.AddCharacter(GameObject)
  fullName: TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.GameObject)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: AddCharacter
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 336
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void AddCharacter(GameObject obj)
    parameters:
    - id: obj
      type: UnityEngine.GameObject
    content.vb: Public Sub AddCharacter(obj As GameObject)
  overload: TinyGiantStudio.Text.Font.AddCharacter*
- uid: TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.Mesh)
  commentId: M:TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.Mesh)
  id: AddCharacter(UnityEngine.Mesh)
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: AddCharacter(Mesh)
  nameWithType: Font.AddCharacter(Mesh)
  fullName: TinyGiantStudio.Text.Font.AddCharacter(UnityEngine.Mesh)
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: AddCharacter
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 364
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void AddCharacter(Mesh mesh)
    parameters:
    - id: mesh
      type: UnityEngine.Mesh
    content.vb: Public Sub AddCharacter(mesh As Mesh)
  overload: TinyGiantStudio.Text.Font.AddCharacter*
- uid: TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing
  commentId: M:TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing
  id: GetMonoSpacingFromAverageCharacterSpacing
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: GetMonoSpacingFromAverageCharacterSpacing()
  nameWithType: Font.GetMonoSpacingFromAverageCharacterSpacing()
  fullName: TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing()
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: GetMonoSpacingFromAverageCharacterSpacing
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 484
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void GetMonoSpacingFromAverageCharacterSpacing()
    content.vb: Public Sub GetMonoSpacingFromAverageCharacterSpacing()
  overload: TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing*
- uid: TinyGiantStudio.Text.Font.SetFontBytes(System.Byte[])
  commentId: M:TinyGiantStudio.Text.Font.SetFontBytes(System.Byte[])
  id: SetFontBytes(System.Byte[])
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: SetFontBytes(byte[])
  nameWithType: Font.SetFontBytes(byte[])
  fullName: TinyGiantStudio.Text.Font.SetFontBytes(byte[])
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: SetFontBytes
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 498
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void SetFontBytes(byte[] newFontBytes)
    parameters:
    - id: newFontBytes
      type: System.Byte[]
    content.vb: Public Sub SetFontBytes(newFontBytes As Byte())
  overload: TinyGiantStudio.Text.Font.SetFontBytes*
  nameWithType.vb: Font.SetFontBytes(Byte())
  fullName.vb: TinyGiantStudio.Text.Font.SetFontBytes(Byte())
  name.vb: SetFontBytes(Byte())
- uid: TinyGiantStudio.Text.Font.GetTypeFaceFromBytes
  commentId: M:TinyGiantStudio.Text.Font.GetTypeFaceFromBytes
  id: GetTypeFaceFromBytes
  parent: TinyGiantStudio.Text.Font
  langs:
  - csharp
  - vb
  name: GetTypeFaceFromBytes()
  nameWithType: Font.GetTypeFaceFromBytes()
  fullName: TinyGiantStudio.Text.Font.GetTypeFaceFromBytes()
  type: Method
  source:
    remote:
      path: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: GetTypeFaceFromBytes
    path: ../Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Scripts/Font/Font.cs
    startLine: 504
  assemblies:
  - Assembly-CSharp-firstpass
  namespace: TinyGiantStudio.Text
  syntax:
    content: public void GetTypeFaceFromBytes()
    content.vb: Public Sub GetTypeFaceFromBytes()
  overload: TinyGiantStudio.Text.Font.GetTypeFaceFromBytes*
references:
- uid: TinyGiantStudio.Text
  commentId: N:TinyGiantStudio.Text
  href: TinyGiantStudio.html
  name: TinyGiantStudio.Text
  nameWithType: TinyGiantStudio.Text
  fullName: TinyGiantStudio.Text
  spec.csharp:
  - uid: TinyGiantStudio
    name: TinyGiantStudio
    href: TinyGiantStudio.html
  - name: .
  - uid: TinyGiantStudio.Text
    name: Text
    href: TinyGiantStudio.Text.html
  spec.vb:
  - uid: TinyGiantStudio
    name: TinyGiantStudio
    href: TinyGiantStudio.html
  - name: .
  - uid: TinyGiantStudio.Text
    name: Text
    href: TinyGiantStudio.Text.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.ScriptableObject
  commentId: T:UnityEngine.ScriptableObject
  parent: UnityEngine
  isExternal: true
  name: ScriptableObject
  nameWithType: ScriptableObject
  fullName: UnityEngine.ScriptableObject
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: System.Collections.Generic.List{TinyGiantStudio.Text.Character}
  commentId: T:System.Collections.Generic.List{TinyGiantStudio.Text.Character}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: TinyGiantStudio.Text.Character.html
  name: List<Character>
  nameWithType: List<Character>
  fullName: System.Collections.Generic.List<TinyGiantStudio.Text.Character>
  nameWithType.vb: List(Of Character)
  fullName.vb: System.Collections.Generic.List(Of TinyGiantStudio.Text.Character)
  name.vb: List(Of Character)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: TinyGiantStudio.Text.Character
    name: Character
    href: TinyGiantStudio.Text.Character.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: TinyGiantStudio.Text.Character
    name: Character
    href: TinyGiantStudio.Text.Character.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyGiantStudio.Text.Font.TabSpace*
  commentId: Overload:TinyGiantStudio.Text.Font.TabSpace
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_TabSpace
  name: TabSpace
  nameWithType: Font.TabSpace
  fullName: TinyGiantStudio.Text.Font.TabSpace
- uid: System.Collections.Generic.List{TinyGiantStudio.Text.Font}
  commentId: T:System.Collections.Generic.List{TinyGiantStudio.Text.Font}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: TinyGiantStudio.Text.Font.html
  name: List<Font>
  nameWithType: List<Font>
  fullName: System.Collections.Generic.List<TinyGiantStudio.Text.Font>
  nameWithType.vb: List(Of Font)
  fullName.vb: System.Collections.Generic.List(Of TinyGiantStudio.Text.Font)
  name.vb: List(Of Font)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: TinyGiantStudio.Text.Font
    name: Font
    href: TinyGiantStudio.Text.Font.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: TinyGiantStudio.Text.Font
    name: Font
    href: TinyGiantStudio.Text.Font.html
  - name: )
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: System.Collections.Generic.List{TinyGiantStudio.Text.KerningPair}
  commentId: T:System.Collections.Generic.List{TinyGiantStudio.Text.KerningPair}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: TinyGiantStudio.Text.KerningPair.html
  name: List<KerningPair>
  nameWithType: List<KerningPair>
  fullName: System.Collections.Generic.List<TinyGiantStudio.Text.KerningPair>
  nameWithType.vb: List(Of KerningPair)
  fullName.vb: System.Collections.Generic.List(Of TinyGiantStudio.Text.KerningPair)
  name.vb: List(Of KerningPair)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: TinyGiantStudio.Text.KerningPair
    name: KerningPair
    href: TinyGiantStudio.Text.KerningPair.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: TinyGiantStudio.Text.KerningPair
    name: KerningPair
    href: TinyGiantStudio.Text.KerningPair.html
  - name: )
- uid: TinyGiantStudio.Text.Font.TypeFace*
  commentId: Overload:TinyGiantStudio.Text.Font.TypeFace
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_TypeFace
  name: TypeFace
  nameWithType: Font.TypeFace
  fullName: TinyGiantStudio.Text.Font.TypeFace
- uid: TinyGiantStudio.Text.TypeFace
  commentId: T:TinyGiantStudio.Text.TypeFace
  parent: TinyGiantStudio.Text
  isExternal: true
  name: TypeFace
  nameWithType: TypeFace
  fullName: TinyGiantStudio.Text.TypeFace
- uid: System.Byte[]
  isExternal: true
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter*
  commentId: Overload:TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_RetrievePrefabAndCharacter_System_Char_System_Boolean_
  name: RetrievePrefabAndCharacter
  nameWithType: Font.RetrievePrefabAndCharacter
  fullName: TinyGiantStudio.Text.Font.RetrievePrefabAndCharacter
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.ValueTuple{UnityEngine.Mesh,TinyGiantStudio.Text.Character}
  commentId: T:System.ValueTuple{UnityEngine.Mesh,TinyGiantStudio.Text.Character}
  parent: System
  definition: System.ValueTuple`2
  href: TinyGiantStudio.Text.Character.html
  name: (Mesh, Character)
  nameWithType: (Mesh, Character)
  fullName: (UnityEngine.Mesh, TinyGiantStudio.Text.Character)
  spec.csharp:
  - name: (
  - uid: UnityEngine.Mesh
    name: Mesh
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyGiantStudio.Text.Character
    name: Character
    href: TinyGiantStudio.Text.Character.html
  - name: )
  spec.vb:
  - name: (
  - uid: UnityEngine.Mesh
    name: Mesh
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyGiantStudio.Text.Character
    name: Character
    href: TinyGiantStudio.Text.Character.html
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyGiantStudio.Text.Font.Spacing*
  commentId: Overload:TinyGiantStudio.Text.Font.Spacing
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_Spacing_System_Char_
  name: Spacing
  nameWithType: Font.Spacing
  fullName: TinyGiantStudio.Text.Font.Spacing
- uid: TinyGiantStudio.Text.Font.MonoSpaceSpacing*
  commentId: Overload:TinyGiantStudio.Text.Font.MonoSpaceSpacing
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_MonoSpaceSpacing
  name: MonoSpaceSpacing
  nameWithType: Font.MonoSpaceSpacing
  fullName: TinyGiantStudio.Text.Font.MonoSpaceSpacing
- uid: TinyGiantStudio.Text.Font.Kerning*
  commentId: Overload:TinyGiantStudio.Text.Font.Kerning
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_Kerning_System_Char_System_Char_
  name: Kerning
  nameWithType: Font.Kerning
  fullName: TinyGiantStudio.Text.Font.Kerning
- uid: TinyGiantStudio.Text.Font.ConvertedValue*
  commentId: Overload:TinyGiantStudio.Text.Font.ConvertedValue
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_ConvertedValue_System_Single_
  name: ConvertedValue
  nameWithType: Font.ConvertedValue
  fullName: TinyGiantStudio.Text.Font.ConvertedValue
- uid: TinyGiantStudio.Text.Font.KerningReferencesCount*
  commentId: Overload:TinyGiantStudio.Text.Font.KerningReferencesCount
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_KerningReferencesCount_System_Int32_
  name: KerningReferencesCount
  nameWithType: Font.KerningReferencesCount
  fullName: TinyGiantStudio.Text.Font.KerningReferencesCount
- uid: TinyGiantStudio.Text.Font.UpdateCharacterList*
  commentId: Overload:TinyGiantStudio.Text.Font.UpdateCharacterList
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_UpdateCharacterList_UnityEngine_GameObject_
  name: UpdateCharacterList
  nameWithType: Font.UpdateCharacterList
  fullName: TinyGiantStudio.Text.Font.UpdateCharacterList
- uid: TinyGiantStudio.Text.Font.AddCharacter*
  commentId: Overload:TinyGiantStudio.Text.Font.AddCharacter
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_AddCharacter_UnityEngine_GameObject_
  name: AddCharacter
  nameWithType: Font.AddCharacter
  fullName: TinyGiantStudio.Text.Font.AddCharacter
- uid: UnityEngine.Mesh
  commentId: T:UnityEngine.Mesh
  parent: UnityEngine
  isExternal: true
  name: Mesh
  nameWithType: Mesh
  fullName: UnityEngine.Mesh
- uid: TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing*
  commentId: Overload:TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_GetMonoSpacingFromAverageCharacterSpacing
  name: GetMonoSpacingFromAverageCharacterSpacing
  nameWithType: Font.GetMonoSpacingFromAverageCharacterSpacing
  fullName: TinyGiantStudio.Text.Font.GetMonoSpacingFromAverageCharacterSpacing
- uid: TinyGiantStudio.Text.Font.SetFontBytes*
  commentId: Overload:TinyGiantStudio.Text.Font.SetFontBytes
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_SetFontBytes_System_Byte___
  name: SetFontBytes
  nameWithType: Font.SetFontBytes
  fullName: TinyGiantStudio.Text.Font.SetFontBytes
- uid: TinyGiantStudio.Text.Font.GetTypeFaceFromBytes*
  commentId: Overload:TinyGiantStudio.Text.Font.GetTypeFaceFromBytes
  href: TinyGiantStudio.Text.Font.html#TinyGiantStudio_Text_Font_GetTypeFaceFromBytes
  name: GetTypeFaceFromBytes
  nameWithType: Font.GetTypeFaceFromBytes
  fullName: TinyGiantStudio.Text.Font.GetTypeFaceFromBytes

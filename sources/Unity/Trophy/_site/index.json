{
  "api/AssetStoreTools.Previews.Services.IPreviewService.html": {
    "href": "api/AssetStoreTools.Previews.Services.IPreviewService.html",
    "title": "Interface IPreviewService | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IPreviewService Namespace: AssetStoreTools.Previews.Services Assembly: asset-store-tools-editor.dll Syntax public interface IPreviewService"
  },
  "api/AssetStoreTools.Previews.Services.html": {
    "href": "api/AssetStoreTools.Previews.Services.html",
    "title": "Namespace AssetStoreTools.Previews.Services | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace AssetStoreTools.Previews.Services Interfaces IPreviewService"
  },
  "api/RocketshiftStudio.Editor.Shared.DynamicReferenceDrawer.html": {
    "href": "api/RocketshiftStudio.Editor.Shared.DynamicReferenceDrawer.html",
    "title": "Class DynamicReferenceDrawer | Trophy - Ultimate Score System Documentation",
    "summary": "Class DynamicReferenceDrawer Inheritance object GUIDrawer PropertyDrawer DynamicReferenceDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel Namespace: RocketshiftStudio.Editor.Shared Assembly: RocketshiftStudio.Editor.Shared.dll Syntax [CustomPropertyDrawer(typeof(DynamicReferenceAttribute))] public class DynamicReferenceDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Returns Type Description float The height in pixels. Overrides UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/RocketshiftStudio.Editor.Shared.html": {
    "href": "api/RocketshiftStudio.Editor.Shared.html",
    "title": "Namespace RocketshiftStudio.Editor.Shared | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Editor.Shared Classes DynamicReferenceDrawer"
  },
  "api/RocketshiftStudio.Editor.Trophy.BuildProcessor.html": {
    "href": "api/RocketshiftStudio.Editor.Trophy.BuildProcessor.html",
    "title": "Class BuildProcessor | Trophy - Ultimate Score System Documentation",
    "summary": "Class BuildProcessor Inheritance object BuildProcessor Implements IPreprocessBuildWithReport IPostprocessBuildWithReport IOrderedCallback Namespace: RocketshiftStudio.Editor.Trophy Assembly: RocketshiftStudio.Editor.Trophy.dll Syntax public class BuildProcessor : IPreprocessBuildWithReport, IPostprocessBuildWithReport, IOrderedCallback Properties callbackOrder Returns the relative callback order for callbacks. Callbacks with lower values are called before ones with higher values. Declaration public int callbackOrder { get; } Property Value Type Description int Methods OnPostprocessBuild(BuildReport) Implement this function to receive a callback after the build is complete. Declaration public void OnPostprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report A BuildReport containing information about the build, such as the target platform and output path. OnPreprocessBuild(BuildReport) Implement this function to receive a callback before the build is started. Declaration public void OnPreprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report A report containing information about the build, such as its target platform and output path. Implements UnityEditor.Build.IPreprocessBuildWithReport UnityEditor.Build.IPostprocessBuildWithReport UnityEditor.Build.IOrderedCallback"
  },
  "api/RocketshiftStudio.Editor.Trophy.TrophyExplorerWindow.html": {
    "href": "api/RocketshiftStudio.Editor.Trophy.TrophyExplorerWindow.html",
    "title": "Class TrophyExplorerWindow | Trophy - Ultimate Score System Documentation",
    "summary": "Class TrophyExplorerWindow Inheritance object Object ScriptableObject EditorWindow TrophyExplorerWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.dataModeController EditorWindow.rootVisualElement EditorWindow.overlayCanvas EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position Namespace: RocketshiftStudio.Editor.Trophy Assembly: RocketshiftStudio.Editor.Trophy.dll Syntax public sealed class TrophyExplorerWindow : EditorWindow"
  },
  "api/RocketshiftStudio.Editor.Trophy.html": {
    "href": "api/RocketshiftStudio.Editor.Trophy.html",
    "title": "Namespace RocketshiftStudio.Editor.Trophy | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Editor.Trophy Classes BuildProcessor TrophyExplorerWindow"
  },
  "api/RocketshiftStudio.Shared.DynamicReferenceAttribute.html": {
    "href": "api/RocketshiftStudio.Shared.DynamicReferenceAttribute.html",
    "title": "Class DynamicReferenceAttribute | Trophy - Ultimate Score System Documentation",
    "summary": "Class DynamicReferenceAttribute Inheritance object Attribute PropertyAttribute DynamicReferenceAttribute Namespace: RocketshiftStudio.Shared Assembly: RocketshiftStudio.Shared.dll Syntax [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)] public sealed class DynamicReferenceAttribute : PropertyAttribute Properties NullValueText Declaration public string NullValueText { get; set; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Shared.DynamicReferenceFolderAttribute.html": {
    "href": "api/RocketshiftStudio.Shared.DynamicReferenceFolderAttribute.html",
    "title": "Class DynamicReferenceFolderAttribute | Trophy - Ultimate Score System Documentation",
    "summary": "Class DynamicReferenceFolderAttribute Inheritance object Attribute PropertyAttribute DynamicReferenceFolderAttribute Namespace: RocketshiftStudio.Shared Assembly: RocketshiftStudio.Shared.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, Inherited = false, AllowMultiple = false)] public sealed class DynamicReferenceFolderAttribute : PropertyAttribute Constructors DynamicReferenceFolderAttribute(string) Declaration public DynamicReferenceFolderAttribute(string path) Parameters Type Name Description string path Properties Path Declaration public string Path { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Shared.ExcludeFromDocsAttribute.html": {
    "href": "api/RocketshiftStudio.Shared.ExcludeFromDocsAttribute.html",
    "title": "Class ExcludeFromDocsAttribute | Trophy - Ultimate Score System Documentation",
    "summary": "Class ExcludeFromDocsAttribute Inheritance object Attribute ExcludeFromDocsAttribute Namespace: RocketshiftStudio.Shared Assembly: RocketshiftStudio.Shared.dll Syntax [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = false)] public sealed class ExcludeFromDocsAttribute : Attribute Constructors ExcludeFromDocsAttribute() Declaration public ExcludeFromDocsAttribute()"
  },
  "api/RocketshiftStudio.Shared.ReflectionUtility.html": {
    "href": "api/RocketshiftStudio.Shared.ReflectionUtility.html",
    "title": "Class ReflectionUtility | Trophy - Ultimate Score System Documentation",
    "summary": "Class ReflectionUtility Inheritance object ReflectionUtility Namespace: RocketshiftStudio.Shared Assembly: RocketshiftStudio.Shared.dll Syntax public static class ReflectionUtility Methods DerivedTypes(Type) Declaration public static IEnumerable<Type> DerivedTypes(this Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable<Type>"
  },
  "api/RocketshiftStudio.Shared.SingletonMonoBehaviour-1.html": {
    "href": "api/RocketshiftStudio.Shared.SingletonMonoBehaviour-1.html",
    "title": "Class SingletonMonoBehaviour<T> | Trophy - Ultimate Score System Documentation",
    "summary": "Class SingletonMonoBehaviour<T> Inheritance object Object Component Behaviour MonoBehaviour SingletonMonoBehaviour<T> Trophy Namespace: RocketshiftStudio.Shared Assembly: RocketshiftStudio.Shared.dll Syntax [DisallowMultipleComponent] public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; set; } Property Value Type Description T Methods Awake() Declaration protected virtual void Awake()"
  },
  "api/RocketshiftStudio.Shared.html": {
    "href": "api/RocketshiftStudio.Shared.html",
    "title": "Namespace RocketshiftStudio.Shared | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Shared Classes SingletonMonoBehaviour<T>"
  },
  "api/RocketshiftStudio.Trophy.BestCalculationType.html": {
    "href": "api/RocketshiftStudio.Trophy.BestCalculationType.html",
    "title": "Enum BestCalculationType | Trophy - Ultimate Score System Documentation",
    "summary": "Enum BestCalculationType Defines how best value will be calculated Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum BestCalculationType Fields Name Description Highest Consider the highest value then previous Lowest Consider the lowest value then previous"
  },
  "api/RocketshiftStudio.Trophy.Constants.html": {
    "href": "api/RocketshiftStudio.Trophy.Constants.html",
    "title": "Class Constants | Trophy - Ultimate Score System Documentation",
    "summary": "Class Constants Inheritance object Constants Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public static class Constants Fields CATEGORY Declaration public const string CATEGORY = \"Systems\" Field Value Type Description string CORE_SETTINGS_PATH Declaration public static readonly string CORE_SETTINGS_PATH Field Value Type Description string DISCUSSIONS_URL Declaration public const string DISCUSSIONS_URL = \"\" Field Value Type Description string DOC_URL Declaration public const string DOC_URL = \"https://rocketshiftstudio-assets.gitbook.io/trophy/\" Field Value Type Description string FEEDBACK_URL Declaration public const string FEEDBACK_URL = \"https://prf.hn/l/w9gZGLn/\" Field Value Type Description string PRODUCT_FULL_NAME Declaration public const string PRODUCT_FULL_NAME = \"Trophy - Ultimate Score System\" Field Value Type Description string PRODUCT_NAME Declaration public const string PRODUCT_NAME = \"Trophy\" Field Value Type Description string PUBLISHER_NAME Declaration public const string PUBLISHER_NAME = \"Rocketshift Studio\" Field Value Type Description string VERSION Declaration public const string VERSION = \"1.0.0\" Field Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseCloudStorageExtension.html",
    "title": "Class BaseCloudStorageExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Class BaseCloudStorageExtension To allow cloud storage based save/load operations on score values Inheritance object BaseCloudStorageExtension Implements ICloudStorageExtension IStorageExtension ISpecialPermissionExtension IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseCloudStorageExtension : ICloudStorageExtension, IStorageExtension, ISpecialPermissionExtension, IExtension Methods DeleteMultipleAsync(string[]) To delete score values from storage Declaration public abstract Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task Asynchronous operation IsAuthorized() Used by Trophy to check for database authorization Declaration public abstract bool IsAuthorized() Returns Type Description bool Authorization status LoadMultipleAsync(string[]) To load and sync score values with saved values Declaration public virtual Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task<ScoreData[]> Score data collection LoadMultipleAsync(string[], string) To fetch score values of a user with id Declaration public abstract Task<ScoreData[]> LoadMultipleAsync(string[] keys, string userId) Parameters Type Name Description string[] keys Target keys string userId Id of user Returns Type Description Task<ScoreData[]> Score data collection SaveMultipleAsync(ScoreData[]) To save score values to storage Declaration public abstract Task SaveMultipleAsync(ScoreData[] scoreDatas) Parameters Type Name Description ScoreData[] scoreDatas Returns Type Description Task Asynchronous operation Implements ICloudStorageExtension IStorageExtension ISpecialPermissionExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseLocalStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseLocalStorageExtension.html",
    "title": "Class BaseLocalStorageExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Class BaseLocalStorageExtension Inheritance object BaseLocalStorageExtension Implements ILocalStorageExtension IStorageExtension IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseLocalStorageExtension : ILocalStorageExtension, IStorageExtension, IExtension Properties FileExtension Declaration public string FileExtension { get; } Property Value Type Description string SaveDirectory Declaration public abstract string SaveDirectory { get; } Property Value Type Description string Methods DeleteMultipleAsync(string[]) To delete score values from storage Declaration public abstract Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task Asynchronous operation LoadMultipleAsync(string[]) To load and sync score values with saved values Declaration public abstract Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task<ScoreData[]> Score data collection SaveMultipleAsync(ScoreData[]) To save score values to storage Declaration public abstract Task SaveMultipleAsync(ScoreData[] scoreDatas) Parameters Type Name Description ScoreData[] scoreDatas Returns Type Description Task Asynchronous operation Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseScoreIconDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseScoreIconDisplayExtension-1.html",
    "title": "Class BaseScoreIconDisplayExtension<TComponent> | Trophy - Ultimate Score System Documentation",
    "summary": "Class BaseScoreIconDisplayExtension<TComponent> Icon display extension base for component type target Inheritance object BaseScoreIconDisplayExtension<TComponent> Implements IScoreIconDisplayExtension IScoreDisplayExtension<Sprite> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseScoreIconDisplayExtension<TComponent> : IScoreIconDisplayExtension, IScoreDisplayExtension<Sprite>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Definition Target score definition Declaration public ScoreDefinition Definition { get; } Property Value Type Description ScoreDefinition Target Target component Declaration public TComponent Target { get; } Property Value Type Description TComponent Methods Updated(Sprite) Invoked on value update Declaration public abstract void Updated(Sprite value) Parameters Type Name Description Sprite value New value Implements IScoreIconDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension-1.html",
    "title": "Class BaseScoreTextDisplayExtension<TComponent> | Trophy - Ultimate Score System Documentation",
    "summary": "Class BaseScoreTextDisplayExtension<TComponent> Text display extension base for component type target Inheritance object BaseScoreTextDisplayExtension<TComponent> Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class BaseScoreTextDisplayExtension<TComponent> : IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Definition Target score definition Declaration public ScoreDefinition Definition { get; } Property Value Type Description ScoreDefinition Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration public string Format { get; } Property Value Type Description string Target Target component Declaration protected TComponent Target { get; } Property Value Type Description TComponent Type Target score type Declaration public ScoreType Type { get; } Property Value Type Description ScoreType Methods Updated(string) Invoked on value update Declaration public abstract void Updated(string value) Parameters Type Name Description string value New value Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.Binary.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.Binary.html",
    "title": "Class Binary | Trophy - Ultimate Score System Documentation",
    "summary": "Class Binary Inheritance object BaseLocalStorageExtension Binary Implements ILocalStorageExtension IStorageExtension IExtension Inherited Members BaseLocalStorageExtension.FileExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax public sealed class Binary : BaseLocalStorageExtension, ILocalStorageExtension, IStorageExtension, IExtension Properties SaveDirectory Declaration public override string SaveDirectory { get; } Property Value Type Description string Overrides BaseLocalStorageExtension.SaveDirectory Methods DeleteMultipleAsync(string[]) Declaration public override Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task Overrides BaseLocalStorageExtension.DeleteMultipleAsync(string[]) LoadMultipleAsync(string[]) Declaration public override Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task<ScoreData[]> Overrides BaseLocalStorageExtension.LoadMultipleAsync(string[]) SaveMultipleAsync(ScoreData[]) Declaration public override Task SaveMultipleAsync(ScoreData[] data) Parameters Type Name Description ScoreData[] data Returns Type Description Task Overrides BaseLocalStorageExtension.SaveMultipleAsync(ScoreData[]) Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.CompnentScoreTextDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.CompnentScoreTextDisplayExtension-1.html",
    "title": "Class CompnentScoreTextDisplayExtension<TComponent> | Trophy - Ultimate Score System Documentation",
    "summary": "Class CompnentScoreTextDisplayExtension<TComponent> Text display extension base for component type target Inheritance object CompnentScoreTextDisplayExtension<TComponent> Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class CompnentScoreTextDisplayExtension<TComponent> : IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Definition Target score definition Declaration public ScoreDefinition Definition { get; } Property Value Type Description ScoreDefinition Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration public string Format { get; } Property Value Type Description string Target Target component Declaration protected TComponent Target { get; } Property Value Type Description TComponent Type Target score type Declaration public ScoreType Type { get; } Property Value Type Description ScoreType Methods Updated(string) Invoked on value update Declaration public abstract void Updated(string value) Parameters Type Name Description string value New value Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreIconDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ComponentScoreIconDisplayExtension-1.html",
    "title": "Class ComponentScoreIconDisplayExtension<TComponent> | Trophy - Ultimate Score System Documentation",
    "summary": "Class ComponentScoreIconDisplayExtension<TComponent> Icon display extension base for component type target Inheritance object ComponentScoreIconDisplayExtension<TComponent> Implements IScoreIconDisplayExtension IScoreDisplayExtension<Sprite> IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public abstract class ComponentScoreIconDisplayExtension<TComponent> : IScoreIconDisplayExtension, IScoreDisplayExtension<Sprite>, IExtension where TComponent : Component Type Parameters Name Description TComponent Target component type Properties Definition Target score definition Declaration public ScoreDefinition Definition { get; } Property Value Type Description ScoreDefinition Target Target component Declaration public TComponent Target { get; } Property Value Type Description TComponent Methods Updated(Sprite) Invoked on value update Declaration public abstract void Updated(Sprite value) Parameters Type Name Description Sprite value New value Implements IScoreIconDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html",
    "title": "Interface ICloudStorageExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface ICloudStorageExtension To allow cloud storage based save/load operations on score values Inherited Members IStorageExtension.LoadMultipleAsync(string[]) IStorageExtension.SaveMultipleAsync(ScoreData[]) IStorageExtension.DeleteMultipleAsync(string[]) ISpecialPermissionExtension.IsAuthorized() Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ICloudStorageExtension : IStorageExtension, ISpecialPermissionExtension, IExtension Methods LoadMultipleAsync(string[], string) To fetch score values of a user with id Declaration Task<ScoreData[]> LoadMultipleAsync(string[] keys, string userId) Parameters Type Name Description string[] keys Target keys string userId Id of user Returns Type Description Task<ScoreData[]> Score data collection"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IExtension.html",
    "title": "Interface IExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ILeaderboardExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ILeaderboardExtension.html",
    "title": "Interface ILeaderboardExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface ILeaderboardExtension Inherited Members ISpecialPermissionExtension.IsAuthorized() Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ILeaderboardExtension : ISpecialPermissionExtension, IExtension Methods PostAsync(params LeaderboardData[]) Invoked on leaderboard post request call from PostToLeaderboardAsync(params LeaderboardRequest[]) or PostToLeaderboard(params LeaderboardRequest[]) Declaration Task PostAsync(params LeaderboardData[] leaderboardData) Parameters Type Name Description LeaderboardData[] leaderboardData Returns Type Description Task Asynchronous operation"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ILocalStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ILocalStorageExtension.html",
    "title": "Interface ILocalStorageExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface ILocalStorageExtension To allow local storage based save/load operations on score values Inherited Members IStorageExtension.LoadMultipleAsync(string[]) IStorageExtension.SaveMultipleAsync(ScoreData[]) IStorageExtension.DeleteMultipleAsync(string[]) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ILocalStorageExtension : IStorageExtension, IExtension Properties FileExtension Declaration string FileExtension { get; } Property Value Type Description string SaveDirectory Declaration string SaveDirectory { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreDisplayExtension-1.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreDisplayExtension-1.html",
    "title": "Interface IScoreDisplayExtension<TValue> | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IScoreDisplayExtension<TValue> Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreDisplayExtension<TValue> : IExtension where TValue : class Type Parameters Name Description TValue Properties Definition Target score definition Declaration ScoreDefinition Definition { get; } Property Value Type Description ScoreDefinition Methods Updated(TValue) Invoked on value update Declaration void Updated(TValue value) Parameters Type Name Description TValue value New value"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreIconDisplayExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreIconDisplayExtension.html",
    "title": "Interface IScoreIconDisplayExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IScoreIconDisplayExtension Inherited Members IScoreDisplayExtension<Sprite>.Definition IScoreDisplayExtension<Sprite>.Updated(Sprite) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreIconDisplayExtension : IScoreDisplayExtension<Sprite>, IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IScoreTextDisplayExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IScoreTextDisplayExtension.html",
    "title": "Interface IScoreTextDisplayExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IScoreTextDisplayExtension Inherited Members IScoreDisplayExtension<string>.Definition IScoreDisplayExtension<string>.Updated(string) Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IScoreTextDisplayExtension : IScoreDisplayExtension<string>, IExtension Properties Format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration string Format { get; } Property Value Type Description string Type Target score type Declaration ScoreType Type { get; } Property Value Type Description ScoreType"
  },
  "api/RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html",
    "title": "Interface ISpecialPermissionExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface ISpecialPermissionExtension To extensions to perform actions based on authorization Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface ISpecialPermissionExtension : IExtension Methods IsAuthorized() Used by Trophy to check for database authorization Declaration bool IsAuthorized() Returns Type Description bool Authorization status"
  },
  "api/RocketshiftStudio.Trophy.Extensions.IStorageExtension.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.IStorageExtension.html",
    "title": "Interface IStorageExtension | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IStorageExtension To allow storage based save/load operations on score values Namespace: RocketshiftStudio.Trophy.Extensions Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IStorageExtension : IExtension Methods DeleteMultipleAsync(string[]) To delete score values from storage Declaration Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task Asynchronous operation LoadMultipleAsync(string[]) To load and sync score values with saved values Declaration Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task<ScoreData[]> Score data collection SaveMultipleAsync(ScoreData[]) To save score values to storage Declaration Task SaveMultipleAsync(ScoreData[] scoreData) Parameters Type Name Description ScoreData[] scoreData Returns Type Description Task Asynchronous operation"
  },
  "api/RocketshiftStudio.Trophy.Extensions.Image.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.Image.html",
    "title": "Class Image | Trophy - Ultimate Score System Documentation",
    "summary": "Class Image Inheritance object BaseScoreIconDisplayExtension<Image> Image Implements IScoreIconDisplayExtension IScoreDisplayExtension<Sprite> IExtension Inherited Members BaseScoreIconDisplayExtension<Image>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"UI\")] public sealed class Image : BaseScoreIconDisplayExtension<Image>, IScoreIconDisplayExtension, IScoreDisplayExtension<Sprite>, IExtension Methods Updated(Sprite) Declaration public override void Updated(Sprite value) Parameters Type Name Description Sprite value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreIconDisplayExtension<UnityEngine.UI.Image>.Updated(UnityEngine.Sprite) Implements IScoreIconDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.Modular3DText.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.Modular3DText.html",
    "title": "Class Modular3DText | Trophy - Ultimate Score System Documentation",
    "summary": "Class Modular3DText Inheritance object BaseScoreTextDisplayExtension<Modular3DText> Modular3DText Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Inherited Members BaseScoreTextDisplayExtension<Modular3DText>.ScoreType BaseScoreTextDisplayExtension<Modular3DText>.Format BaseScoreTextDisplayExtension<Modular3DText>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"3D/3rd Party\")] public sealed class Modular3DText : BaseScoreTextDisplayExtension<Modular3DText>, IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension Methods Updated(string) Declaration public override void Updated(string value) Parameters Type Name Description string value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension<TinyGiantStudio.Text.Modular3DText>.Updated(string) Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.NewtonsoftJSONDotNet.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.NewtonsoftJSONDotNet.html",
    "title": "Class NewtonsoftJSONDotNet | Trophy - Ultimate Score System Documentation",
    "summary": "Class NewtonsoftJSONDotNet Inheritance object BaseLocalStorageExtension NewtonsoftJSONDotNet Implements ILocalStorageExtension IStorageExtension IExtension Inherited Members BaseLocalStorageExtension.FileExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax public sealed class NewtonsoftJSONDotNet : BaseLocalStorageExtension, ILocalStorageExtension, IStorageExtension, IExtension Properties SaveDirectory Declaration public override string SaveDirectory { get; } Property Value Type Description string Overrides BaseLocalStorageExtension.SaveDirectory Methods DeleteMultipleAsync(string[]) Declaration public override Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task Overrides BaseLocalStorageExtension.DeleteMultipleAsync(string[]) LoadMultipleAsync(string[]) Declaration public override Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task<ScoreData[]> Overrides BaseLocalStorageExtension.LoadMultipleAsync(string[]) SaveMultipleAsync(ScoreData[]) Declaration public override Task SaveMultipleAsync(ScoreData[] data) Parameters Type Name Description ScoreData[] data Returns Type Description Task Overrides BaseLocalStorageExtension.SaveMultipleAsync(ScoreData[]) Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.PlainText.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.PlainText.html",
    "title": "Class PlainText | Trophy - Ultimate Score System Documentation",
    "summary": "Class PlainText Inheritance object BaseLocalStorageExtension PlainText Implements ILocalStorageExtension IStorageExtension IExtension Inherited Members BaseLocalStorageExtension.FileExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax public sealed class PlainText : BaseLocalStorageExtension, ILocalStorageExtension, IStorageExtension, IExtension Properties SaveDirectory Declaration public override string SaveDirectory { get; } Property Value Type Description string Overrides BaseLocalStorageExtension.SaveDirectory Methods DeleteMultipleAsync(string[]) Declaration public override Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task Overrides BaseLocalStorageExtension.DeleteMultipleAsync(string[]) LoadMultipleAsync(string[]) Declaration public override Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task<ScoreData[]> Overrides BaseLocalStorageExtension.LoadMultipleAsync(string[]) SaveMultipleAsync(ScoreData[]) Declaration public override Task SaveMultipleAsync(ScoreData[] data) Parameters Type Name Description ScoreData[] data Returns Type Description Task Overrides BaseLocalStorageExtension.SaveMultipleAsync(ScoreData[]) Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.RawImage.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.RawImage.html",
    "title": "Class RawImage | Trophy - Ultimate Score System Documentation",
    "summary": "Class RawImage Inheritance object BaseScoreIconDisplayExtension<RawImage> RawImage Implements IScoreIconDisplayExtension IScoreDisplayExtension<Sprite> IExtension Inherited Members BaseScoreIconDisplayExtension<RawImage>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"UI\")] public sealed class RawImage : BaseScoreIconDisplayExtension<RawImage>, IScoreIconDisplayExtension, IScoreDisplayExtension<Sprite>, IExtension Methods Updated(Sprite) Declaration public override void Updated(Sprite value) Parameters Type Name Description Sprite value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreIconDisplayExtension<UnityEngine.UI.RawImage>.Updated(UnityEngine.Sprite) Implements IScoreIconDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.SpriteRenderer.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.SpriteRenderer.html",
    "title": "Class SpriteRenderer | Trophy - Ultimate Score System Documentation",
    "summary": "Class SpriteRenderer Inheritance object BaseScoreIconDisplayExtension<SpriteRenderer> SpriteRenderer Implements IScoreIconDisplayExtension IScoreDisplayExtension<Sprite> IExtension Inherited Members BaseScoreIconDisplayExtension<SpriteRenderer>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"2D\")] public sealed class SpriteRenderer : BaseScoreIconDisplayExtension<SpriteRenderer>, IScoreIconDisplayExtension, IScoreDisplayExtension<Sprite>, IExtension Methods Updated(Sprite) Declaration public override void Updated(Sprite value) Parameters Type Name Description Sprite value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreIconDisplayExtension<UnityEngine.SpriteRenderer>.Updated(UnityEngine.Sprite) Implements IScoreIconDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.Text.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.Text.html",
    "title": "Class Text | Trophy - Ultimate Score System Documentation",
    "summary": "Class Text Inheritance object BaseScoreTextDisplayExtension<Text> Text Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Inherited Members BaseScoreTextDisplayExtension<Text>.ScoreType BaseScoreTextDisplayExtension<Text>.Format BaseScoreTextDisplayExtension<Text>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"UI/Legacy\")] public sealed class Text : BaseScoreTextDisplayExtension<Text>, IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension Methods Updated(string) Declaration public override void Updated(string value) Parameters Type Name Description string value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension<UnityEngine.UI.Text>.Updated(string) Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.TextMesh.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.TextMesh.html",
    "title": "Class TextMesh | Trophy - Ultimate Score System Documentation",
    "summary": "Class TextMesh Inheritance object BaseScoreTextDisplayExtension<TextMesh> TextMesh Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Inherited Members BaseScoreTextDisplayExtension<TextMesh>.ScoreType BaseScoreTextDisplayExtension<TextMesh>.Format BaseScoreTextDisplayExtension<TextMesh>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"3D/Legacy\")] public sealed class TextMesh : BaseScoreTextDisplayExtension<TextMesh>, IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension Methods Updated(string) Declaration public override void Updated(string value) Parameters Type Name Description string value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension<UnityEngine.TextMesh>.Updated(string) Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.TextMeshPro.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.TextMeshPro.html",
    "title": "Class TextMeshPro | Trophy - Ultimate Score System Documentation",
    "summary": "Class TextMeshPro Inheritance object BaseScoreTextDisplayExtension<TextMeshPro> TextMeshPro Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Inherited Members BaseScoreTextDisplayExtension<TextMeshPro>.ScoreType BaseScoreTextDisplayExtension<TextMeshPro>.Format BaseScoreTextDisplayExtension<TextMeshPro>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"3D\")] public sealed class TextMeshPro : BaseScoreTextDisplayExtension<TextMeshPro>, IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension Methods Updated(string) Declaration public override void Updated(string value) Parameters Type Name Description string value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension<TMPro.TextMeshPro>.Updated(string) Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.TextMeshProUGUI.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.TextMeshProUGUI.html",
    "title": "Class TextMeshProUGUI | Trophy - Ultimate Score System Documentation",
    "summary": "Class TextMeshProUGUI Inheritance object BaseScoreTextDisplayExtension<TextMeshProUGUI> TextMeshProUGUI Implements IScoreTextDisplayExtension IScoreDisplayExtension<string> IExtension Inherited Members BaseScoreTextDisplayExtension<TextMeshProUGUI>.ScoreType BaseScoreTextDisplayExtension<TextMeshProUGUI>.Format BaseScoreTextDisplayExtension<TextMeshProUGUI>.Definition Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax [DynamicReferenceFolder(\"UI\")] public sealed class TextMeshProUGUI : BaseScoreTextDisplayExtension<TextMeshProUGUI>, IScoreTextDisplayExtension, IScoreDisplayExtension<string>, IExtension Methods Updated(string) Declaration public override void Updated(string value) Parameters Type Name Description string value Overrides RocketshiftStudio.Trophy.Extensions.BaseScoreTextDisplayExtension<TMPro.TextMeshProUGUI>.Updated(string) Implements IScoreTextDisplayExtension IScoreDisplayExtension<TValue> IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.UnityJsonUtility.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.UnityJsonUtility.html",
    "title": "Class UnityJsonUtility | Trophy - Ultimate Score System Documentation",
    "summary": "Class UnityJsonUtility Inheritance object BaseLocalStorageExtension UnityJsonUtility Implements ILocalStorageExtension IStorageExtension IExtension Inherited Members BaseLocalStorageExtension.FileExtension Namespace: RocketshiftStudio.Trophy.Extensions Assembly: Assembly-CSharp.dll Syntax public sealed class UnityJsonUtility : BaseLocalStorageExtension, ILocalStorageExtension, IStorageExtension, IExtension Properties SaveDirectory Declaration public override string SaveDirectory { get; } Property Value Type Description string Overrides BaseLocalStorageExtension.SaveDirectory Methods DeleteMultipleAsync(string[]) Declaration public override Task DeleteMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task Overrides BaseLocalStorageExtension.DeleteMultipleAsync(string[]) LoadMultipleAsync(string[]) Declaration public override Task<ScoreData[]> LoadMultipleAsync(string[] keys) Parameters Type Name Description string[] keys Returns Type Description Task<ScoreData[]> Overrides BaseLocalStorageExtension.LoadMultipleAsync(string[]) SaveMultipleAsync(ScoreData[]) Declaration public override Task SaveMultipleAsync(ScoreData[] data) Parameters Type Name Description ScoreData[] data Returns Type Description Task Overrides BaseLocalStorageExtension.SaveMultipleAsync(ScoreData[]) Implements ILocalStorageExtension IStorageExtension IExtension"
  },
  "api/RocketshiftStudio.Trophy.Extensions.html": {
    "href": "api/RocketshiftStudio.Trophy.Extensions.html",
    "title": "Namespace RocketshiftStudio.Trophy.Extensions | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.Extensions Classes BaseCloudStorageExtension To allow cloud storage based save/load operations on score values BaseLocalStorageExtension CompnentScoreTextDisplayExtension<TComponent> Text display extension base for component type target ComponentScoreIconDisplayExtension<TComponent> Icon display extension base for component type target Interfaces ICloudStorageExtension To allow cloud storage based save/load operations on score values IExtension ILeaderboardExtension ILocalStorageExtension To allow local storage based save/load operations on score values IScoreDisplayExtension<TValue> IScoreIconDisplayExtension IScoreTextDisplayExtension ISpecialPermissionExtension To extensions to perform actions based on authorization IStorageExtension To allow storage based save/load operations on score values"
  },
  "api/RocketshiftStudio.Trophy.FlowRestriction.html": {
    "href": "api/RocketshiftStudio.Trophy.FlowRestriction.html",
    "title": "Enum FlowRestriction | Trophy - Ultimate Score System Documentation",
    "summary": "Enum FlowRestriction Defines the restriction of value direction Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum FlowRestriction Fields Name Description Decremental Can only be decreased Incremental Can only be increased None Can be both increased and decreased"
  },
  "api/RocketshiftStudio.Trophy.FormatUtility.html": {
    "href": "api/RocketshiftStudio.Trophy.FormatUtility.html",
    "title": "Class FormatUtility | Trophy - Ultimate Score System Documentation",
    "summary": "Class FormatUtility Used for text formation purposes Inheritance object FormatUtility Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public static class FormatUtility Methods FormatScore(string, bool, string, double, double) Score value to a text using format Declaration public static string FormatScore(string format, bool asTime, string name, double previous = NaN, double current = NaN) Parameters Type Name Description string format Format to use bool asTime Format to time string name Name of the score double previous The previous value double current The current value Returns Type Description string Formatted score text"
  },
  "api/RocketshiftStudio.Trophy.IDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.IDefinition.html",
    "title": "Interface IDefinition | Trophy - Ultimate Score System Documentation",
    "summary": "Interface IDefinition Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public interface IDefinition Properties Key Identification key of the definition Declaration string Key { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardData.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardData.html",
    "title": "Struct LeaderboardData | Trophy - Ultimate Score System Documentation",
    "summary": "Struct LeaderboardData Define the data of leaderboard for leaderboard extensions to handle Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public readonly struct LeaderboardData Constructors LeaderboardData(string, string, double) Create instance without additional information for the leaderboard Declaration public LeaderboardData(string key, string scoreKey, double value) Parameters Type Name Description string key Identification key of the leaderboard string scoreKey Identification key of the target score double value Value to pass to leaderboard LeaderboardData(string, string, double, object) Create instance with additional information for the leaderboard Declaration public LeaderboardData(string key, string scoreKey, double value, object customMetadata) Parameters Type Name Description string key Identification key of the leaderboard string scoreKey Identification key of the target score double value Value to pass to leaderboard object customMetadata Additional information for the leaderboard Fields customMetadata Additional information for the leaderboard Declaration public readonly object customMetadata Field Value Type Description object key Identification key of the leaderboard Declaration public readonly string key Field Value Type Description string scoreKey Identification key of the target score Declaration public readonly string scoreKey Field Value Type Description string value Value to pass to leaderboard Declaration public readonly double value Field Value Type Description double"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardDefinition.html",
    "title": "Class LeaderboardDefinition | Trophy - Ultimate Score System Documentation",
    "summary": "Class LeaderboardDefinition Inheritance object Object ScriptableObject LeaderboardDefinition Implements IDefinition Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [CreateAssetMenu(menuName = \"Trophy/Definitions/Leaderboard\", fileName = \"New Leaderboard Definition\")] [ExcludeFromPreset] public sealed class LeaderboardDefinition : ScriptableObject, IDefinition Properties Key Identification key of the definition Declaration public string Key { get; } Property Value Type Description string ScoreDefinition Declaration public ScoreDefinition ScoreDefinition { get; } Property Value Type Description ScoreDefinition ValueSource Declaration public LeaderboardValueSource ValueSource { get; } Property Value Type Description LeaderboardValueSource Implements IDefinition"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardRequest.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardRequest.html",
    "title": "Struct LeaderboardRequest | Trophy - Ultimate Score System Documentation",
    "summary": "Struct LeaderboardRequest Define the request data of leaderboard Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public readonly struct LeaderboardRequest Constructors LeaderboardRequest(string, object) Declaration public LeaderboardRequest(string key, object metadata = null) Parameters Type Name Description string key Identification key of the target score object metadata Additional information for leaderboard Fields key Identification key of the target score Declaration public readonly string key Field Value Type Description string metadata Additional information for leaderboard Declaration public readonly object metadata Field Value Type Description object"
  },
  "api/RocketshiftStudio.Trophy.LeaderboardValueSource.html": {
    "href": "api/RocketshiftStudio.Trophy.LeaderboardValueSource.html",
    "title": "Enum LeaderboardValueSource | Trophy - Ultimate Score System Documentation",
    "summary": "Enum LeaderboardValueSource Defines the source of value for leaderboard post request Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum LeaderboardValueSource Fields Name Description Best Will use the best value when posting Latest Will use the latest value when posting"
  },
  "api/RocketshiftStudio.Trophy.LimitFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.LimitFlags.html",
    "title": "Enum LimitFlags | Trophy - Ultimate Score System Documentation",
    "summary": "Enum LimitFlags Define the limit of a score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum LimitFlags Fields Name Description Both Define both minimum and maximum limit Maximum Define maximum limit Minimum Define minimum limit None No limit other then double.Min and double.Max"
  },
  "api/RocketshiftStudio.Trophy.MemoryValidationTarget.html": {
    "href": "api/RocketshiftStudio.Trophy.MemoryValidationTarget.html",
    "title": "Enum MemoryValidationTarget | Trophy - Ultimate Score System Documentation",
    "summary": "Enum MemoryValidationTarget Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum MemoryValidationTarget Fields Name Description Best Current Latest"
  },
  "api/RocketshiftStudio.Trophy.Score.html": {
    "href": "api/RocketshiftStudio.Trophy.Score.html",
    "title": "Class Score | Trophy - Ultimate Score System Documentation",
    "summary": "Class Score Inheritance object Score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class Score Fields definition Declaration public readonly ScoreDefinition definition Field Value Type Description ScoreDefinition Properties BestValue Declaration public double BestValue { get; } Property Value Type Description double CurrentValue Declaration public double CurrentValue { get; } Property Value Type Description double IsCounting Declaration public bool IsCounting { get; } Property Value Type Description bool LatestValue Declaration public double LatestValue { get; } Property Value Type Description double Multiplier Declaration public float Multiplier { get; } Property Value Type Description float Status Declaration public ScoreStatusFlags Status { get; } Property Value Type Description ScoreStatusFlags"
  },
  "api/RocketshiftStudio.Trophy.ScoreData.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreData.html",
    "title": "Class ScoreData | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScoreData Inheritance object ScoreData Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class ScoreData Constructors ScoreData(string, double, double) Declaration public ScoreData(string key, double best, double latest) Parameters Type Name Description string key double best double latest Fields best Declaration public readonly double best Field Value Type Description double key Declaration public readonly string key Field Value Type Description string latest Declaration public readonly double latest Field Value Type Description double"
  },
  "api/RocketshiftStudio.Trophy.ScoreDefinition.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreDefinition.html",
    "title": "Class ScoreDefinition | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScoreDefinition ScoreDefinition is a collection of arguments which determines how a score will act Inheritance object Object ScriptableObject ScoreDefinition Implements IDefinition Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [CreateAssetMenu(menuName = \"Trophy/Definitions/Score\", fileName = \"New Score Definition\")] [ExcludeFromPreset] public sealed class ScoreDefinition : ScriptableObject, IDefinition Properties AbsoluteValue Convert negative values to positive Declaration public bool AbsoluteValue { get; } Property Value Type Description bool BestCalculationType Declaration public BestCalculationType BestCalculationType { get; } Property Value Type Description BestCalculationType FlowRestriction Declaration public FlowRestriction FlowRestriction { get; } Property Value Type Description FlowRestriction Key Identification key of the definition Declaration public string Key { get; } Property Value Type Description string LimitFlags Define the limit of the score Declaration public LimitFlags LimitFlags { get; } Property Value Type Description LimitFlags Maximum Declaration public double Maximum { get; } Property Value Type Description double Metadata Declaration public ScoreMetadata Metadata { get; } Property Value Type Description ScoreMetadata Minimum Declaration public double Minimum { get; } Property Value Type Description double StorageFlags Declaration public StorageFlags StorageFlags { get; } Property Value Type Description StorageFlags WholeValue Round value to nearest whole value Declaration public bool WholeValue { get; } Property Value Type Description bool Implements IDefinition"
  },
  "api/RocketshiftStudio.Trophy.ScoreMetadata.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreMetadata.html",
    "title": "Class ScoreMetadata | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScoreMetadata Additional information about scores Inheritance object ScoreMetadata Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Serializable] public sealed class ScoreMetadata Properties DefaultFormat Declaration public string DefaultFormat { get; } Property Value Type Description string FormatAsTime Declaration public bool FormatAsTime { get; } Property Value Type Description bool Icon Declaration public Sprite Icon { get; } Property Value Type Description Sprite Name Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.ScoreStatusFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreStatusFlags.html",
    "title": "Enum ScoreStatusFlags | Trophy - Ultimate Score System Documentation",
    "summary": "Enum ScoreStatusFlags For status of the score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum ScoreStatusFlags Fields Name Description Cloud Saved in cloud storage Leaderboard Posted to leaderboard Local Saved in local storage Unsaved Not saved or posted"
  },
  "api/RocketshiftStudio.Trophy.ScoreType.html": {
    "href": "api/RocketshiftStudio.Trophy.ScoreType.html",
    "title": "Enum ScoreType | Trophy - Ultimate Score System Documentation",
    "summary": "Enum ScoreType Types of score Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public enum ScoreType Fields Name Description Best Highest saved value of score after score count ended Current The concurrent value of score when count mode is on Latest Latest saved value of score after score count ended"
  },
  "api/RocketshiftStudio.Trophy.StorageFlags.html": {
    "href": "api/RocketshiftStudio.Trophy.StorageFlags.html",
    "title": "Enum StorageFlags | Trophy - Ultimate Score System Documentation",
    "summary": "Enum StorageFlags Defines how the score values will be saved or loaded Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [Flags] public enum StorageFlags Fields Name Description Both Saved/Loaded using both local and cloud storage Cloud Saved/Loaded using cloud storage Local Saved/Loaded using local storage None No save/load"
  },
  "api/RocketshiftStudio.Trophy.Trophy.CountingChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.CountingChangedCallback.html",
    "title": "Delegate Trophy.CountingChangedCallback | Trophy - Ultimate Score System Documentation",
    "summary": "Delegate Trophy.CountingChangedCallback Invoked per count toggle change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.CountingChangedCallback(string key, bool previous, bool current) Parameters Type Name Description string key The key of the effected score bool previous The count state before change bool current The count state after change"
  },
  "api/RocketshiftStudio.Trophy.Trophy.StatusChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.StatusChangedCallback.html",
    "title": "Delegate Trophy.StatusChangedCallback | Trophy - Ultimate Score System Documentation",
    "summary": "Delegate Trophy.StatusChangedCallback Invoked per status change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.StatusChangedCallback(string key, ScoreStatusFlags previous, ScoreStatusFlags current) Parameters Type Name Description string key The key of the effected score ScoreStatusFlags previous The status before change ScoreStatusFlags current The status after change"
  },
  "api/RocketshiftStudio.Trophy.Trophy.ValueChangedCallback.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.ValueChangedCallback.html",
    "title": "Delegate Trophy.ValueChangedCallback | Trophy - Ultimate Score System Documentation",
    "summary": "Delegate Trophy.ValueChangedCallback Invoked per value change. Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax public delegate void Trophy.ValueChangedCallback(string key, double previous, double current, ScoreType type) Parameters Type Name Description string key The key of the effected score double previous The value before change double current The value after change ScoreType type The change value type"
  },
  "api/RocketshiftStudio.Trophy.Trophy.html": {
    "href": "api/RocketshiftStudio.Trophy.Trophy.html",
    "title": "Class Trophy | Trophy - Ultimate Score System Documentation",
    "summary": "Class Trophy Handle all score based operations from this class Inheritance object Object Component Behaviour MonoBehaviour SingletonMonoBehaviour<Trophy> Trophy Inherited Members SingletonMonoBehaviour<Trophy>.Instance Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"\")] [ExcludeFromPreset] [ExcludeFromObjectFactory] public sealed class Trophy : SingletonMonoBehaviour<Trophy> Properties IsInitialized Indicates the state of Trophy Declaration public static bool IsInitialized { get; } Property Value Type Description bool Scores All active scores Declaration public IList<Score> Scores { get; } Property Value Type Description IList<Score> Methods BeginCounting(params string[]) Set counting mode to true in scores Declaration public void BeginCounting(params string[] keys) Parameters Type Name Description string[] keys Target keys Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys ClearSavedScoreAsync(params string[]) Delete saved values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task ClearSavedScoreAsync(params string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task DecreaseValue(string, double, bool) Decrease value of score Declaration public void DecreaseValue(string key, double amount, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double amount Amount to subtract bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 EndCounting(params string[]) Set count mode to false in scores Declaration public void EndCounting(params string[] keys) Parameters Type Name Description string[] keys Target keys Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given keys GetMultiplier(string) Get multiplier of a score Declaration public float GetMultiplier(string key) Parameters Type Name Description string key Target key Returns Type Description float Current multiplier value Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key GetStatus(string) Get status of a score Declaration public ScoreStatusFlags GetStatus(string key) Parameters Type Name Description string key Target key Returns Type Description ScoreStatusFlags The status of score Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key GetUserScoreAsync(string, params string[]) Get saved values from cloud storage asynchronously using user id Declaration public Task<ScoreData[]> GetUserScoreAsync(string userId, params string[] keys) Parameters Type Name Description string userId Id of user string[] keys Target keys Returns Type Description Task<ScoreData[]> Task with collection of ScoreData from given user id and keys GetValue(string, ScoreType) Get value of score Declaration public double GetValue(string key, ScoreType type = ScoreType.Current) Parameters Type Name Description string key Target key ScoreType type Type of score Returns Type Description double Value from score of given key and given type Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key IncreaseValue(string, double, bool) Increase value of score Declaration public void IncreaseValue(string key, double amount, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double amount Amount to add bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 InitializeAsync() Initialize Trophy asynchronously Declaration public static Task InitializeAsync() Returns Type Description Task IsCounting(string) To check if a score is in count mode Declaration public bool IsCounting(string key) Parameters Type Name Description string key Target key Returns Type Description bool Current count mode of score Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Load(string[]) Load saved values from storage according to storage flags defined in the ScoreDefinition Declaration public void Load(string[] keys) Parameters Type Name Description string[] keys Target keys LoadAsync(string[]) Load saved values from storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task LoadAsync(string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task MultiplyValue(string, double, bool) Multiply value of score Declaration public void MultiplyValue(string key, double amount, bool ignoreMultiplier) Parameters Type Name Description string key Target key double amount Amount to multiply with bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 PostToLeaderboard(params LeaderboardRequest[]) Post values to leaderboard according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public void PostToLeaderboard(params LeaderboardRequest[] requests) Parameters Type Name Description LeaderboardRequest[] requests Collection of LeaderboardRequest that will be used to post in leaderboard PostToLeaderboardAsync(params LeaderboardRequest[]) Post values to leaderboard asynchronously according to leaderboard definition with respective keys using extension defined in TrophySettings Declaration public Task PostToLeaderboardAsync(params LeaderboardRequest[] requests) Parameters Type Name Description LeaderboardRequest[] requests Collection of LeaderboardRequest that will be used to post in leaderboard Returns Type Description Task ResetValue(string) Reset value of score Declaration public void ResetValue(string key) Parameters Type Name Description string key Target key Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Save(params string[]) Save current values in storage according to storage flags defined in the ScoreDefinition Declaration public void Save(params string[] keys) Parameters Type Name Description string[] keys Target keys SaveAsync(params string[]) Save current values in storage asynchronously according to storage flags defined in the ScoreDefinition Declaration public Task SaveAsync(params string[] keys) Parameters Type Name Description string[] keys Target keys Returns Type Description Task SetMultiplier(string, float) Set multiplier of a score Declaration public void SetMultiplier(string key, float amount) Parameters Type Name Description string key Target key float amount Multiplier amount Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then 0 and Not positive finite SetValue(string, double, bool) Set value of score Declaration public void SetValue(string key, double value, bool ignoreMultiplier = false) Parameters Type Name Description string key Target key double value New value bool ignoreMultiplier Ignore the score multiplier Exceptions Type Condition Exceptions.DefinitionNullException<TDefinition> When the expected definitions are not in TrophySettings found with given key Exceptions.InvalidAmountException If amount is less then or equal to 0 TryGetValue(string, out double, ScoreType) Try get value of score Declaration public bool TryGetValue(string key, out double value, ScoreType type = ScoreType.Current) Parameters Type Name Description string key Target key double value Value from score of given key and given type ScoreType type Type of score Returns Type Description bool True if score value found otherwise false Events CountingChanged Declaration public event Trophy.CountingChangedCallback CountingChanged Event Type Type Description Trophy.CountingChangedCallback Initialized Invoked as soon as Trophy initialized Declaration public static event Action Initialized Event Type Type Description Action StatusChanged Declaration public event Trophy.StatusChangedCallback StatusChanged Event Type Type Description Trophy.StatusChangedCallback ValueChanged Declaration public event Trophy.ValueChangedCallback ValueChanged Event Type Type Description Trophy.ValueChangedCallback"
  },
  "api/RocketshiftStudio.Trophy.TrophyIconDisplay.html": {
    "href": "api/RocketshiftStudio.Trophy.TrophyIconDisplay.html",
    "title": "Class TrophyIconDisplay | Trophy - Ultimate Score System Documentation",
    "summary": "Class TrophyIconDisplay In order to show score icon in game world or UGUI Inheritance object Object Component Behaviour MonoBehaviour TrophyIconDisplay Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"Trophy/UI/Icon Display\")] [ExecuteAlways] public sealed class TrophyIconDisplay : MonoBehaviour Properties Extension Declaration public IScoreIconDisplayExtension Extension { get; } Property Value Type Description IScoreIconDisplayExtension"
  },
  "api/RocketshiftStudio.Trophy.TrophyScoreDisplay.html": {
    "href": "api/RocketshiftStudio.Trophy.TrophyScoreDisplay.html",
    "title": "Class TrophyScoreDisplay | Trophy - Ultimate Score System Documentation",
    "summary": "Class TrophyScoreDisplay In order to show score in game world or UGUI Inheritance object Object Component Behaviour MonoBehaviour TrophyScoreDisplay Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [AddComponentMenu(\"Trophy/UI/Score Display\")] [ExecuteAlways] public sealed class TrophyScoreDisplay : MonoBehaviour Properties Extension Declaration public IScoreTextDisplayExtension Extension { get; } Property Value Type Description IScoreTextDisplayExtension"
  },
  "api/RocketshiftStudio.Trophy.TrophySettings.html": {
    "href": "api/RocketshiftStudio.Trophy.TrophySettings.html",
    "title": "Class TrophySettings | Trophy - Ultimate Score System Documentation",
    "summary": "Class TrophySettings Inheritance object Object ScriptableObject TrophySettings Namespace: RocketshiftStudio.Trophy Assembly: RocketshiftStudio.Trophy.dll Syntax [ExcludeFromPreset] public sealed class TrophySettings : ScriptableObject Properties AutoLoadSavedAtInit Declaration public bool AutoLoadSavedAtInit { get; } Property Value Type Description bool CloudSaveExtension Declaration public ICloudStorageExtension CloudSaveExtension { get; } Property Value Type Description ICloudStorageExtension EnableRuntimeTrophyExplorer Declaration public bool EnableRuntimeTrophyExplorer { get; } Property Value Type Description bool Instance Declaration public static TrophySettings Instance { get; } Property Value Type Description TrophySettings LeaderboardDefinitions Declaration public LeaderboardDefinition[] LeaderboardDefinitions { get; } Property Value Type Description LeaderboardDefinition[] LeaderboardExtension Declaration public ILeaderboardExtension LeaderboardExtension { get; } Property Value Type Description ILeaderboardExtension LocalStorageExtension Declaration public ILocalStorageExtension LocalStorageExtension { get; } Property Value Type Description ILocalStorageExtension ScoreDefinitions Declaration public ScoreDefinition[] ScoreDefinitions { get; } Property Value Type Description ScoreDefinition[] Methods Contains(string) Declaration public bool Contains(string key) Parameters Type Name Description string key Returns Type Description bool GetMetadata(string) Declaration public ScoreMetadata GetMetadata(string key) Parameters Type Name Description string key Returns Type Description ScoreMetadata TryGetMetadata(string, out ScoreMetadata) Declaration public bool TryGetMetadata(string key, out ScoreMetadata metadata) Parameters Type Name Description string key ScoreMetadata metadata Returns Type Description bool"
  },
  "api/RocketshiftStudio.Trophy.UIElements.ScoreIcon.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.ScoreIcon.html",
    "title": "Class ScoreIcon | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScoreIcon In order to show score icon UIElements system Inheritance object CallbackEventHandler Focusable VisualElement ScoreIcon Namespace: RocketshiftStudio.Trophy.UIElements Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreIcon : VisualElement Properties key Identification key of the definition Declaration public string key { get; } Property Value Type Description string"
  },
  "api/RocketshiftStudio.Trophy.UIElements.ScoreLabel.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.ScoreLabel.html",
    "title": "Class ScoreLabel | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScoreLabel In order to show score in UIElements system Inheritance object CallbackEventHandler Focusable VisualElement BindableElement TextElement Label ScoreLabel Namespace: RocketshiftStudio.Trophy.UIElements Assembly: RocketshiftStudio.Trophy.dll Syntax public sealed class ScoreLabel : Label Properties format Override the format of ScoreDefinition's metadata's DefaultFormat Declaration public string format { get; } Property Value Type Description string key Identification key of the score Declaration public string key { get; } Property Value Type Description string type Target score type Declaration public ScoreType type { get; } Property Value Type Description ScoreType"
  },
  "api/RocketshiftStudio.Trophy.UIElements.html": {
    "href": "api/RocketshiftStudio.Trophy.UIElements.html",
    "title": "Namespace RocketshiftStudio.Trophy.UIElements | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy.UIElements Classes ScoreIcon In order to show score icon UIElements system ScoreLabel In order to show score in UIElements system"
  },
  "api/RocketshiftStudio.Trophy.html": {
    "href": "api/RocketshiftStudio.Trophy.html",
    "title": "Namespace RocketshiftStudio.Trophy | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace RocketshiftStudio.Trophy Classes FormatUtility Used for text formation purposes LeaderboardDefinition Score ScoreData ScoreDefinition ScoreDefinition is a collection of arguments which determines how a score will act ScoreMetadata Additional information about scores Trophy Handle all score based operations from this class TrophyIconDisplay In order to show score icon in game world or UGUI TrophyScoreDisplay In order to show score in game world or UGUI TrophySettings Structs LeaderboardData Define the data of leaderboard for leaderboard extensions to handle LeaderboardRequest Define the request data of leaderboard Interfaces IDefinition Enums BestCalculationType Defines how best value will be calculated FlowRestriction Defines the restriction of value direction LeaderboardValueSource Defines the source of value for leaderboard post request LimitFlags Define the limit of a score ScoreStatusFlags For status of the score ScoreType Types of score StorageFlags Defines how the score values will be saved or loaded Delegates Trophy.CountingChangedCallback Invoked per count toggle change. Trophy.StatusChangedCallback Invoked per status change. Trophy.ValueChangedCallback Invoked per value change."
  },
  "api/TinyGiantStudio.EditorHelpers.FieldSize.html": {
    "href": "api/TinyGiantStudio.EditorHelpers.FieldSize.html",
    "title": "Enum FieldSize | Trophy - Ultimate Score System Documentation",
    "summary": "Enum FieldSize Namespace: TinyGiantStudio.EditorHelpers Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public enum FieldSize Fields Name Description extraLarge gigantic large mega normal small tiny"
  },
  "api/TinyGiantStudio.EditorHelpers.MText_Editor_Methods.html": {
    "href": "api/TinyGiantStudio.EditorHelpers.MText_Editor_Methods.html",
    "title": "Class MText_Editor_Methods | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_Editor_Methods This helps draw common stuff shared by editor scripts in a uniform manner for IMGUI Inheritance object MText_Editor_Methods Namespace: TinyGiantStudio.EditorHelpers Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public static class MText_Editor_Methods Methods DisabledItalicHorizontalField(SerializedProperty, string, string, FieldSize) Declaration public static void DisabledItalicHorizontalField(SerializedProperty property, string label, string toolTip = \"\", FieldSize fieldSize = FieldSize.normal) Parameters Type Name Description SerializedProperty property string label string toolTip FieldSize fieldSize HorizontalField(SerializedProperty, string, string, FieldSize) Declaration public static void HorizontalField(SerializedProperty property, string label, string toolTip = \"\", FieldSize fieldSize = FieldSize.normal) Parameters Type Name Description SerializedProperty property string label string toolTip FieldSize fieldSize ItalicHorizontalField(SerializedProperty, string, string, FieldSize, bool) Declaration public static void ItalicHorizontalField(SerializedProperty property, string label, string toolTip = \"\", FieldSize fieldSize = FieldSize.normal, bool applySizeToPropertyField = false) Parameters Type Name Description SerializedProperty property string label string toolTip FieldSize fieldSize bool applySizeToPropertyField Reduces total width taken by the property PreviewField(SerializedProperty, Object, string, string) Declaration public static void PreviewField(SerializedProperty property, Object targetObject, string label, string toolTip = \"\") Parameters Type Name Description SerializedProperty property Object targetObject string label string toolTip RemoveRectTransform(GameObject) Declaration public static void RemoveRectTransform(this GameObject gameObject) Parameters Type Name Description GameObject gameObject"
  },
  "api/TinyGiantStudio.EditorHelpers.html": {
    "href": "api/TinyGiantStudio.EditorHelpers.html",
    "title": "Namespace TinyGiantStudio.EditorHelpers | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.EditorHelpers Classes MText_Editor_Methods This helps draw common stuff shared by editor scripts in a uniform manner for IMGUI Enums FieldSize"
  },
  "api/TinyGiantStudio.Layout.Alignment.html": {
    "href": "api/TinyGiantStudio.Layout.Alignment.html",
    "title": "Enum Alignment | Trophy - Ultimate Score System Documentation",
    "summary": "Enum Alignment Where the anchor of the text is placed. Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum Alignment Fields Name Description LowerCenter LowerLeft LowerRight MiddleCenter MiddleLeft MiddleRight UpperCenter UpperLeft UpperRight"
  },
  "api/TinyGiantStudio.Layout.AnimatedElementUpdater.html": {
    "href": "api/TinyGiantStudio.Layout.AnimatedElementUpdater.html",
    "title": "Class AnimatedElementUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class AnimatedElementUpdater Inheritance object Object ScriptableObject ModuleCore LayoutElementModule AnimatedElementUpdater Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Layouts/Element Updater/Animated\")] public class AnimatedElementUpdater : LayoutElementModule Methods UpdateLocalPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateLocalPosition(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Overrides LayoutElementModule.UpdateLocalPosition(Transform, VariableHolder[], Vector3) UpdateLocalRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateLocalRotation(Transform transform, VariableHolder[] variableHolders, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion localRotation Overrides LayoutElementModule.UpdateLocalRotation(Transform, VariableHolder[], Quaternion) UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateLocalTransform(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Quaternion localRotation Overrides LayoutElementModule.UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) UpdateWorldPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateWorldPosition(Transform transform, VariableHolder[] variableHolders, Vector3 position) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Overrides LayoutElementModule.UpdateWorldPosition(Transform, VariableHolder[], Vector3) UpdateWorldRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateWorldRotation(Transform transform, VariableHolder[] variableHolders, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion rotation Overrides LayoutElementModule.UpdateWorldRotation(Transform, VariableHolder[], Quaternion) UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateWorldTransform(Transform transform, VariableHolder[] variableHolders, Vector3 position, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Quaternion rotation Overrides LayoutElementModule.UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Layout.BaseLayoutElementUpdater.html": {
    "href": "api/TinyGiantStudio.Layout.BaseLayoutElementUpdater.html",
    "title": "Class BaseLayoutElementUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class BaseLayoutElementUpdater Inheritance object Object ScriptableObject ModuleCore LayoutElementModule BaseLayoutElementUpdater Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Layouts/Element Updater/Flat\")] public class BaseLayoutElementUpdater : LayoutElementModule Methods UpdateLocalPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateLocalPosition(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Overrides LayoutElementModule.UpdateLocalPosition(Transform, VariableHolder[], Vector3) UpdateLocalRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateLocalRotation(Transform transform, VariableHolder[] variableHolders, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion localRotation Overrides LayoutElementModule.UpdateLocalRotation(Transform, VariableHolder[], Quaternion) UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateLocalTransform(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Quaternion localRotation Overrides LayoutElementModule.UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) UpdateWorldPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateWorldPosition(Transform transform, VariableHolder[] variableHolders, Vector3 position) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Overrides LayoutElementModule.UpdateWorldPosition(Transform, VariableHolder[], Vector3) UpdateWorldRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateWorldRotation(Transform transform, VariableHolder[] variableHolders, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion rotation Overrides LayoutElementModule.UpdateWorldRotation(Transform, VariableHolder[], Quaternion) UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateWorldTransform(Transform transform, VariableHolder[] variableHolders, Vector3 position, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Quaternion rotation Overrides LayoutElementModule.UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Layout.CircularLayoutGroup.Direction.html": {
    "href": "api/TinyGiantStudio.Layout.CircularLayoutGroup.Direction.html",
    "title": "Enum CircularLayoutGroup.Direction | Trophy - Ultimate Score System Documentation",
    "summary": "Enum CircularLayoutGroup.Direction Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum CircularLayoutGroup.Direction Fields Name Description left right"
  },
  "api/TinyGiantStudio.Layout.CircularLayoutGroup.Style.html": {
    "href": "api/TinyGiantStudio.Layout.CircularLayoutGroup.Style.html",
    "title": "Enum CircularLayoutGroup.Style | Trophy - Ultimate Score System Documentation",
    "summary": "Enum CircularLayoutGroup.Style Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum CircularLayoutGroup.Style Fields Name Description style1 style2 style3 style4 style5"
  },
  "api/TinyGiantStudio.Layout.CircularLayoutGroup.html": {
    "href": "api/TinyGiantStudio.Layout.CircularLayoutGroup.html",
    "title": "Class CircularLayoutGroup | Trophy - Ultimate Score System Documentation",
    "summary": "Class CircularLayoutGroup Inheritance object Object Component Behaviour MonoBehaviour LayoutGroup CircularLayoutGroup Inherited Members LayoutGroup.autoItemSize LayoutGroup.alwaysUpdateInPlayMode LayoutGroup.alwaysUpdateBounds LayoutGroup.elementUpdater LayoutGroup.bounds LayoutGroup.showSceneViewGizmo LayoutGroup.Update() LayoutGroup.TotalActiveChildCount() LayoutGroup.GetBound(Transform) LayoutGroup.GetBound(MeshLayout) LayoutGroup.GetAllChildBounds() LayoutGroup.GetAllChildBounds(List<MeshLayout>) LayoutGroup.IgnoreChildBound(Bounds[], int) LayoutGroup.IgnoreChildBoundAndLineBreak(Bounds[], int) LayoutGroup.RemoveNaNErrorIfAny(Vector3) LayoutGroup.OnDrawGizmosSelected() Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [HelpURL(\"https://ferdowsur.gitbook.io/layout-system/layout-group/circular-layout-group\")] [AddComponentMenu(\"Tiny Giant Studio/Layout/Circular Layout Group (M3D)\", 30003)] public class CircularLayoutGroup : LayoutGroup Fields angle Declaration public Vector3 angle Field Value Type Description Vector3 direction Declaration public CircularLayoutGroup.Direction direction Field Value Type Description CircularLayoutGroup.Direction radius Declaration public float radius Field Value Type Description float radiusDecreaseRate Declaration public float radiusDecreaseRate Field Value Type Description float spread Declaration public float spread Field Value Type Description float style Declaration public CircularLayoutGroup.Style style Field Value Type Description CircularLayoutGroup.Style useAngle Uses style if set to false Declaration public bool useAngle Field Value Type Description bool Methods GetPositions(List<MeshLayout>) Used to retrieve appropriate positions of meshes without needing to place them on scene for single mesh Declaration public override List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description List<MeshLayout> Overrides LayoutGroup.GetPositions(List<MeshLayout>) SetDirectionLeft() Declaration public void SetDirectionLeft() SetDirectionRight() Declaration public void SetDirectionRight() UpdateLayout(int) Declaration public override void UpdateLayout(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom Overrides LayoutGroup.UpdateLayout(int)"
  },
  "api/TinyGiantStudio.Layout.CircularLayoutGroupEditor.html": {
    "href": "api/TinyGiantStudio.Layout.CircularLayoutGroupEditor.html",
    "title": "Class CircularLayoutGroupEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class CircularLayoutGroupEditor Inheritance object Object ScriptableObject Editor CircularLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(CircularLayoutGroup))] public class CircularLayoutGroupEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Layout.DepthAlignment.html": {
    "href": "api/TinyGiantStudio.Layout.DepthAlignment.html",
    "title": "Enum DepthAlignment | Trophy - Ultimate Score System Documentation",
    "summary": "Enum DepthAlignment Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum DepthAlignment Fields Name Description back front middle"
  },
  "api/TinyGiantStudio.Layout.GridLayoutGroup.html": {
    "href": "api/TinyGiantStudio.Layout.GridLayoutGroup.html",
    "title": "Class GridLayoutGroup | Trophy - Ultimate Score System Documentation",
    "summary": "Class GridLayoutGroup Inheritance object Object Component Behaviour MonoBehaviour LayoutGroup GridLayoutGroup Inherited Members LayoutGroup.autoItemSize LayoutGroup.alwaysUpdateInPlayMode LayoutGroup.alwaysUpdateBounds LayoutGroup.elementUpdater LayoutGroup.bounds LayoutGroup.showSceneViewGizmo LayoutGroup.Update() LayoutGroup.TotalActiveChildCount() LayoutGroup.GetBound(Transform) LayoutGroup.GetBound(MeshLayout) LayoutGroup.GetAllChildBounds() LayoutGroup.GetAllChildBounds(List<MeshLayout>) LayoutGroup.IgnoreChildBound(Bounds[], int) LayoutGroup.IgnoreChildBoundAndLineBreak(Bounds[], int) LayoutGroup.RemoveNaNErrorIfAny(Vector3) LayoutGroup.OnDrawGizmosSelected() Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [HelpURL(\"https://ferdowsur.gitbook.io/layout-system/layout-group/grid-layout-group\")] [AddComponentMenu(\"Tiny Giant Studio/Layout/Grid Layout Group (M3D)\", 30001)] public class GridLayoutGroup : LayoutGroup Fields lines Declaration public List<Line> lines Field Value Type Description List<Line> totalVerticalSpaceTaken Only accurate when UpdateLayout is called for all child objects. Doesn't auto update for any other methods. Declaration public float totalVerticalSpaceTaken Field Value Type Description float Properties Anchor Declaration public Alignment Anchor { get; set; } Property Value Type Description Alignment Height Declaration public float Height { get; set; } Property Value Type Description float JusticeHorizontal Declaration public bool JusticeHorizontal { get; set; } Property Value Type Description bool JusticeHorizontalPercent Declaration public float JusticeHorizontalPercent { get; set; } Property Value Type Description float JusticeVertical Declaration public bool JusticeVertical { get; set; } Property Value Type Description bool JusticeVerticalPercent Declaration public float JusticeVerticalPercent { get; set; } Property Value Type Description float MyLineSpacingStyle Is not used for texts Declaration public LineSpacingStyle MyLineSpacingStyle { get; set; } Property Value Type Description LineSpacingStyle Spacing This will always return _spacing/100 Declaration public Vector2 Spacing { get; set; } Property Value Type Description Vector2 VerticalOverflow Declaration public Overflow VerticalOverflow { get; set; } Property Value Type Description Overflow Width If this is attached to a rect transform, this gets the recttransform width Declaration public float Width { get; set; } Property Value Type Description float Methods GetLayoutInformations(out float, out int, out float, out float) Declaration public void GetLayoutInformations(out float lineHeight, out int maxLine, out float y, out float z) Parameters Type Name Description float lineHeight int maxLine float y float z GetPositions(List<MeshLayout>) Used by Text only Declaration public override List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description List<MeshLayout> Overrides LayoutGroup.GetPositions(List<MeshLayout>) GetPositions(List<MeshLayout>, float, float) Used by Text only Declaration public List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts, float widthChangeRate, float heightChangeRate) Parameters Type Name Description List<MeshLayout> meshLayouts float widthChangeRate float heightChangeRate Returns Type Description List<MeshLayout> GetPositions(List<MeshLayout>, out float, out float) Used by Text only Declaration public List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts, out float totalVerticalSpaceTaken, out float totalHorizontalSpaceTaken) Parameters Type Name Description List<MeshLayout> meshLayouts float totalVerticalSpaceTaken float totalHorizontalSpaceTaken Returns Type Description List<MeshLayout> UpdateLayout(int) Declaration public override void UpdateLayout(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom Overrides LayoutGroup.UpdateLayout(int) UpdateLayout(int, bool) Declaration public void UpdateLayout(int startRepositioningFrom = 0, bool updateBounds = true) Parameters Type Name Description int startRepositioningFrom bool updateBounds"
  },
  "api/TinyGiantStudio.Layout.GridLayoutGroupEditor.html": {
    "href": "api/TinyGiantStudio.Layout.GridLayoutGroupEditor.html",
    "title": "Class GridLayoutGroupEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class GridLayoutGroupEditor Inheritance object Object ScriptableObject Editor GridLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(GridLayoutGroup))] public class GridLayoutGroupEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Layout.LayoutElement.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElement.html",
    "title": "Class LayoutElement | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElement Instead of directly assigning positions/rotations, using Layout Elements open up the possibility to use tweening library of your choice or your own methods to animate movements. Inheritance object Object Component Behaviour MonoBehaviour LayoutElement Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [HelpURL(\"https://ferdowsur.gitbook.io/layout-system/layout-element\")] public class LayoutElement : MonoBehaviour Fields autoCalculateSize Declaration [Tooltip(\"This is overwritten on texts\")] public bool autoCalculateSize Field Value Type Description bool depth Declaration [HideInInspector] public float depth Field Value Type Description float height Declaration public float height Field Value Type Description float ignoreElement Declaration [Tooltip(\"Ignores this element in layout group\")] public bool ignoreElement Field Value Type Description bool lineBreak Declaration [Tooltip(\"Used in Grid layout.\\nEnds current line and moves everything after it to next one.\")] public bool lineBreak Field Value Type Description bool space Declaration public bool space Field Value Type Description bool width Declaration public float width Field Value Type Description float xOffset Declaration public float xOffset Field Value Type Description float yOffset Declaration public float yOffset Field Value Type Description float zOffset Declaration public float zOffset Field Value Type Description float"
  },
  "api/TinyGiantStudio.Layout.LayoutElementAnimator.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementAnimator.html",
    "title": "Class LayoutElementAnimator | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementAnimator Inheritance object Object Component Behaviour MonoBehaviour LayoutElementAnimator Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] public class LayoutElementAnimator : MonoBehaviour Fields moveDuration Declaration public float moveDuration Field Value Type Description float positionAnimationCurve Declaration public AnimationCurve positionAnimationCurve Field Value Type Description AnimationCurve positionTimer Declaration public float positionTimer Field Value Type Description float rotateDuration Declaration public float rotateDuration Field Value Type Description float rotationAnimationCurve Declaration public AnimationCurve rotationAnimationCurve Field Value Type Description AnimationCurve rotationTimer Declaration public float rotationTimer Field Value Type Description float startingPosition Declaration public Vector3 startingPosition Field Value Type Description Vector3 startingRotation Declaration public Quaternion startingRotation Field Value Type Description Quaternion targetPosition Declaration public Vector3 targetPosition Field Value Type Description Vector3 targetRotation Declaration public Quaternion targetRotation Field Value Type Description Quaternion Methods NewTargetLocalPosition(VariableHolder[], Vector3) Declaration public void NewTargetLocalPosition(VariableHolder[] variableHolders, Vector3 newTargetPosition) Parameters Type Name Description VariableHolder[] variableHolders Vector3 newTargetPosition NewTargetLocalRotation(VariableHolder[], Quaternion) Declaration public void NewTargetLocalRotation(VariableHolder[] variableHolders, Quaternion target) Parameters Type Name Description VariableHolder[] variableHolders Quaternion target"
  },
  "api/TinyGiantStudio.Layout.LayoutElementEditor.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementEditor.html",
    "title": "Class LayoutElementEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementEditor Inheritance object Object ScriptableObject Editor LayoutElementEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(LayoutElement))] public class LayoutElementEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Layout.LayoutElementModule.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementModule.html",
    "title": "Class LayoutElementModule | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementModule Inheritance object Object ScriptableObject ModuleCore LayoutElementModule AnimatedElementUpdater BaseLayoutElementUpdater NavMeshElementUpdater PhysicsElementUpdater Inherited Members ModuleCore.variableHolders ModuleCore.VariableWarnings(VariableHolder[]) ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public abstract class LayoutElementModule : ModuleCore Methods UpdateLocalPosition(Transform, VariableHolder[], Vector3) Declaration public abstract void UpdateLocalPosition(Transform target, VariableHolder[] variableHolders, Vector3 localPosition) Parameters Type Name Description Transform target VariableHolder[] variableHolders Vector3 localPosition UpdateLocalRotation(Transform, VariableHolder[], Quaternion) Declaration public abstract void UpdateLocalRotation(Transform target, VariableHolder[] variableHolders, Quaternion localRotation) Parameters Type Name Description Transform target VariableHolder[] variableHolders Quaternion localRotation UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public abstract void UpdateLocalTransform(Transform target, VariableHolder[] variableHolders, Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Transform target VariableHolder[] variableHolders Vector3 localPosition Quaternion localRotation UpdateWorldPosition(Transform, VariableHolder[], Vector3) Declaration public abstract void UpdateWorldPosition(Transform target, VariableHolder[] variableHolders, Vector3 position) Parameters Type Name Description Transform target VariableHolder[] variableHolders Vector3 position UpdateWorldRotation(Transform, VariableHolder[], Quaternion) Declaration public abstract void UpdateWorldRotation(Transform target, VariableHolder[] variableHolders, Quaternion rotation) Parameters Type Name Description Transform target VariableHolder[] variableHolders Quaternion rotation UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public abstract void UpdateWorldTransform(Transform target, VariableHolder[] variableHolders, Vector3 position, Quaternion rotation) Parameters Type Name Description Transform target VariableHolder[] variableHolders Vector3 position Quaternion rotation"
  },
  "api/TinyGiantStudio.Layout.LayoutElementModuleContainer.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementModuleContainer.html",
    "title": "Class LayoutElementModuleContainer | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementModuleContainer Inheritance object LayoutElementModuleContainer Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class LayoutElementModuleContainer Fields module Declaration public LayoutElementModule module Field Value Type Description LayoutElementModule variableHolders Declaration public VariableHolder[] variableHolders Field Value Type Description VariableHolder[]"
  },
  "api/TinyGiantStudio.Layout.LayoutElementNavmeshController.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementNavmeshController.html",
    "title": "Class LayoutElementNavmeshController | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementNavmeshController Inheritance object Object Component Behaviour MonoBehaviour LayoutElementNavmeshController Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] public class LayoutElementNavmeshController : MonoBehaviour Fields gravitationalAcceleration Declaration public float gravitationalAcceleration Field Value Type Description float startingPosition Declaration public Vector3 startingPosition Field Value Type Description Vector3 targetPosition Declaration public Vector3 targetPosition Field Value Type Description Vector3 Methods NewTargetLocalPosition(VariableHolder[], Vector3) Declaration public void NewTargetLocalPosition(VariableHolder[] variableHolders, Vector3 target) Parameters Type Name Description VariableHolder[] variableHolders Vector3 target NewTargetLocalRotation(VariableHolder[], Quaternion) Declaration public void NewTargetLocalRotation(VariableHolder[] variableHolders, Quaternion target) Parameters Type Name Description VariableHolder[] variableHolders Quaternion target"
  },
  "api/TinyGiantStudio.Layout.LayoutElementPhysicsController.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutElementPhysicsController.html",
    "title": "Class LayoutElementPhysicsController | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutElementPhysicsController Inheritance object Object Component Behaviour MonoBehaviour LayoutElementPhysicsController Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] public class LayoutElementPhysicsController : MonoBehaviour Fields gravitationalAcceleration Declaration public float gravitationalAcceleration Field Value Type Description float startingPosition Declaration public Vector3 startingPosition Field Value Type Description Vector3 targetPosition Declaration public Vector3 targetPosition Field Value Type Description Vector3 Methods NewTargetLocalPosition(VariableHolder[], Vector3) Declaration public void NewTargetLocalPosition(VariableHolder[] variableHolders, Vector3 target) Parameters Type Name Description VariableHolder[] variableHolders Vector3 target NewTargetLocalRotation(VariableHolder[], Quaternion) Declaration public void NewTargetLocalRotation(VariableHolder[] variableHolders, Quaternion target) Parameters Type Name Description VariableHolder[] variableHolders Quaternion target"
  },
  "api/TinyGiantStudio.Layout.LayoutGroup.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutGroup.html",
    "title": "Class LayoutGroup | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutGroup Inheritance object Object Component Behaviour MonoBehaviour LayoutGroup CircularLayoutGroup GridLayoutGroup LinearLayoutGroup VolumeLayoutGroup Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [ExecuteAlways] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/layout-group\")] public abstract class LayoutGroup : MonoBehaviour Fields alwaysUpdateBounds Declaration [Tooltip(\"For performance, it's better to leave it to false and call GetAllChildBounds() when a bound(size of an element) changes\")] public bool alwaysUpdateBounds Field Value Type Description bool alwaysUpdateInPlayMode Declaration [Tooltip(\"For performance, it's better to leave it to false and call UpdateLayout() after making changes.\\nTurn this on if you are in a hurry or testing stuff.\")] public bool alwaysUpdateInPlayMode Field Value Type Description bool autoItemSize Declaration [Tooltip(\"This is an experimental feature. In text, this bool is ignored, turn it on from the text itself. \\nIf the child element has a Layout Element component attached, this value is derived by that layout element component.\")] public bool autoItemSize Field Value Type Description bool bounds Declaration [Tooltip(\"Auto updated with the layout. Visible for debugging purposes.\")] public Bounds[] bounds Field Value Type Description Bounds[] elementUpdater Declaration public LayoutElementModuleContainer elementUpdater Field Value Type Description LayoutElementModuleContainer showSceneViewGizmo Declaration public bool showSceneViewGizmo Field Value Type Description bool Methods GetAllChildBounds() Declaration public Bounds[] GetAllChildBounds() Returns Type Description Bounds[] GetAllChildBounds(List<MeshLayout>) Declaration public Bounds[] GetAllChildBounds(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description Bounds[] GetBound(MeshLayout) Declaration public Bounds GetBound(MeshLayout meshLayout) Parameters Type Name Description MeshLayout meshLayout Returns Type Description Bounds GetBound(Transform) Declaration public Bounds GetBound(Transform target) Parameters Type Name Description Transform target Returns Type Description Bounds GetPositions(List<MeshLayout>) Used to retrieve appropriate positions of meshes without needing to place them on scene for single mesh Declaration public abstract List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description List<MeshLayout> IgnoreChildBound(Bounds[], int) Declaration public bool IgnoreChildBound(Bounds[] bounds, int i) Parameters Type Name Description Bounds[] bounds int i Returns Type Description bool IgnoreChildBoundAndLineBreak(Bounds[], int) Declaration public bool IgnoreChildBoundAndLineBreak(Bounds[] bounds, int i) Parameters Type Name Description Bounds[] bounds int i Returns Type Description bool OnDrawGizmosSelected() Draws each element bound. This is public so that this can be optionally called. Declaration public void OnDrawGizmosSelected() RemoveNaNErrorIfAny(Vector3) Declaration public Vector3 RemoveNaNErrorIfAny(Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Vector3 TotalActiveChildCount() Declaration public int TotalActiveChildCount() Returns Type Description int Update() Declaration [ExecuteInEditMode] protected virtual void Update() UpdateLayout(int) Declaration public abstract void UpdateLayout(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom"
  },
  "api/TinyGiantStudio.Layout.LayoutsMenuItem.html": {
    "href": "api/TinyGiantStudio.Layout.LayoutsMenuItem.html",
    "title": "Class LayoutsMenuItem | Trophy - Ultimate Score System Documentation",
    "summary": "Class LayoutsMenuItem Inheritance object Object Component Behaviour MonoBehaviour LayoutsMenuItem Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class LayoutsMenuItem : MonoBehaviour"
  },
  "api/TinyGiantStudio.Layout.Line.html": {
    "href": "api/TinyGiantStudio.Layout.Line.html",
    "title": "Class Line | Trophy - Ultimate Score System Documentation",
    "summary": "Class Line Inheritance object Line Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class Line Fields gameObjects Declaration public List<GameObject> gameObjects Field Value Type Description List<GameObject> meshLayouts Declaration public List<MeshLayout> meshLayouts Field Value Type Description List<MeshLayout>"
  },
  "api/TinyGiantStudio.Layout.LineSpacingStyle.html": {
    "href": "api/TinyGiantStudio.Layout.LineSpacingStyle.html",
    "title": "Enum LineSpacingStyle | Trophy - Ultimate Score System Documentation",
    "summary": "Enum LineSpacingStyle Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum LineSpacingStyle Fields Name Description average individual maximum"
  },
  "api/TinyGiantStudio.Layout.LinearLayoutGroup.Alignment.html": {
    "href": "api/TinyGiantStudio.Layout.LinearLayoutGroup.Alignment.html",
    "title": "Enum LinearLayoutGroup.Alignment | Trophy - Ultimate Score System Documentation",
    "summary": "Enum LinearLayoutGroup.Alignment Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum LinearLayoutGroup.Alignment Fields Name Description Bottom HorizontalMiddle Left Right Top VerticleMiddle"
  },
  "api/TinyGiantStudio.Layout.LinearLayoutGroup.html": {
    "href": "api/TinyGiantStudio.Layout.LinearLayoutGroup.html",
    "title": "Class LinearLayoutGroup | Trophy - Ultimate Score System Documentation",
    "summary": "Class LinearLayoutGroup Inheritance object Object Component Behaviour MonoBehaviour LayoutGroup LinearLayoutGroup Inherited Members LayoutGroup.autoItemSize LayoutGroup.alwaysUpdateInPlayMode LayoutGroup.alwaysUpdateBounds LayoutGroup.elementUpdater LayoutGroup.bounds LayoutGroup.showSceneViewGizmo LayoutGroup.TotalActiveChildCount() LayoutGroup.GetBound(Transform) LayoutGroup.GetBound(MeshLayout) LayoutGroup.GetAllChildBounds() LayoutGroup.GetAllChildBounds(List<MeshLayout>) LayoutGroup.IgnoreChildBound(Bounds[], int) LayoutGroup.IgnoreChildBoundAndLineBreak(Bounds[], int) LayoutGroup.RemoveNaNErrorIfAny(Vector3) LayoutGroup.OnDrawGizmosSelected() Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [HelpURL(\"https://ferdowsur.gitbook.io/layout-system/layout-group/linear-layout-group\")] [AddComponentMenu(\"Tiny Giant Studio/Layout/Linear Layout Group (M3D)\", 30003)] public class LinearLayoutGroup : LayoutGroup Fields addCharacterWidthWhenCaclulatingOverflow Declaration [Tooltip(\"If enabled, will try to cut off characters that are slightly over the border due to their width\")] public bool addCharacterWidthWhenCaclulatingOverflow Field Value Type Description bool alignment Declaration public LinearLayoutGroup.Alignment alignment Field Value Type Description LinearLayoutGroup.Alignment maximumRandomRotation Declaration public Vector3 maximumRandomRotation Field Value Type Description Vector3 overflow Declaration public Overflow overflow Field Value Type Description Overflow randomizeRotations Declaration public bool randomizeRotations Field Value Type Description bool rotationChanged Declaration public bool rotationChanged Field Value Type Description bool secondaryAlignment Declaration public LinearLayoutGroup.Alignment secondaryAlignment Field Value Type Description LinearLayoutGroup.Alignment spacing Declaration public float spacing Field Value Type Description float totalSpaceTaken Declaration public float totalSpaceTaken Field Value Type Description float width Declaration public float width Field Value Type Description float Properties MinimumRandomRotation Declaration public Vector3 MinimumRandomRotation { get; set; } Property Value Type Description Vector3 Methods GetPositions(List<MeshLayout>) Same as UpdateLayout but for combined meshes Declaration public override List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description List<MeshLayout> Overrides LayoutGroup.GetPositions(List<MeshLayout>) GetPositions(List<MeshLayout>, float) Same as UpdateLayout but for combined meshes Declaration public List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts, float modifiedSpacing) Parameters Type Name Description List<MeshLayout> meshLayouts float modifiedSpacing Returns Type Description List<MeshLayout> GetPositions(List<MeshLayout>, out float, bool) This is used by auto size of Text to check the width of text Same as UpdateLayout but for combined meshes Declaration public List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts, out float totalSpaceTaken, bool ignoreOverflowSetting = true) Parameters Type Name Description List<MeshLayout> meshLayouts float totalSpaceTaken bool ignoreOverflowSetting Returns Type Description List<MeshLayout> Update() Declaration protected override void Update() Overrides LayoutGroup.Update() UpdateLayout(bool) Declaration public void UpdateLayout(bool ignoreOverflowSettings) Parameters Type Name Description bool ignoreOverflowSettings UpdateLayout(int) Declaration public override void UpdateLayout(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom Overrides LayoutGroup.UpdateLayout(int) UpdateLayoutDoNotUpdateBounds(int) This is used by Auto Size feature of the 3D Text Declaration public void UpdateLayoutDoNotUpdateBounds(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom"
  },
  "api/TinyGiantStudio.Layout.LinearLayoutGroupEditor.html": {
    "href": "api/TinyGiantStudio.Layout.LinearLayoutGroupEditor.html",
    "title": "Class LinearLayoutGroupEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class LinearLayoutGroupEditor Inheritance object Object ScriptableObject Editor LinearLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(LinearLayoutGroup))] public class LinearLayoutGroupEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Layout.MeshBaseSize.html": {
    "href": "api/TinyGiantStudio.Layout.MeshBaseSize.html",
    "title": "Class MeshBaseSize | Trophy - Ultimate Score System Documentation",
    "summary": "Class MeshBaseSize Inheritance object Object Component Behaviour MonoBehaviour MeshBaseSize Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public class MeshBaseSize : MonoBehaviour Methods CheckMeshScaledSize(Transform) Declaration public static Bounds CheckMeshScaledSize(Transform target) Parameters Type Name Description Transform target Returns Type Description Bounds CheckMeshSize(Mesh) Declaration public static Bounds CheckMeshSize(Mesh mesh) Parameters Type Name Description Mesh mesh Returns Type Description Bounds CheckMeshSize(Transform) Declaration public static Bounds CheckMeshSize(Transform target) Parameters Type Name Description Transform target Returns Type Description Bounds"
  },
  "api/TinyGiantStudio.Layout.MeshLayout.html": {
    "href": "api/TinyGiantStudio.Layout.MeshLayout.html",
    "title": "Class MeshLayout | Trophy - Ultimate Score System Documentation",
    "summary": "Class MeshLayout This is used by Modular3DText to create combined meshes without instantiating objects. This holds the desired position of the element like layout element Inheritance object MeshLayout Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class MeshLayout Constructors MeshLayout() Declaration public MeshLayout() MeshLayout(Mesh) Declaration public MeshLayout(Mesh newMesh) Parameters Type Name Description Mesh newMesh Fields depth Declaration public float depth Field Value Type Description float height Declaration public float height Field Value Type Description float lineBreak Declaration public bool lineBreak Field Value Type Description bool mesh Declaration public Mesh mesh Field Value Type Description Mesh position Declaration public Vector3 position Field Value Type Description Vector3 rotation Declaration public Quaternion rotation Field Value Type Description Quaternion space Declaration public bool space Field Value Type Description bool width Declaration public float width Field Value Type Description float xOffset Declaration public float xOffset Field Value Type Description float yOffset Declaration public float yOffset Field Value Type Description float zOffset Declaration public float zOffset Field Value Type Description float"
  },
  "api/TinyGiantStudio.Layout.NavMeshElementUpdater.html": {
    "href": "api/TinyGiantStudio.Layout.NavMeshElementUpdater.html",
    "title": "Class NavMeshElementUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class NavMeshElementUpdater Inheritance object Object ScriptableObject ModuleCore LayoutElementModule NavMeshElementUpdater Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Layouts/Element Updater/Navmesh\")] public class NavMeshElementUpdater : LayoutElementModule Methods UpdateLocalPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateLocalPosition(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Overrides LayoutElementModule.UpdateLocalPosition(Transform, VariableHolder[], Vector3) UpdateLocalRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateLocalRotation(Transform transform, VariableHolder[] variableHolders, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion localRotation Overrides LayoutElementModule.UpdateLocalRotation(Transform, VariableHolder[], Quaternion) UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateLocalTransform(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Quaternion localRotation Overrides LayoutElementModule.UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) UpdateWorldPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateWorldPosition(Transform transform, VariableHolder[] variableHolders, Vector3 position) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Overrides LayoutElementModule.UpdateWorldPosition(Transform, VariableHolder[], Vector3) UpdateWorldRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateWorldRotation(Transform transform, VariableHolder[] variableHolders, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion rotation Overrides LayoutElementModule.UpdateWorldRotation(Transform, VariableHolder[], Quaternion) UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateWorldTransform(Transform transform, VariableHolder[] variableHolders, Vector3 position, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Quaternion rotation Overrides LayoutElementModule.UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Layout.Overflow.html": {
    "href": "api/TinyGiantStudio.Layout.Overflow.html",
    "title": "Enum Overflow | Trophy - Ultimate Score System Documentation",
    "summary": "Enum Overflow Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax public enum Overflow Fields Name Description overflow wrap"
  },
  "api/TinyGiantStudio.Layout.PhysicsElementUpdater.html": {
    "href": "api/TinyGiantStudio.Layout.PhysicsElementUpdater.html",
    "title": "Class PhysicsElementUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class PhysicsElementUpdater Inheritance object Object ScriptableObject ModuleCore LayoutElementModule PhysicsElementUpdater Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Layouts/Element Updater/Physics\")] public class PhysicsElementUpdater : LayoutElementModule Methods UpdateLocalPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateLocalPosition(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Overrides LayoutElementModule.UpdateLocalPosition(Transform, VariableHolder[], Vector3) UpdateLocalRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateLocalRotation(Transform transform, VariableHolder[] variableHolders, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion localRotation Overrides LayoutElementModule.UpdateLocalRotation(Transform, VariableHolder[], Quaternion) UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateLocalTransform(Transform transform, VariableHolder[] variableHolders, Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 localPosition Quaternion localRotation Overrides LayoutElementModule.UpdateLocalTransform(Transform, VariableHolder[], Vector3, Quaternion) UpdateWorldPosition(Transform, VariableHolder[], Vector3) Declaration public override void UpdateWorldPosition(Transform transform, VariableHolder[] variableHolders, Vector3 position) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Overrides LayoutElementModule.UpdateWorldPosition(Transform, VariableHolder[], Vector3) UpdateWorldRotation(Transform, VariableHolder[], Quaternion) Declaration public override void UpdateWorldRotation(Transform transform, VariableHolder[] variableHolders, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Quaternion rotation Overrides LayoutElementModule.UpdateWorldRotation(Transform, VariableHolder[], Quaternion) UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) Declaration public override void UpdateWorldTransform(Transform transform, VariableHolder[] variableHolders, Vector3 position, Quaternion rotation) Parameters Type Name Description Transform transform VariableHolder[] variableHolders Vector3 position Quaternion rotation Overrides LayoutElementModule.UpdateWorldTransform(Transform, VariableHolder[], Vector3, Quaternion) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Layout.VolumeLayoutGroup.html": {
    "href": "api/TinyGiantStudio.Layout.VolumeLayoutGroup.html",
    "title": "Class VolumeLayoutGroup | Trophy - Ultimate Score System Documentation",
    "summary": "Class VolumeLayoutGroup Inheritance object Object Component Behaviour MonoBehaviour LayoutGroup VolumeLayoutGroup Inherited Members LayoutGroup.autoItemSize LayoutGroup.alwaysUpdateInPlayMode LayoutGroup.alwaysUpdateBounds LayoutGroup.elementUpdater LayoutGroup.bounds LayoutGroup.showSceneViewGizmo LayoutGroup.Update() LayoutGroup.TotalActiveChildCount() LayoutGroup.GetBound(Transform) LayoutGroup.GetBound(MeshLayout) LayoutGroup.GetAllChildBounds() LayoutGroup.GetAllChildBounds(List<MeshLayout>) LayoutGroup.IgnoreChildBound(Bounds[], int) LayoutGroup.IgnoreChildBoundAndLineBreak(Bounds[], int) LayoutGroup.RemoveNaNErrorIfAny(Vector3) LayoutGroup.OnDrawGizmosSelected() Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-firstpass.dll Syntax [AddComponentMenu(\"Tiny Giant Studio/Layout/Volume Layout Group (M3D)\", 30001)] public class VolumeLayoutGroup : LayoutGroup Fields lines Declaration public List<Line> lines Field Value Type Description List<Line> Properties Anchor Declaration public Alignment Anchor { get; set; } Property Value Type Description Alignment Depth Declaration public float Depth { get; set; } Property Value Type Description float DepthAlignment Declaration public DepthAlignment DepthAlignment { get; set; } Property Value Type Description DepthAlignment Height Declaration public float Height { get; set; } Property Value Type Description float JusticeHorizontal Declaration public bool JusticeHorizontal { get; set; } Property Value Type Description bool JusticeHorizontalPercent Declaration public float JusticeHorizontalPercent { get; set; } Property Value Type Description float JusticeVertical Declaration public bool JusticeVertical { get; set; } Property Value Type Description bool JusticeVerticalPercent Declaration public float JusticeVerticalPercent { get; set; } Property Value Type Description float MyLineSpacingStyle Is not used for texts Declaration public LineSpacingStyle MyLineSpacingStyle { get; set; } Property Value Type Description LineSpacingStyle Spacing This will always return _spacing/100 Declaration public Vector3 Spacing { get; set; } Property Value Type Description Vector3 Width Declaration public float Width { get; set; } Property Value Type Description float Methods GetPositions(List<MeshLayout>) Used by Text only Declaration public override List<MeshLayout> GetPositions(List<MeshLayout> meshLayouts) Parameters Type Name Description List<MeshLayout> meshLayouts Returns Type Description List<MeshLayout> Overrides LayoutGroup.GetPositions(List<MeshLayout>) UpdateLayout(int) Declaration public override void UpdateLayout(int startRepositioningFrom = 0) Parameters Type Name Description int startRepositioningFrom Overrides LayoutGroup.UpdateLayout(int)"
  },
  "api/TinyGiantStudio.Layout.VolumeLayoutGroupEditor.html": {
    "href": "api/TinyGiantStudio.Layout.VolumeLayoutGroupEditor.html",
    "title": "Class VolumeLayoutGroupEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class VolumeLayoutGroupEditor Inheritance object Object ScriptableObject Editor VolumeLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Layout Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(VolumeLayoutGroup))] public class VolumeLayoutGroupEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Layout.html": {
    "href": "api/TinyGiantStudio.Layout.html",
    "title": "Namespace TinyGiantStudio.Layout | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Layout Classes AnimatedElementUpdater BaseLayoutElementUpdater CircularLayoutGroup CircularLayoutGroupEditor GridLayoutGroup GridLayoutGroupEditor LayoutElement Instead of directly assigning positions/rotations, using Layout Elements open up the possibility to use tweening library of your choice or your own methods to animate movements. LayoutElementAnimator LayoutElementEditor LayoutElementModule LayoutElementModuleContainer LayoutElementNavmeshController LayoutElementPhysicsController LayoutGroup LayoutsMenuItem Line LinearLayoutGroup LinearLayoutGroupEditor MeshBaseSize MeshLayout This is used by Modular3DText to create combined meshes without instantiating objects. This holds the desired position of the element like layout element NavMeshElementUpdater PhysicsElementUpdater VolumeLayoutGroup VolumeLayoutGroupEditor Enums Alignment Where the anchor of the text is placed. CircularLayoutGroup.Direction CircularLayoutGroup.Style DepthAlignment LineSpacingStyle LinearLayoutGroup.Alignment Overflow"
  },
  "api/TinyGiantStudio.Modules.AddPhysics.html": {
    "href": "api/TinyGiantStudio.Modules.AddPhysics.html",
    "title": "Class AddPhysics | Trophy - Ultimate Score System Documentation",
    "summary": "Class AddPhysics Variable Holders: 0 - Delay - Float 1 - Enable gravity - bool 2 - Don't add force - bool 3 - Horizontal Foce - Float 4 - Vertical Foce - Float 5 - Force Direction Min - Vector3 6 - Force Direction Max - Vector3 7 - Physic Material - Physic Material Inheritance object Object ScriptableObject ModuleCore Module AddPhysics Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Text/Modules/Add Physics\")] public class AddPhysics : Module Methods ModuleRoutine(GameObject, VariableHolder[]) Declaration public override IEnumerator ModuleRoutine(GameObject obj, VariableHolder[] variableHolders) Parameters Type Name Description GameObject obj VariableHolder[] variableHolders Returns Type Description IEnumerator Overrides Module.ModuleRoutine(GameObject, VariableHolder[]) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Modules.Module.html": {
    "href": "api/TinyGiantStudio.Modules.Module.html",
    "title": "Class Module | Trophy - Ultimate Score System Documentation",
    "summary": "Class Module Inheritance object Object ScriptableObject ModuleCore Module AddPhysics PlayParticles RemovePhysics ScaleChange Inherited Members ModuleCore.variableHolders ModuleCore.VariableWarnings(VariableHolder[]) ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [HelpURL(\"https://app.gitbook.com/@ferdowsur/s/modular-3d-text/scripts/modules\")] public abstract class Module : ModuleCore Methods ModuleRoutine(GameObject, VariableHolder[]) Declaration public abstract IEnumerator ModuleRoutine(GameObject obj, VariableHolder[] variableHolders) Parameters Type Name Description GameObject obj VariableHolder[] variableHolders Returns Type Description IEnumerator"
  },
  "api/TinyGiantStudio.Modules.ModuleApplier.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleApplier.html",
    "title": "Class ModuleApplier | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleApplier Inheritance object Object Component Behaviour MonoBehaviour ModuleApplier Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax public class ModuleApplier : MonoBehaviour Fields applyModules Declaration public bool applyModules Field Value Type Description bool moduleTarget Declaration public GameObject moduleTarget Field Value Type Description GameObject modules Declaration [Tooltip(\"Target needs to be enabled to apply module\")] public List<ModuleContainer> modules Field Value Type Description List<ModuleContainer> Methods ApplyAllModule() Declaration [ContextMenu(\"Apply all modules\")] public void ApplyAllModule() ApplyModule(int) Declaration public void ApplyModule(int i) Parameters Type Name Description int i"
  },
  "api/TinyGiantStudio.Modules.ModuleApplierEditor.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleApplierEditor.html",
    "title": "Class ModuleApplierEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleApplierEditor Inheritance object Object ScriptableObject Editor ModuleApplierEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(ModuleApplier))] public class ModuleApplierEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Modules.ModuleContainer.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleContainer.html",
    "title": "Class ModuleContainer | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleContainer Inheritance object ModuleContainer Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class ModuleContainer Fields module If you are updating/changing modules runtime, remember to call UpdateVariableHolders() to update the variable holders length. Otherwise, it won't work. Declaration public Module module Field Value Type Description Module variableHolders Declaration public VariableHolder[] variableHolders Field Value Type Description VariableHolder[] Methods UpdateVariableHolders() Declaration public void UpdateVariableHolders()"
  },
  "api/TinyGiantStudio.Modules.ModuleCore.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleCore.html",
    "title": "Class ModuleCore | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleCore Inheritance object Object ScriptableObject ModuleCore LayoutElementModule Module Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [HelpURL(\"https://app.gitbook.com/@ferdowsur/s/modular-3d-text/scripts/modules\")] public abstract class ModuleCore : ScriptableObject Fields variableHolders Declaration [HideInInspector] public VariableHolder[] variableHolders Field Value Type Description VariableHolder[] Methods AddWarning(string, string) Declaration public string AddWarning(string toAdd, string original) Parameters Type Name Description string toAdd string original Returns Type Description string VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public abstract string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string"
  },
  "api/TinyGiantStudio.Modules.ModuleDrawer.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleDrawer.html",
    "title": "Class ModuleDrawer | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleDrawer Inheritance object ModuleDrawer Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public static class ModuleDrawer Methods BaseModuleContainerList(string, string, List<ModuleContainer>, SerializedProperty, SerializedObject, SerializedProperty) Declaration public static void BaseModuleContainerList(string label, string tooltip, List<ModuleContainer> moduleContainers, SerializedProperty serializedProperty, SerializedObject soTarget, SerializedProperty boolProperty = null) Parameters Type Name Description string label string tooltip List<ModuleContainer> moduleContainers SerializedProperty serializedProperty SerializedObject soTarget SerializedProperty boolProperty ElementUpdaterContainerList(string, string, LayoutElementModuleContainer, SerializedProperty, SerializedObject) Declaration public static void ElementUpdaterContainerList(string label, string tooltip, LayoutElementModuleContainer elementUpdaterContainer, SerializedProperty serializedProperty, SerializedObject soTarget) Parameters Type Name Description string label string tooltip LayoutElementModuleContainer elementUpdaterContainer SerializedProperty serializedProperty SerializedObject soTarget ElementUpdatersExist() Declaration public static bool ElementUpdatersExist() Returns Type Description bool EmptyEffect(List<ModuleContainer>, SerializedProperty) Declaration public static void EmptyEffect(List<ModuleContainer> moduleList, SerializedProperty serializedProperty) Parameters Type Name Description List<ModuleContainer> moduleList SerializedProperty serializedProperty GetPropertyName(ModuleVariableType) Declaration public static string GetPropertyName(ModuleVariableType type) Parameters Type Name Description ModuleVariableType type Returns Type Description string UpdateStyles() Declaration public static void UpdateStyles()"
  },
  "api/TinyGiantStudio.Modules.ModuleEditor.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleEditor.html",
    "title": "Class ModuleEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModuleEditor Inheritance object Object ScriptableObject Editor ModuleEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(ModuleCore), true)] public class ModuleEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Modules.ModuleVariableType.html": {
    "href": "api/TinyGiantStudio.Modules.ModuleVariableType.html",
    "title": "Enum ModuleVariableType | Trophy - Ultimate Score System Documentation",
    "summary": "Enum ModuleVariableType Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public enum ModuleVariableType Fields Name Description animationCurve bool float gameObject int physicMaterial string vector2 vector3"
  },
  "api/TinyGiantStudio.Modules.PlayParticles.html": {
    "href": "api/TinyGiantStudio.Modules.PlayParticles.html",
    "title": "Class PlayParticles | Trophy - Ultimate Score System Documentation",
    "summary": "Class PlayParticles Variable holders: Index 0: Delay - Float Index 1: Particle Prefab - GameObject Index 2: Dont Auto Destroy Particle - Bool Index 3: Destroy Particle After - Float Inheritance object Object ScriptableObject ModuleCore Module PlayParticles Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Text/Modules/Play Particle\")] public class PlayParticles : Module Methods ModuleRoutine(GameObject, VariableHolder[]) Declaration public override IEnumerator ModuleRoutine(GameObject obj, VariableHolder[] variableHolders) Parameters Type Name Description GameObject obj VariableHolder[] variableHolders Returns Type Description IEnumerator Overrides Module.ModuleRoutine(GameObject, VariableHolder[]) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Modules.RemovePhysics.html": {
    "href": "api/TinyGiantStudio.Modules.RemovePhysics.html",
    "title": "Class RemovePhysics | Trophy - Ultimate Score System Documentation",
    "summary": "Class RemovePhysics Variable Holders: 0 - Delay - Float Inheritance object Object ScriptableObject ModuleCore Module RemovePhysics Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Text/Modules/Remove Physics\")] public class RemovePhysics : Module Methods ModuleRoutine(GameObject, VariableHolder[]) Declaration public override IEnumerator ModuleRoutine(GameObject obj, VariableHolder[] variableHolders) Parameters Type Name Description GameObject obj VariableHolder[] variableHolders Returns Type Description IEnumerator Overrides Module.ModuleRoutine(GameObject, VariableHolder[]) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Modules.ScaleChange.html": {
    "href": "api/TinyGiantStudio.Modules.ScaleChange.html",
    "title": "Class ScaleChange | Trophy - Ultimate Score System Documentation",
    "summary": "Class ScaleChange Variable holders: Index 0: Delay | float Index 1: Duration | float Index 2: Grow from default scale | bool Index 3: Grow from | vector3 Index 4: Grow to original | bool Index 5: Grow to | vector3 Index 6: Scale curve | Animation curve Inheritance object Object ScriptableObject ModuleCore Module ScaleChange Inherited Members ModuleCore.variableHolders ModuleCore.AddWarning(string, string) Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [CreateAssetMenu(menuName = \"Tiny Giant Studio/Modular 3D Text/Modules/Change Scale\")] public class ScaleChange : Module Methods ModuleRoutine(GameObject, VariableHolder[]) Declaration public override IEnumerator ModuleRoutine(GameObject obj, VariableHolder[] variableHolders) Parameters Type Name Description GameObject obj VariableHolder[] variableHolders Returns Type Description IEnumerator Overrides Module.ModuleRoutine(GameObject, VariableHolder[]) VariableWarnings(VariableHolder[]) The return of this string is shown as warning. Used to show warnings incase of faulty settings Declaration public override string VariableWarnings(VariableHolder[] variableHolders) Parameters Type Name Description VariableHolder[] variableHolders Returns Type Description string Overrides ModuleCore.VariableWarnings(VariableHolder[])"
  },
  "api/TinyGiantStudio.Modules.VariableHolder.html": {
    "href": "api/TinyGiantStudio.Modules.VariableHolder.html",
    "title": "Class VariableHolder | Trophy - Ultimate Score System Documentation",
    "summary": "Class VariableHolder Inheritance object VariableHolder Namespace: TinyGiantStudio.Modules Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class VariableHolder Fields animationCurve Declaration public AnimationCurve animationCurve Field Value Type Description AnimationCurve boolValue Declaration public bool boolValue Field Value Type Description bool floatValue Declaration public float floatValue Field Value Type Description float gameObjectValue Declaration public GameObject gameObjectValue Field Value Type Description GameObject hideIf Declaration public string hideIf Field Value Type Description string intValue Declaration public int intValue Field Value Type Description int physicMaterialValue Declaration public PhysicMaterial physicMaterialValue Field Value Type Description PhysicMaterial stringValue Declaration public string stringValue Field Value Type Description string tooltip Declaration public string tooltip Field Value Type Description string type Declaration public ModuleVariableType type Field Value Type Description ModuleVariableType variableName Declaration public string variableName Field Value Type Description string vector2Value Declaration public Vector2 vector2Value Field Value Type Description Vector2 vector3Value Declaration public Vector3 vector3Value Field Value Type Description Vector3"
  },
  "api/TinyGiantStudio.Modules.html": {
    "href": "api/TinyGiantStudio.Modules.html",
    "title": "Namespace TinyGiantStudio.Modules | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Modules Classes AddPhysics Variable Holders: 0 - Delay - Float 1 - Enable gravity - bool 2 - Don't add force - bool 3 - Horizontal Foce - Float 4 - Vertical Foce - Float 5 - Force Direction Min - Vector3 6 - Force Direction Max - Vector3 7 - Physic Material - Physic Material Module ModuleApplier ModuleApplierEditor ModuleContainer ModuleCore ModuleDrawer ModuleEditor PlayParticles Variable holders: Index 0: Delay - Float Index 1: Particle Prefab - GameObject Index 2: Dont Auto Destroy Particle - Bool Index 3: Destroy Particle After - Float RemovePhysics Variable Holders: 0 - Delay - Float ScaleChange Variable holders: Index 0: Delay | float Index 1: Duration | float Index 2: Grow from default scale | bool Index 3: Grow from | vector3 Index 4: Grow to original | bool Index 5: Grow to | vector3 Index 6: Scale curve | Animation curve VariableHolder Enums ModuleVariableType"
  },
  "api/TinyGiantStudio.PackageImporter.TGS_AssetDatabaseHandler.html": {
    "href": "api/TinyGiantStudio.PackageImporter.TGS_AssetDatabaseHandler.html",
    "title": "Class TGS_AssetDatabaseHandler | Trophy - Ultimate Score System Documentation",
    "summary": "Class TGS_AssetDatabaseHandler https://docs.unity3d.com/ScriptReference/AssetDatabase-importPackageCompleted.html Used to process all callbacks related to importing packages Inheritance object TGS_AssetDatabaseHandler Namespace: TinyGiantStudio.PackageImporter Assembly: TGS_PackageImporter.dll Syntax [InitializeOnLoad] public class TGS_AssetDatabaseHandler"
  },
  "api/TinyGiantStudio.PackageImporter.TGS_AssetEditor.html": {
    "href": "api/TinyGiantStudio.PackageImporter.TGS_AssetEditor.html",
    "title": "Class TGS_AssetEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class TGS_AssetEditor Inheritance object Object ScriptableObject Editor TGS_AssetEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.PackageImporter Assembly: TGS_PackageImporter.dll Syntax [CustomEditor(typeof(TGS_Asset))] public class TGS_AssetEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.PackageImporter.html": {
    "href": "api/TinyGiantStudio.PackageImporter.html",
    "title": "Namespace TinyGiantStudio.PackageImporter | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.PackageImporter Classes TGS_AssetDatabaseHandler https://docs.unity3d.com/ScriptReference/AssetDatabase-importPackageCompleted.html Used to process all callbacks related to importing packages TGS_AssetEditor"
  },
  "api/TinyGiantStudio.Text.AssetSettings.CharInputStyle.html": {
    "href": "api/TinyGiantStudio.Text.AssetSettings.CharInputStyle.html",
    "title": "Enum AssetSettings.CharInputStyle | Trophy - Ultimate Score System Documentation",
    "summary": "Enum AssetSettings.CharInputStyle Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum AssetSettings.CharInputStyle Fields Name Description CharacterRange CustomCharacters UnicodeRange UnicodeSequence"
  },
  "api/TinyGiantStudio.Text.AssetSettings.MeshExportStyle.html": {
    "href": "api/TinyGiantStudio.Text.AssetSettings.MeshExportStyle.html",
    "title": "Enum AssetSettings.MeshExportStyle | Trophy - Ultimate Score System Documentation",
    "summary": "Enum AssetSettings.MeshExportStyle Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum AssetSettings.MeshExportStyle Fields Name Description exportAsMeshAsset exportAsObj"
  },
  "api/TinyGiantStudio.Text.AssetSettings.html": {
    "href": "api/TinyGiantStudio.Text.AssetSettings.html",
    "title": "Class AssetSettings | Trophy - Ultimate Score System Documentation",
    "summary": "Class AssetSettings This is used by the asset to store default settings shared by different scripts Default File location: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Utility/M3D Editor Settings.asset Inheritance object Object ScriptableObject AssetSettings Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class AssetSettings : ScriptableObject Fields autoCreateSceneInputSystem Declaration public bool autoCreateSceneInputSystem Field Value Type Description bool charInputStyle Declaration public AssetSettings.CharInputStyle charInputStyle Field Value Type Description AssetSettings.CharInputStyle customCharacters Declaration [HideInInspector] [TextArea(10, 99)] public string customCharacters Field Value Type Description string defaultButtonDisabledBackgroundMaterial Declaration public Material defaultButtonDisabledBackgroundMaterial Field Value Type Description Material defaultButtonDisabledTextMaterial Declaration public Material defaultButtonDisabledTextMaterial Field Value Type Description Material defaultButtonDisabledTextSize Declaration public Vector3 defaultButtonDisabledTextSize Field Value Type Description Vector3 defaultButtonNormalBackgroundMaterial Declaration public Material defaultButtonNormalBackgroundMaterial Field Value Type Description Material defaultButtonNormalTextMaterial Declaration public Material defaultButtonNormalTextMaterial Field Value Type Description Material defaultButtonNormalTextSize Declaration public Vector3 defaultButtonNormalTextSize Field Value Type Description Vector3 defaultButtonPressedBackgroundMaterial Declaration public Material defaultButtonPressedBackgroundMaterial Field Value Type Description Material defaultButtonPressedTextMaterial Declaration public Material defaultButtonPressedTextMaterial Field Value Type Description Material defaultButtonPressedTextSize Declaration public Vector3 defaultButtonPressedTextSize Field Value Type Description Vector3 defaultButtonSelectedBackgroundMaterial Declaration public Material defaultButtonSelectedBackgroundMaterial Field Value Type Description Material defaultButtonSelectedTextMaterial Declaration public Material defaultButtonSelectedTextMaterial Field Value Type Description Material defaultButtonSelectedTextSize Declaration public Vector3 defaultButtonSelectedTextSize Field Value Type Description Vector3 defaultFont Declaration public Font defaultFont Field Value Type Description Font defaultListDisabledBackgroundMaterial Declaration public Material defaultListDisabledBackgroundMaterial Field Value Type Description Material defaultListDisabledTextMaterial Declaration public Material defaultListDisabledTextMaterial Field Value Type Description Material defaultListDisabledTextSize Declaration public Vector3 defaultListDisabledTextSize Field Value Type Description Vector3 defaultListNormalBackgroundMaterial Declaration public Material defaultListNormalBackgroundMaterial Field Value Type Description Material defaultListNormalTextMaterial Declaration public Material defaultListNormalTextMaterial Field Value Type Description Material defaultListNormalTextSize Declaration public Vector3 defaultListNormalTextSize Field Value Type Description Vector3 defaultListPressedBackgroundMaterial Declaration public Material defaultListPressedBackgroundMaterial Field Value Type Description Material defaultListPressedTextMaterial Declaration public Material defaultListPressedTextMaterial Field Value Type Description Material defaultListPressedTextSize Declaration public Vector3 defaultListPressedTextSize Field Value Type Description Vector3 defaultListSelectedBackgroundMaterial Declaration public Material defaultListSelectedBackgroundMaterial Field Value Type Description Material defaultListSelectedTextMaterial Declaration public Material defaultListSelectedTextMaterial Field Value Type Description Material defaultListSelectedTextSize Declaration public Vector3 defaultListSelectedTextSize Field Value Type Description Vector3 defaultTextMaterial Declaration public Material defaultTextMaterial Field Value Type Description Material defaultTextSize Declaration public Vector3 defaultTextSize Field Value Type Description Vector3 dontAutoCreateRaycasterOrButtonIfVRtoolkitExists Declaration public bool dontAutoCreateRaycasterOrButtonIfVRtoolkitExists Field Value Type Description bool endChar Declaration public char endChar Field Value Type Description char endUnicode Declaration [HideInInspector] public string endUnicode Field Value Type Description string extraLargeHorizontalFieldSize Declaration public float extraLargeHorizontalFieldSize Field Value Type Description float gridItemColor Declaration [Space] public Color gridItemColor Field Value Type Description Color importantLabelColor_darkSkin Declaration public Color importantLabelColor_darkSkin Field Value Type Description Color importantLabelColor_lightSkin Declaration public Color importantLabelColor_lightSkin Field Value Type Description Color largeHorizontalFieldSize Declaration public float largeHorizontalFieldSize Field Value Type Description float meshExportStyle Declaration [HideInInspector] public AssetSettings.MeshExportStyle meshExportStyle Field Value Type Description AssetSettings.MeshExportStyle normalHorizontalFieldSize Declaration public float normalHorizontalFieldSize Field Value Type Description float openedFoldoutTitleColor_darkSkin Declaration public Color openedFoldoutTitleColor_darkSkin Field Value Type Description Color openedFoldoutTitleColor_lightSkin Declaration public Color openedFoldoutTitleColor_lightSkin Field Value Type Description Color previewAmount Declaration [HideInInspector] public int previewAmount Field Value Type Description int selectedTab Declaration [HideInInspector] public string selectedTab Field Value Type Description string sizeXY Declaration [HideInInspector] public float sizeXY Field Value Type Description float sizeZ Declaration [HideInInspector] public float sizeZ Field Value Type Description float smallHorizontalFieldSize Declaration [Header(\"Inspector field size\")] public float smallHorizontalFieldSize Field Value Type Description float smoothingAngle Declaration [HideInInspector] public int smoothingAngle Field Value Type Description int startChar Declaration public char startChar Field Value Type Description char startUnicode Declaration public string startUnicode Field Value Type Description string tabSelectedColor Declaration public Color tabSelectedColor Field Value Type Description Color tabUnselectedColor Declaration public Color tabUnselectedColor Field Value Type Description Color unicodeSequence Declaration [HideInInspector] [TextArea(10, 99)] public string unicodeSequence Field Value Type Description string vertexDensity Declaration [HideInInspector] public int vertexDensity Field Value Type Description int Methods ResetFontCreationMeshSettings() Declaration public void ResetFontCreationMeshSettings() ResetFontCreationPrebuiltSettings() Declaration public void ResetFontCreationPrebuiltSettings()"
  },
  "api/TinyGiantStudio.Text.Button.html": {
    "href": "api/TinyGiantStudio.Text.Button.html",
    "title": "Class Button | Trophy - Ultimate Score System Documentation",
    "summary": "Class Button The component for 3D buttons. Inheritance object Object Component Behaviour MonoBehaviour Button Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Button\", 20002)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/button\")] public class Button : MonoBehaviour Fields applyBeingPressedModuleContainers Declaration [FormerlySerializedAs(\"applyOnPressModuleContainers\")] public bool applyBeingPressedModuleContainers Field Value Type Description bool applyPressCompleteModuleContainers When the user releases the key. Declaration [FormerlySerializedAs(\"applyOnClickModuleContainers\")] public bool applyPressCompleteModuleContainers Field Value Type Description bool applySelectModuleContainers Selected is the state when Mouse hovers on a UI item or it is selected via keyboard/controller by scrolling in a list. Declaration [FormerlySerializedAs(\"applyOnSelectModuleContainers\")] public bool applySelectModuleContainers Field Value Type Description bool applyUnSelectedModuleContainers Unselect is the state that appears when a UI element enters the normal state from selected. Declaration [FormerlySerializedAs(\"applyUnSelectModuleContainers\")] public bool applyUnSelectedModuleContainers Field Value Type Description bool beingPressedEvent While the mouse/keyboard/controller button is pressed down or touch held down, the module or event is constantly called. Declaration [FormerlySerializedAs(\"whileBeingClicked\")] public UnityEvent beingPressedEvent Field Value Type Description UnityEvent beingPressedModuleContainers Being pressed is while the mouse click or touch is held down, the module or event is constantly called. Declaration [FormerlySerializedAs(\"onPressModuleContainers\")] public List<ModuleContainer> beingPressedModuleContainers Field Value Type Description List<ModuleContainer> holdPressedVisualFor Declaration public float holdPressedVisualFor Field Value Type Description float interactable Declaration public bool interactable Field Value Type Description bool interactableByMouse Declaration [Tooltip(\"Mouse or touch can select this\")] public bool interactableByMouse Field Value Type Description bool isSelected Declaration public bool isSelected Field Value Type Description bool pressCompleteEvent When the user releases the key. In other words, the frame when the button/key or touch being pressed is complete. Declaration [FormerlySerializedAs(\"onClick\")] public UnityEvent pressCompleteEvent Field Value Type Description UnityEvent pressCompleteModuleContainers When the user releases the key. Declaration [FormerlySerializedAs(\"onClickModuleContainers\")] public List<ModuleContainer> pressCompleteModuleContainers Field Value Type Description List<ModuleContainer> selectedEvent Mouse hover on the item or selected item via keyboard/controller in a list. Declaration [FormerlySerializedAs(\"onSelect\")] public UnityEvent selectedEvent Field Value Type Description UnityEvent selectedModuleContainers Selected is the state when Mouse hovers on a UI item or it is selected via keyboard/controller by scrolling in a list. Declaration [FormerlySerializedAs(\"onSelectModuleContainers\")] public List<ModuleContainer> selectedModuleContainers Field Value Type Description List<ModuleContainer> settings Used to load default values. Declaration public AssetSettings settings Field Value Type Description AssetSettings unSelectedModuleContainers Unselect is the state that appears when a UI element enters the normal state from selected. Declaration [FormerlySerializedAs(\"unSelectModuleContainers \")] public List<ModuleContainer> unSelectedModuleContainers Field Value Type Description List<ModuleContainer> unselectEvent This is the state that appears when a UI element enters the normal state from selected. This is used instead of normal because a UI element can be \"normal\" state by default when the game starts. Declaration [FormerlySerializedAs(\"onUnselect\")] public UnityEvent unselectEvent Field Value Type Description UnityEvent useModules If set to false, disables all modules from this button. Modules are called when entering a style for the first time. Declaration public bool useModules Field Value Type Description bool usePressedVisual Declaration public bool usePressedVisual Field Value Type Description bool useSelectedVisual Declaration public bool useSelectedVisual Field Value Type Description bool useStyles Declaration public bool useStyles Field Value Type Description bool Properties Background The background is assigned to the button. The button can change material depending on Style. Declaration public Renderer Background { get; set; } Property Value Type Description Renderer DisabledBackgroundMaterial Declaration public Material DisabledBackgroundMaterial { get; set; } Property Value Type Description Material DisabledTextMaterial Declaration public Material DisabledTextMaterial { get; set; } Property Value Type Description Material DisabledTextSize Declaration public Vector3 DisabledTextSize { get; set; } Property Value Type Description Vector3 NormalBackgroundMaterial Declaration public Material NormalBackgroundMaterial { get; set; } Property Value Type Description Material NormalTextMaterial Declaration public Material NormalTextMaterial { get; set; } Property Value Type Description Material NormalTextSize Declaration public Vector3 NormalTextSize { get; set; } Property Value Type Description Vector3 PressedBackgroundMaterial Declaration public Material PressedBackgroundMaterial { get; set; } Property Value Type Description Material PressedTextMaterial Declaration public Material PressedTextMaterial { get; set; } Property Value Type Description Material PressedTextSize Declaration public Vector3 PressedTextSize { get; set; } Property Value Type Description Vector3 SelectedBackgroundMaterial Declaration public Material SelectedBackgroundMaterial { get; set; } Property Value Type Description Material SelectedTextMaterial Declaration public Material SelectedTextMaterial { get; set; } Property Value Type Description Material SelectedTextSize Declaration public Vector3 SelectedTextSize { get; set; } Property Value Type Description Vector3 Text Declaration public Modular3DText Text { get; set; } Property Value Type Description Modular3DText UseDisabledVisual Declaration public bool UseDisabledVisual { get; set; } Property Value Type Description bool Methods ApplyDisabledStyle() Item 1 = apply from parent Item 2 = apply from self Declaration public (bool, bool, List) ApplyDisabledStyle() Returns Type Description (bool, bool, List) ApplyNormalStyle() Declaration public (bool, bool) ApplyNormalStyle() Returns Type Description (bool, bool) ApplyOnClickModule() Declaration public (bool, bool, List) ApplyOnClickModule() Returns Type Description (bool, bool, List) ApplyOnPresstModule() Declaration public (bool, bool, List) ApplyOnPresstModule() Returns Type Description (bool, bool, List) ApplyOnSelectModule() Declaration public (bool, bool, List) ApplyOnSelectModule() Returns Type Description (bool, bool, List) ApplyOnSelectStyle() Declaration public (bool, bool, List) ApplyOnSelectStyle() Returns Type Description (bool, bool, List) Apply from perent, apply from self, list ApplyPressedStyle() Declaration public (bool, bool, List) ApplyPressedStyle() Returns Type Description (bool, bool, List) ApplyUnSelectModule() Declaration public (bool, bool, List) ApplyUnSelectModule() Returns Type Description (bool, bool, List) BeingPressedButtonModuleUpdate() Declaration public void BeingPressedButtonModuleUpdate() ButtonBeingPressed() Declaration public void ButtonBeingPressed() DisabledButtonVisualUpdate() Declaration public void DisabledButtonVisualUpdate() EmptyEffect(List<ModuleContainer>, Module) Declaration public void EmptyEffect(List<ModuleContainer> moduleList, Module module = null) Parameters Type Name Description List<ModuleContainer> moduleList Module module Interactable() Call this to set the button as Interactable Declaration public void Interactable() PressButton() Used everywhere except list Declaration public void PressButton() PressButtonDontCallList() This is called from list. This avoids recursion. Declaration public void PressButtonDontCallList() PressButtonVisualUpdate() Declaration public void PressButtonVisualUpdate() PressCompleteButtonModuleUpdate() Declaration public void PressCompleteButtonModuleUpdate() PressCompleted() Declaration public void PressCompleted() SelectButton() Call this to select this button Declaration public void SelectButton() SelectedButtonModuleUpdate() Declaration public void SelectedButtonModuleUpdate() SelectedButtonVisualUpdate() Declaration public void SelectedButtonVisualUpdate() Uninteractable() Call this to set the button as Uninteractable Declaration public void Uninteractable() UnselectButton() Call this to unselect a button Declaration public void UnselectButton() UnselectButtonModuleUpdate() Declaration public void UnselectButtonModuleUpdate() UnselectedButtonVisualUpdate() Declaration public void UnselectedButtonVisualUpdate() UpdateStyle() Declaration public void UpdateStyle()"
  },
  "api/TinyGiantStudio.Text.ButtonEditor.html": {
    "href": "api/TinyGiantStudio.Text.ButtonEditor.html",
    "title": "Class ButtonEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonEditor Inheritance object Object ScriptableObject Editor ButtonEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(Button))] public class ButtonEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.ButtonInputProcessor.StandardInput.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputProcessor.StandardInput.html",
    "title": "Class ButtonInputProcessor.StandardInput | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputProcessor.StandardInput Inheritance object ButtonInputProcessor.StandardInput Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class ButtonInputProcessor.StandardInput Fields key Declaration public KeyCode key Field Value Type Description KeyCode lastPressed Declaration [HideInInspector] public float lastPressed Field Value Type Description float unityEvent Declaration public UnityEvent unityEvent Field Value Type Description UnityEvent"
  },
  "api/TinyGiantStudio.Text.ButtonInputProcessor.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputProcessor.html",
    "title": "Class ButtonInputProcessor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputProcessor Inheritance object Object Component Behaviour MonoBehaviour ButtonInputProcessor Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] public class ButtonInputProcessor : MonoBehaviour Fields downAxisEvent Declaration public UnityEvent downAxisEvent Field Value Type Description UnityEvent inputs Declaration [HideInInspector] public List<ButtonInputProcessor.StandardInput> inputs Field Value Type Description List<ButtonInputProcessor.StandardInput> leftAxisEvent Declaration public UnityEvent leftAxisEvent Field Value Type Description UnityEvent rightAxisEvent Declaration public UnityEvent rightAxisEvent Field Value Type Description UnityEvent submitEvent Declaration public UnityEvent submitEvent Field Value Type Description UnityEvent tickRate How long you have to press a key down for it to register as a second key press Declaration [Tooltip(\"How long you have to press a key down for it to register as a second key press\")] public float tickRate Field Value Type Description float tickRateSideWays Declaration public float tickRateSideWays Field Value Type Description float upAxisEvent Declaration public UnityEvent upAxisEvent Field Value Type Description UnityEvent"
  },
  "api/TinyGiantStudio.Text.ButtonInputProcessorEditor.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputProcessorEditor.html",
    "title": "Class ButtonInputProcessorEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputProcessorEditor Inheritance object Object ScriptableObject Editor ButtonInputProcessorEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(ButtonInputProcessor))] public class ButtonInputProcessorEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.ButtonInputSystemGlobal.ButtonInputProcessorStyle.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputSystemGlobal.ButtonInputProcessorStyle.html",
    "title": "Enum ButtonInputSystemGlobal.ButtonInputProcessorStyle | Trophy - Ultimate Score System Documentation",
    "summary": "Enum ButtonInputSystemGlobal.ButtonInputProcessorStyle Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum ButtonInputSystemGlobal.ButtonInputProcessorStyle Fields Name Description CommonInputController Custom IndividualPlayerInputComponents"
  },
  "api/TinyGiantStudio.Text.ButtonInputSystemGlobal.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputSystemGlobal.html",
    "title": "Class ButtonInputSystemGlobal | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputSystemGlobal Inheritance object Object Component Behaviour MonoBehaviour ButtonInputSystemGlobal Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Input System/Global Button Input System\", 20050)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/input/button-key/button-input-system\")] public class ButtonInputSystemGlobal : MonoBehaviour Fields Instance Declaration public static ButtonInputSystemGlobal Instance Field Value Type Description ButtonInputSystemGlobal debugLogs Declaration public bool debugLogs Field Value Type Description bool selectedInputSystem This is assigned when MText_InputSystemController is enabled/disabled and when a list with autofocus is instantiated on void start() Declaration public ButtonInputSystemLocal selectedInputSystem Field Value Type Description ButtonInputSystemLocal Properties MyButtonInputProcessorStyle Declaration public ButtonInputSystemGlobal.ButtonInputProcessorStyle MyButtonInputProcessorStyle { get; set; } Property Value Type Description ButtonInputSystemGlobal.ButtonInputProcessorStyle Methods DeSelect(ButtonInputSystemLocal) Declaration public void DeSelect(ButtonInputSystemLocal buttonInputSystem) Parameters Type Name Description ButtonInputSystemLocal buttonInputSystem DownAxisEvent() Declaration public void DownAxisEvent() LeftAxisEvent() Declaration public void LeftAxisEvent() RightAxisEvent() Declaration public void RightAxisEvent() Select(ButtonInputSystemLocal) Declaration public void Select(ButtonInputSystemLocal buttonInputSystem) Parameters Type Name Description ButtonInputSystemLocal buttonInputSystem SetupInputProcessor() Attaches required listeners to button input processor Declaration public void SetupInputProcessor() SubmitEvent() Declaration public void SubmitEvent() UpAxisEvent() Declaration public void UpAxisEvent() UpdateButtonInputProcessorScript(bool) Adds/removes and adds all required listeners to button input processor script. Called in 3 cases. In Awake() MyButtonInputProcessorStyle modification By editor script that doesn't do setup instantly and calls it later because of add component delay Declaration public void UpdateButtonInputProcessorScript(bool alsoDoSetup = true) Parameters Type Name Description bool alsoDoSetup"
  },
  "api/TinyGiantStudio.Text.ButtonInputSystemGlobalEditor.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputSystemGlobalEditor.html",
    "title": "Class ButtonInputSystemGlobalEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputSystemGlobalEditor Inheritance object Object ScriptableObject Editor ButtonInputSystemGlobalEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(ButtonInputSystemGlobal))] public class ButtonInputSystemGlobalEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.ButtonInputSystemLocal.html": {
    "href": "api/TinyGiantStudio.Text.ButtonInputSystemLocal.html",
    "title": "Class ButtonInputSystemLocal | Trophy - Ultimate Score System Documentation",
    "summary": "Class ButtonInputSystemLocal Inheritance object Object Component Behaviour MonoBehaviour ButtonInputSystemLocal Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Input System/Local Button Input System\", 20051)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/input/button-key/button-input-system\")] public class ButtonInputSystemLocal : MonoBehaviour Fields downAxisEvent Declaration public UnityEvent downAxisEvent Field Value Type Description UnityEvent leftAxisEvent Declaration public UnityEvent leftAxisEvent Field Value Type Description UnityEvent rightAxisEvent Declaration public UnityEvent rightAxisEvent Field Value Type Description UnityEvent submitEvent Declaration public UnityEvent submitEvent Field Value Type Description UnityEvent upAxisEvent Declaration public UnityEvent upAxisEvent Field Value Type Description UnityEvent Methods DownAxisEvent() Declaration public void DownAxisEvent() LeftAxisEvent() Declaration public void LeftAxisEvent() RightAxisEvent() Declaration public void RightAxisEvent() SetupInputProcessor() Attaches required listeners to button input processor Declaration public void SetupInputProcessor() SubmitEvent() Declaration public void SubmitEvent() UpAxisEvent() Declaration public void UpAxisEvent()"
  },
  "api/TinyGiantStudio.Text.Character.html": {
    "href": "api/TinyGiantStudio.Text.Character.html",
    "title": "Class Character | Trophy - Ultimate Score System Documentation",
    "summary": "Class Character Inheritance object Character Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class Character Fields character Declaration public char character Field Value Type Description char glyphIndex Declaration public int glyphIndex Field Value Type Description int leftSideBearing https://learn.microsoft.com/en-us/typography/opentype/spec/hmtx Name: lsb Declaration public int leftSideBearing Field Value Type Description int meshPrefab Declaration public Mesh meshPrefab Field Value Type Description Mesh offset Declaration public Vector3 offset Field Value Type Description Vector3 prefab Declaration public GameObject prefab Field Value Type Description GameObject spacing Named advance in typeface. Can't rename here because it would break a lot of existing fonts https://learn.microsoft.com/en-us/typography/opentype/spec/hmtx Name: advanceWidth Declaration public float spacing Field Value Type Description float xOffset Declaration public float xOffset Field Value Type Description float yOffset Declaration public float yOffset Field Value Type Description float zOffset Declaration public float zOffset Field Value Type Description float"
  },
  "api/TinyGiantStudio.Text.CharacterCleanUp.html": {
    "href": "api/TinyGiantStudio.Text.CharacterCleanUp.html",
    "title": "Class CharacterCleanUp | Trophy - Ultimate Score System Documentation",
    "summary": "Class CharacterCleanUp Under construction. This will handle all the destroy object calls for modular 3d text in the future To-do: destroy calls on OnDestroy should be re factored to use this class Inheritance object CharacterCleanUp Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class CharacterCleanUp Constructors CharacterCleanUp(Modular3DText) Declaration public CharacterCleanUp(Modular3DText myText) Parameters Type Name Description Modular3DText myText"
  },
  "api/TinyGiantStudio.Text.CharacterDrawer.html": {
    "href": "api/TinyGiantStudio.Text.CharacterDrawer.html",
    "title": "Class CharacterDrawer | Trophy - Ultimate Score System Documentation",
    "summary": "Class CharacterDrawer Inheritance object GUIDrawer PropertyDrawer CharacterDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomPropertyDrawer(typeof(Character))] public class CharacterDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/TinyGiantStudio.Text.DebugLogger.html": {
    "href": "api/TinyGiantStudio.Text.DebugLogger.html",
    "title": "Class DebugLogger | Trophy - Ultimate Score System Documentation",
    "summary": "Class DebugLogger Inheritance object DebugLogger Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class DebugLogger Constructors DebugLogger(Modular3DText) Constructor Declaration public DebugLogger(Modular3DText myText) Parameters Type Name Description Modular3DText myText Methods LogDeletedCharacters(string) Declaration public void LogDeletedCharacters(string name) Parameters Type Name Description string name LogFontUpdate(Font, Font) Declaration public void LogFontUpdate(Font oldFont, Font newFont) Parameters Type Name Description Font oldFont Font newFont LogMaterialUpdate(Material, Material) Declaration public void LogMaterialUpdate(Material oldFont, Material newFont) Parameters Type Name Description Material oldFont Material newFont LogSingleMeshStatus(bool) Checking if Declaration public void LogSingleMeshStatus(bool usingSingleMesh) Parameters Type Name Description bool usingSingleMesh LogTextUpdate(string, string) Declaration public void LogTextUpdate(string oldText, string newText) Parameters Type Name Description string oldText string newText LogToDeleteCharacters(int) Declaration public void LogToDeleteCharacters(int toDeleteCount) Parameters Type Name Description int toDeleteCount"
  },
  "api/TinyGiantStudio.Text.DelayCallCharacterCleanUp.html": {
    "href": "api/TinyGiantStudio.Text.DelayCallCharacterCleanUp.html",
    "title": "Class DelayCallCharacterCleanUp | Trophy - Ultimate Score System Documentation",
    "summary": "Class DelayCallCharacterCleanUp Apologies for my poor explanation: Inside the editor, Unity doesn't let certain tasks to be done on the same frame the script calls them. So, they have to created with EditorApplication.delayCall. A lot of things can cause issues with this. For example: if the script reloads while a task is on delay call, the reloaded script isn't the one that called the delay call. This can result in leftover letter getting created but no text that they belong to. (Usually as a copy). This is super rare but can be annoying if it happens This script handles this issue. Inheritance object Object Component Behaviour MonoBehaviour DelayCallCharacterCleanUp Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [ExecuteAlways] public class DelayCallCharacterCleanUp : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.EditorFiles.EditorThemeManager.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.EditorThemeManager.html",
    "title": "Class EditorThemeManager | Trophy - Ultimate Score System Documentation",
    "summary": "Class EditorThemeManager This provides a uniform way for all UI in Modular 3D Text to switch themes in UIToolkit Inheritance object EditorThemeManager Namespace: TinyGiantStudio.Text.EditorFiles Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class EditorThemeManager Constructors EditorThemeManager(GroupBox) Initializes a new instance of the EditorThemeManager class. Declaration public EditorThemeManager(GroupBox newContainer) Parameters Type Name Description GroupBox newContainer The root of the UI. Fields _theme Declaration public Theme _theme Field Value Type Description Theme Properties Root Declaration public VisualElement Root { get; set; } Property Value Type Description VisualElement Theme Declaration public Theme Theme { get; set; } Property Value Type Description Theme Methods Start() Declaration public void Start() UpdateTheme() Declaration public void UpdateTheme()"
  },
  "api/TinyGiantStudio.Text.EditorFiles.MaterialPreviewManager.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.MaterialPreviewManager.html",
    "title": "Class MaterialPreviewManager | Trophy - Ultimate Score System Documentation",
    "summary": "Class MaterialPreviewManager This handles using the Material Preview Field Template. Call the Hook method Inheritance object MaterialPreviewManager Namespace: TinyGiantStudio.Text.EditorFiles Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class MaterialPreviewManager Methods Hook(TemplateContainer, SerializedProperty, string, Material) Declaration public void Hook(TemplateContainer container, SerializedProperty serializedProperty, string label, Material material) Parameters Type Name Description TemplateContainer container SerializedProperty serializedProperty string label Material material"
  },
  "api/TinyGiantStudio.Text.EditorFiles.ModularTextEditorWindow.Preview.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.ModularTextEditorWindow.Preview.html",
    "title": "Class ModularTextEditorWindow.Preview | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModularTextEditorWindow.Preview Inheritance object ModularTextEditorWindow.Preview Namespace: TinyGiantStudio.Text.EditorFiles Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class ModularTextEditorWindow.Preview Fields mesh Declaration public Mesh mesh Field Value Type Description Mesh meshInformationLabel Declaration public Label meshInformationLabel Field Value Type Description Label meshPreview Declaration public MeshPreview meshPreview Field Value Type Description MeshPreview previewCharacterField Declaration public TextField previewCharacterField Field Value Type Description TextField previewContainer Declaration public IMGUIContainer previewContainer Field Value Type Description IMGUIContainer previewSettingsContainer Declaration public IMGUIContainer previewSettingsContainer Field Value Type Description IMGUIContainer"
  },
  "api/TinyGiantStudio.Text.EditorFiles.ModularTextEditorWindow.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.ModularTextEditorWindow.html",
    "title": "Class ModularTextEditorWindow | Trophy - Ultimate Score System Documentation",
    "summary": "Class ModularTextEditorWindow Inheritance object Object ScriptableObject EditorWindow ModularTextEditorWindow Inherited Members EditorWindow.BeginWindows() EditorWindow.EndWindows() EditorWindow.ShowNotification(GUIContent) EditorWindow.ShowNotification(GUIContent, double) EditorWindow.RemoveNotification() EditorWindow.ShowTab() EditorWindow.Focus() EditorWindow.ShowUtility() EditorWindow.ShowPopup() EditorWindow.ShowModalUtility() EditorWindow.ShowAsDropDown(Rect, Vector2) EditorWindow.Show() EditorWindow.Show(bool) EditorWindow.ShowAuxWindow() EditorWindow.ShowModal() EditorWindow.GetWindow(Type, bool, string, bool) EditorWindow.GetWindow(Type, bool, string) EditorWindow.GetWindow(Type, bool) EditorWindow.GetWindow(Type) EditorWindow.GetWindowWithRect(Type, Rect, bool, string) EditorWindow.GetWindowWithRect(Type, Rect, bool) EditorWindow.GetWindowWithRect(Type, Rect) EditorWindow.GetWindow<T>() EditorWindow.GetWindow<T>(bool) EditorWindow.GetWindow<T>(bool, string) EditorWindow.GetWindow<T>(string) EditorWindow.GetWindow<T>(string, bool) EditorWindow.GetWindow<T>(bool, string, bool) EditorWindow.GetWindow<T>(params Type[]) EditorWindow.GetWindow<T>(string, params Type[]) EditorWindow.GetWindow<T>(string, bool, params Type[]) EditorWindow.CreateWindow<T>(params Type[]) EditorWindow.CreateWindow<T>(string, params Type[]) EditorWindow.HasOpenInstances<T>() EditorWindow.FocusWindowIfItsOpen(Type) EditorWindow.FocusWindowIfItsOpen<T>() EditorWindow.GetWindowWithRect<T>(Rect) EditorWindow.GetWindowWithRect<T>(Rect, bool) EditorWindow.GetWindowWithRect<T>(Rect, bool, string) EditorWindow.GetWindowWithRect<T>(Rect, bool, string, bool) EditorWindow.SaveChanges() EditorWindow.DiscardChanges() EditorWindow.Close() EditorWindow.Repaint() EditorWindow.SendEvent(Event) EditorWindow.GetExtraPaneTypes() EditorWindow.TryGetOverlay(string, out Overlay) EditorWindow.OnBackingScaleFactorChanged() EditorWindow.dataModeController EditorWindow.rootVisualElement EditorWindow.overlayCanvas EditorWindow.wantsMouseMove EditorWindow.wantsMouseEnterLeaveWindow EditorWindow.wantsLessLayoutEvents EditorWindow.autoRepaintOnSceneChange EditorWindow.maximized EditorWindow.hasFocus EditorWindow.docked EditorWindow.focusedWindow EditorWindow.mouseOverWindow EditorWindow.hasUnsavedChanges EditorWindow.saveChangesMessage EditorWindow.minSize EditorWindow.maxSize EditorWindow.title EditorWindow.titleContent EditorWindow.depthBufferBits EditorWindow.antiAlias EditorWindow.position Namespace: TinyGiantStudio.Text.EditorFiles Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class ModularTextEditorWindow : EditorWindow Fields font Declaration public Font font Field Value Type Description Font previews Declaration public List<ModularTextEditorWindow.Preview> previews Field Value Type Description List<ModularTextEditorWindow.Preview> Methods CreateGUI() Declaration public void CreateGUI() ShowWindow() Declaration [MenuItem(\"Tools/Tiny Giant Studio/Modular 3D Text\", false, 100)] public static void ShowWindow()"
  },
  "api/TinyGiantStudio.Text.EditorFiles.Theme.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.Theme.html",
    "title": "Enum Theme | Trophy - Ultimate Score System Documentation",
    "summary": "Enum Theme Namespace: TinyGiantStudio.Text.EditorFiles Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public enum Theme Fields Name Description Dark Light"
  },
  "api/TinyGiantStudio.Text.EditorFiles.html": {
    "href": "api/TinyGiantStudio.Text.EditorFiles.html",
    "title": "Namespace TinyGiantStudio.Text.EditorFiles | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Text.EditorFiles Classes EditorThemeManager This provides a uniform way for all UI in Modular 3D Text to switch themes in UIToolkit MaterialPreviewManager This handles using the Material Preview Field Template. Call the Hook method ModularTextEditorWindow ModularTextEditorWindow.Preview Enums Theme"
  },
  "api/TinyGiantStudio.Text.Example.Countdown.html": {
    "href": "api/TinyGiantStudio.Text.Example.Countdown.html",
    "title": "Class Countdown | Trophy - Ultimate Score System Documentation",
    "summary": "Class Countdown Inheritance object Object Component Behaviour MonoBehaviour Countdown Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax public class Countdown : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.Example.DamageText.html": {
    "href": "api/TinyGiantStudio.Text.Example.DamageText.html",
    "title": "Class DamageText | Trophy - Ultimate Score System Documentation",
    "summary": "Class DamageText Inheritance object Object Component Behaviour MonoBehaviour DamageText Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax public class DamageText : MonoBehaviour Fields modular3DText Declaration public Modular3DText modular3DText Field Value Type Description Modular3DText module Declaration public Module module Field Value Type Description Module textHolder Declaration public Transform textHolder Field Value Type Description Transform Methods UpdateText(int) Declaration public void UpdateText(int number) Parameters Type Name Description int number UpdateText(float) Declaration public void UpdateText(float number) Parameters Type Name Description float number UpdateText(string) Declaration public void UpdateText(string str) Parameters Type Name Description string str"
  },
  "api/TinyGiantStudio.Text.Example.LoopAnimation.html": {
    "href": "api/TinyGiantStudio.Text.Example.LoopAnimation.html",
    "title": "Class LoopAnimation | Trophy - Ultimate Score System Documentation",
    "summary": "Class LoopAnimation Inheritance object Object Component Behaviour MonoBehaviour LoopAnimation Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax [RequireComponent(typeof(Modular3DText))] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Extra/Loop Animation\", 20102)] public class LoopAnimation : MonoBehaviour Fields targetLetterList Declaration public List<GameObject> targetLetterList Field Value Type Description List<GameObject> targetWordsList Declaration public List<List<GameObject>> targetWordsList Field Value Type Description List<List<GameObject>> Methods UpdateTargetList() This needs to be called everytime the text is changed Declaration public void UpdateTargetList()"
  },
  "api/TinyGiantStudio.Text.Example.LoopAnimationEditor.html": {
    "href": "api/TinyGiantStudio.Text.Example.LoopAnimationEditor.html",
    "title": "Class LoopAnimationEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class LoopAnimationEditor Inheritance object Object ScriptableObject Editor LoopAnimationEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(LoopAnimation))] public class LoopAnimationEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.Example.StatusToolTip.Styles.html": {
    "href": "api/TinyGiantStudio.Text.Example.StatusToolTip.Styles.html",
    "title": "Class StatusToolTip.Styles | Trophy - Ultimate Score System Documentation",
    "summary": "Class StatusToolTip.Styles Inheritance object StatusToolTip.Styles Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class StatusToolTip.Styles Fields offsetMax Declaration public Vector3 offsetMax Field Value Type Description Vector3 offsetMin Declaration public Vector3 offsetMin Field Value Type Description Vector3 textPrefab Declaration public GameObject textPrefab Field Value Type Description GameObject"
  },
  "api/TinyGiantStudio.Text.Example.StatusToolTip.html": {
    "href": "api/TinyGiantStudio.Text.Example.StatusToolTip.html",
    "title": "Class StatusToolTip | Trophy - Ultimate Score System Documentation",
    "summary": "Class StatusToolTip Inheritance object Object Component Behaviour MonoBehaviour StatusToolTip Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax public class StatusToolTip : MonoBehaviour Fields defaultDuration Declaration [Space] [Space] public float defaultDuration Field Value Type Description float poolDictionary Declaration public Dictionary<string, Queue<GameObject>> poolDictionary Field Value Type Description Dictionary<string, Queue<GameObject>> pooling Declaration [Tooltip(\"This uses itself as pool holder, not poolmanager like the text and the text prefabs MUST have unique names because that's what is used for pool key\")] public bool pooling Field Value Type Description bool styles Declaration public List<StatusToolTip.Styles> styles Field Value Type Description List<StatusToolTip.Styles> Methods ShowToolTip(string, int, Vector3, Quaternion, bool) Declaration public void ShowToolTip(string text, int style, Vector3 position, Quaternion rotation, bool worldPosition) Parameters Type Name Description string text int style Vector3 position Quaternion rotation bool worldPosition ShowToolTip(string, int, Vector3, Quaternion, bool, float) Declaration public void ShowToolTip(string text, int style, Vector3 position, Quaternion rotation, bool worldPosition, float duration) Parameters Type Name Description string text int style Vector3 position Quaternion rotation bool worldPosition float duration"
  },
  "api/TinyGiantStudio.Text.Example.Typewriter.html": {
    "href": "api/TinyGiantStudio.Text.Example.Typewriter.html",
    "title": "Class Typewriter | Trophy - Ultimate Score System Documentation",
    "summary": "Class Typewriter Inheritance object Object Component Behaviour MonoBehaviour Typewriter Namespace: TinyGiantStudio.Text.Example Assembly: Assembly-CSharp-firstpass.dll Syntax [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Extra/Typewriter\", 20101)] public class Typewriter : MonoBehaviour Fields modular3DText Declaration [Space(20)] public Modular3DText modular3DText Field Value Type Description Modular3DText text Declaration [TextArea] public string text Field Value Type Description string typeDelay Declaration [Tooltip(\"Minimum and maximum possible speed.\")] public Vector2 typeDelay Field Value Type Description Vector2 Methods StartTyping() If gameobject is enabled, this starts a coroutine for the typewriter Declaration public void StartTyping()"
  },
  "api/TinyGiantStudio.Text.Example.html": {
    "href": "api/TinyGiantStudio.Text.Example.html",
    "title": "Namespace TinyGiantStudio.Text.Example | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Text.Example Classes Countdown DamageText LoopAnimation LoopAnimationEditor StatusToolTip StatusToolTip.Styles Typewriter"
  },
  "api/TinyGiantStudio.Text.Font.html": {
    "href": "api/TinyGiantStudio.Text.Font.html",
    "title": "Class Font | Trophy - Ultimate Score System Documentation",
    "summary": "Class Font Inheritance object Object ScriptableObject Font Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [PreferBinarySerialization] [CreateAssetMenu(fileName = \"New 3D Font\", menuName = \"Tiny Giant Studio/Modular 3D Text/Font/New Font\")] public class Font : ScriptableObject Fields autoSmoothAngleInput Declaration public float autoSmoothAngleInput Field Value Type Description float averageYValue Declaration public float averageYValue Field Value Type Description float characterSpacing Declaration public float characterSpacing Field Value Type Description float characters Declaration public List<Character> characters Field Value Type Description List<Character> emptySpaceSpacing Declaration [Tooltip(\"Word spacing and spacing for unavailable characters\")] public float emptySpaceSpacing Field Value Type Description float enableKerning Declaration public bool enableKerning Field Value Type Description bool fallbackFonts Declaration [Space] [Tooltip(\"Avoid recursive references\")] public List<Font> fallbackFonts Field Value Type Description List<Font> fontBytes Declaration public byte[] fontBytes Field Value Type Description byte[] kernTable Declaration public List<KerningPair> kernTable Field Value Type Description List<KerningPair> kerningMultiplier Declaration public float kerningMultiplier Field Value Type Description float lineHeight Declaration [Tooltip(\"Text's character spacing = font's character spacing * text's character spacing\")] public float lineHeight Field Value Type Description float modelSource Declaration [Tooltip(\"The 3d object with the characters as child object. \\nNOT required.\")] public GameObject modelSource Field Value Type Description GameObject monoSpaceFont Declaration [Tooltip(\"Mono space means all characters are spaced equally.\\nIf turned on, individual spacing value from list below is ignored. The information is not removed to avoid accidentally turning it on ruin the font. \\nCharacter spacing is used for everything\")] public bool monoSpaceFont Field Value Type Description bool monoSpaceSpacing Declaration public float monoSpaceSpacing Field Value Type Description float sizeXYInput Declaration public int sizeXYInput Field Value Type Description int sizeZInput Declaration public int sizeZInput Field Value Type Description int unitPerEM Declaration [Tooltip(\"An em is a unit of measurement, relative to the size of the font; therefore, in a typeface set at a font-size of 16px, one em is 16px.\")] public float unitPerEM Field Value Type Description float useUpperCaseLettersIfLowerCaseIsMissing Declaration [Tooltip(\"Use UpperCase If LowerCase Is Missing\")] public bool useUpperCaseLettersIfLowerCaseIsMissing Field Value Type Description bool vertexDensityInput Declaration public float vertexDensityInput Field Value Type Description float Properties TypeFace Declaration public TypeFace TypeFace { get; set; } Property Value Type Description TypeFace Methods AddCharacter(GameObject) Declaration public void AddCharacter(GameObject obj) Parameters Type Name Description GameObject obj AddCharacter(Mesh) Declaration public void AddCharacter(Mesh mesh) Parameters Type Name Description Mesh mesh ConvertedValue(float) Declaration public float ConvertedValue(float spacing) Parameters Type Name Description float spacing Returns Type Description float GetMonoSpacingFromAverageCharacterSpacing() Declaration public void GetMonoSpacingFromAverageCharacterSpacing() GetTypeFaceFromBytes() Declaration public void GetTypeFaceFromBytes() Kerning(char, char) Declaration public float Kerning(char previousChar, char currentChar) Parameters Type Name Description char previousChar char currentChar Returns Type Description float KerningReferencesCount(int) Declaration public int KerningReferencesCount(int index) Parameters Type Name Description int index Returns Type Description int MonoSpaceSpacing() This is the raw value used by unity after taking font EM into consideration Declaration public float MonoSpaceSpacing() Returns Type Description float RetrievePrefabAndCharacter(char, bool) When this returns null, CharacterGenerator script is used to create it on the fly from ttf data Declaration public (Mesh, Character) RetrievePrefabAndCharacter(char c, bool checkFallBackFonts = true) Parameters Type Name Description char c bool checkFallBackFonts Returns Type Description (Mesh, Character) SetFontBytes(byte[]) Declaration public void SetFontBytes(byte[] newFontBytes) Parameters Type Name Description byte[] newFontBytes Spacing(char) Declaration public float Spacing(char c) Parameters Type Name Description char c Returns Type Description float Spacing(char, char) Spacing with kerning Declaration public float Spacing(char previousCharacter, char currentCharacter) Parameters Type Name Description char previousCharacter char currentCharacter Returns Type Description float Spacing(float) Used by getcharacterobject.cs Declaration public float Spacing(float rawAdvance) Parameters Type Name Description float rawAdvance Returns Type Description float TabSpace() Declaration public float TabSpace() Returns Type Description float UpdateCharacterList() Declaration public void UpdateCharacterList() UpdateCharacterList(bool) Declaration public void UpdateCharacterList(bool overwriteOldSet) Parameters Type Name Description bool overwriteOldSet UpdateCharacterList(GameObject) Declaration public void UpdateCharacterList(GameObject prefab) Parameters Type Name Description GameObject prefab"
  },
  "api/TinyGiantStudio.Text.FontCreation.MText_FontExporter.html": {
    "href": "api/TinyGiantStudio.Text.FontCreation.MText_FontExporter.html",
    "title": "Class MText_FontExporter | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_FontExporter Inheritance object MText_FontExporter Namespace: TinyGiantStudio.Text.FontCreation Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class MText_FontExporter Methods CreateFontFile(string, string, CharacterGenerator, byte[]) Declaration public void CreateFontFile(string prefabPath, string fontName, CharacterGenerator fontCreator, byte[] fontData) Parameters Type Name Description string prefabPath string fontName CharacterGenerator fontCreator byte[] fontData"
  },
  "api/TinyGiantStudio.Text.FontCreation.MText_MeshAssetExporter.html": {
    "href": "api/TinyGiantStudio.Text.FontCreation.MText_MeshAssetExporter.html",
    "title": "Class MText_MeshAssetExporter | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_MeshAssetExporter Inheritance object MText_MeshAssetExporter Namespace: TinyGiantStudio.Text.FontCreation Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class MText_MeshAssetExporter Methods DoExport(GameObject) Declaration public void DoExport(GameObject targetObj) Parameters Type Name Description GameObject targetObj"
  },
  "api/TinyGiantStudio.Text.FontCreation.MText_ObjExporter.html": {
    "href": "api/TinyGiantStudio.Text.FontCreation.MText_ObjExporter.html",
    "title": "Class MText_ObjExporter | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_ObjExporter Inheritance object MText_ObjExporter Namespace: TinyGiantStudio.Text.FontCreation Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class MText_ObjExporter Methods DoExport(GameObject, bool) Declaration public string DoExport(GameObject targetObj, bool makeSubMeshes) Parameters Type Name Description GameObject targetObj bool makeSubMeshes Returns Type Description string MeshToString(MeshFilter, Transform) Declaration public string MeshToString(MeshFilter mf, Transform t) Parameters Type Name Description MeshFilter mf Transform t Returns Type Description string"
  },
  "api/TinyGiantStudio.Text.FontCreation.NewFontCharacterRange.html": {
    "href": "api/TinyGiantStudio.Text.FontCreation.NewFontCharacterRange.html",
    "title": "Class NewFontCharacterRange | Trophy - Ultimate Score System Documentation",
    "summary": "Class NewFontCharacterRange Inheritance object NewFontCharacterRange Namespace: TinyGiantStudio.Text.FontCreation Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class NewFontCharacterRange Methods RetrieveCharacterListFromUnicodeSequence(string) Declaration public List<char> RetrieveCharacterListFromUnicodeSequence(string sequence) Parameters Type Name Description string sequence Returns Type Description List<char> RetrieveCharactersList(char, char) Declaration public List<char> RetrieveCharactersList(char start, char end) Parameters Type Name Description char start char end Returns Type Description List<char>"
  },
  "api/TinyGiantStudio.Text.FontCreation.html": {
    "href": "api/TinyGiantStudio.Text.FontCreation.html",
    "title": "Namespace TinyGiantStudio.Text.FontCreation | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Text.FontCreation Classes MText_FontExporter MText_MeshAssetExporter MText_ObjExporter NewFontCharacterRange"
  },
  "api/TinyGiantStudio.Text.FontEditor.html": {
    "href": "api/TinyGiantStudio.Text.FontEditor.html",
    "title": "Class FontEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class FontEditor TODO: Loop through all characters and check if any is empty Inheritance object Object ScriptableObject Editor FontEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(Font))] public class FontEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.FontInstanceUpdater.html": {
    "href": "api/TinyGiantStudio.Text.FontInstanceUpdater.html",
    "title": "Class FontInstanceUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class FontInstanceUpdater The purpose of this script is to update all instance of a font. Used by editor script to update scene objects Inheritance object FontInstanceUpdater Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax public class FontInstanceUpdater Methods ApplyFontChangesToTheScene(Font) Declaration public void ApplyFontChangesToTheScene(Font targetFont) Parameters Type Name Description Font targetFont"
  },
  "api/TinyGiantStudio.Text.GetCharacterObject.html": {
    "href": "api/TinyGiantStudio.Text.GetCharacterObject.html",
    "title": "Class GetCharacterObject | Trophy - Ultimate Score System Documentation",
    "summary": "Class GetCharacterObject To-do: Check if it is possible to pass null as previous char, this will allow me to use one method, instead of two to get mesh layout and object To-do: Test out alternatives to using statics Inheritance object GetCharacterObject Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class GetCharacterObject Methods GetMeshLayout(char, char, Modular3DText, MeshPostProcess) Used by text to get character mesh + layout info when single mesh is turned on. The other way to get character is using GetObject(char c, Modular3DText text); for multiple objects Declaration public static MeshLayout GetMeshLayout(char previousChar, char currentChar, Modular3DText text, MeshPostProcess meshPostProcess) Parameters Type Name Description char previousChar char currentChar The character Modular3DText text The Modular3DText MeshPostProcess meshPostProcess Returns Type Description MeshLayout GetMeshLayout(char, Modular3DText, MeshPostProcess) This is for the first character only Used by text to get character mesh + layout info when single mesh is turned on. The other way to get character is using GetObject(char c, Modular3DText text); for multiple objects Declaration public static MeshLayout GetMeshLayout(char currentChar, Modular3DText text, MeshPostProcess meshPostProcess) Parameters Type Name Description char currentChar The character Modular3DText text The Modular3DText MeshPostProcess meshPostProcess Returns Type Description MeshLayout GetObject(char, char, Modular3DText, MeshPostProcess) When single mesh is turned off Declaration public static GameObject GetObject(char previousChar, char currentChar, Modular3DText text, MeshPostProcess meshPostProcess) Parameters Type Name Description char previousChar char currentChar Modular3DText text MeshPostProcess meshPostProcess Returns Type Description GameObject GetObject(char, Modular3DText, MeshPostProcess) When single mesh is turned off Declaration public static GameObject GetObject(char c, Modular3DText text, MeshPostProcess meshPostProcess) Parameters Type Name Description char c Modular3DText text MeshPostProcess meshPostProcess Returns Type Description GameObject"
  },
  "api/TinyGiantStudio.Text.HorizontalSelector.html": {
    "href": "api/TinyGiantStudio.Text.HorizontalSelector.html",
    "title": "Class HorizontalSelector | Trophy - Ultimate Score System Documentation",
    "summary": "Class HorizontalSelector Inheritance object Object Component Behaviour MonoBehaviour HorizontalSelector Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Horizontal Selector\", 20006)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/horizontal-selector\")] public class HorizontalSelector : MonoBehaviour Fields audioSource Declaration public AudioSource audioSource Field Value Type Description AudioSource focused If keyboard control is enabled, selected = you can control via selected This value will be controlled by list, if it is in one If you are looking for the selected option, that's the int 'Value'. Declaration [Tooltip(\"If keyboard control is enabled, selected = you can control via selected. \\nThis value will be controlled by list, if it is in one\")] public bool focused Field Value Type Description bool interactable Can this be interacted with. If disabled, can't be selected in list Declaration [Tooltip(\"If keyboard control is enabled, selected = you can control via selected\\nOr selected/deselected in a List\")] public bool interactable Field Value Type Description bool limitFastValueChanges Declaration [Tooltip(\"This is to avoid key presses changing values too fast.\")] public bool limitFastValueChanges Field Value Type Description bool onSelectEvent Declaration public UnityEvent onSelectEvent Field Value Type Description UnityEvent onValueChangedEvent Declaration [Tooltip(\"The new value is passed as dynamic value\")] public UnityEvent<int> onValueChangedEvent Field Value Type Description UnityEvent<int> onValueDecreasedEvent Declaration public UnityEvent onValueDecreasedEvent Field Value Type Description UnityEvent onValueIncreasedEvent Declaration public UnityEvent onValueIncreasedEvent Field Value Type Description UnityEvent options Available options for horizontal selector Declaration [Tooltip(\"Available options for horizontal selector. \\nVariable name: options\")] public List<string> options Field Value Type Description List<string> text The 3D text used to show the current value Declaration [Tooltip(\"The 3D text used to show the current value\")] public Modular3DText text Field Value Type Description Modular3DText valueChangeMinDelay Declaration public float valueChangeMinDelay Field Value Type Description float valueChangeSoundEffect Declaration public AudioClip valueChangeSoundEffect Field Value Type Description AudioClip Properties Value Currently selected option Declaration public int Value { get; set; } Property Value Type Description int Methods Decrease() Decreases the selected number. If the number is less than zero, sets it to max Declaration public void Decrease() Focus(bool) Selects/Deselects the component Declaration public void Focus(bool enable) Parameters Type Name Description bool enable true = selected, false = deselected Increase() Increases the selected number. If the number is greater/equal(>=) than the options count, sets it to 0 Declaration public void Increase() UpdateText() Updates current text to match the currently selected value Declaration public void UpdateText()"
  },
  "api/TinyGiantStudio.Text.HorizontalSelectorEditor.html": {
    "href": "api/TinyGiantStudio.Text.HorizontalSelectorEditor.html",
    "title": "Class HorizontalSelectorEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class HorizontalSelectorEditor Inheritance object Object ScriptableObject Editor HorizontalSelectorEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(HorizontalSelector))] public class HorizontalSelectorEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.InputField.ContentType.html": {
    "href": "api/TinyGiantStudio.Text.InputField.ContentType.html",
    "title": "Enum InputField.ContentType | Trophy - Ultimate Score System Documentation",
    "summary": "Enum InputField.ContentType Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum InputField.ContentType Fields Name Description Anything FloatNumber IntegarNumber Password Pin"
  },
  "api/TinyGiantStudio.Text.InputField.html": {
    "href": "api/TinyGiantStudio.Text.InputField.html",
    "title": "Class InputField | Trophy - Ultimate Score System Documentation",
    "summary": "Class InputField Inheritance object Object Component Behaviour MonoBehaviour InputField Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Input field\", 20003)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/input-field\")] public class InputField : MonoBehaviour Fields autoFocusOnGameStart Declaration [Tooltip(\"If set to true, the inputfield is focused on awake.\\r\\nIf it is in a list, the list controls who to focus on.\")] public bool autoFocusOnGameStart Field Value Type Description bool background Declaration public Renderer background Field Value Type Description Renderer caret Declaration public string caret Field Value Type Description string contentType Declaration public InputField.ContentType contentType Field Value Type Description InputField.ContentType disabledBackgroundMat Declaration public Material disabledBackgroundMat Field Value Type Description Material disabledTextMat Declaration public Material disabledTextMat Field Value Type Description Material enterKeyEndsInput Declaration public bool enterKeyEndsInput Field Value Type Description bool hideCaretIfMaxCharacter Declaration public bool hideCaretIfMaxCharacter Field Value Type Description bool hoveredBackgroundMaterial Declaration public Material hoveredBackgroundMaterial Field Value Type Description Material inFocusBackgroundMat Declaration public Material inFocusBackgroundMat Field Value Type Description Material inFocusTextMat Declaration public Material inFocusTextMat Field Value Type Description Material interactable Declaration public bool interactable Field Value Type Description bool maxCharacter Declaration public int maxCharacter Field Value Type Description int normalBackgroundMaterial Declaration public Material normalBackgroundMaterial Field Value Type Description Material onBackspace Declaration public UnityEvent onBackspace Field Value Type Description UnityEvent onInput Declaration public UnityEvent onInput Field Value Type Description UnityEvent onInputEnd Declaration public UnityEvent onInputEnd Field Value Type Description UnityEvent outOfFocusTextMat Declaration public Material outOfFocusTextMat Field Value Type Description Material placeHolderText Declaration public string placeHolderText Field Value Type Description string placeHolderTextMat Declaration public Material placeHolderTextMat Field Value Type Description Material state Declaration public UIState state Field Value Type Description UIState textComponent Declaration public Modular3DText textComponent Field Value Type Description Modular3DText Properties Text Directly assigning the Text property makes a sound If it has both Audioclip and Audio Source. Declaration public string Text { get; set; } Property Value Type Description string Methods ApplyDisabledStyleFromParent() Declaration public (bool, List) ApplyDisabledStyleFromParent() Returns Type Description (bool, List) ApplyNormalStyleFromParent() Declaration public (bool, List) ApplyNormalStyleFromParent() Returns Type Description (bool, List) ApplySelectedStyleFromParent() Declaration public (bool, List) ApplySelectedStyleFromParent() Returns Type Description (bool, List) CloseTouchScreenKeyboard() Declaration public void CloseTouchScreenKeyboard() DisableVisual() Declaration public void DisableVisual() EmptyText() Sets the text to empty Declaration public void EmptyText() Focus(bool) There is a one-frame delay in this working. This is to avoid pressing the \"enter\" key in one list to apply to another UI just getting enabled Declaration public void Focus(bool enable) Parameters Type Name Description bool enable Focus(bool, bool) Declaration public void Focus(bool enable, bool delay) Parameters Type Name Description bool enable bool delay FocusToggle() If this component is enabled, switch to focus disable, Or, enable focus Declaration public void FocusToggle() Focused(object, EventArgs) Declaration public void Focused(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e HoverEnter() Declaration public void HoverEnter() HoverEnter(object, EventArgs) Used by UIState event. Not meant for user, but no issue with using, just wasted resource. Declaration public void HoverEnter(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e HoverExit() Declaration public void HoverExit() HoverExit(object, EventArgs) Used by UIState event. Declaration public void HoverExit(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e InputComplete() Declaration public void InputComplete() Interactable() Declaration public void Interactable() OpenTouchScreenKeyboard() Declaration public void OpenTouchScreenKeyboard() PressComplete() Declaration public void PressComplete() PressComplete(object, EventArgs) Used by UIState event. Declaration public void PressComplete(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e PressStart() Declaration public void PressStart() PressStart(object, EventArgs) Used by UIState event. Declaration public void PressStart(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e Select() Declaration public void Select() Unfocused(object, EventArgs) Declaration public void Unfocused(object sender, EventArgs e) Parameters Type Name Description object sender EventArgs e Uninteractable() Declaration public void Uninteractable() UpdateText() Declaration public void UpdateText() UpdateText(bool, bool) Declaration public void UpdateText(bool sound, bool ignoreCaret = false) Parameters Type Name Description bool sound Sound on/off bool ignoreCaret UpdateText(int) Declaration public void UpdateText(int newTextInt) Parameters Type Name Description int newTextInt UpdateText(float) Declaration public void UpdateText(float newTextFloat) Parameters Type Name Description float newTextFloat UpdateText(string) Declaration public void UpdateText(string newText) Parameters Type Name Description string newText"
  },
  "api/TinyGiantStudio.Text.InputFieldEditor.html": {
    "href": "api/TinyGiantStudio.Text.InputFieldEditor.html",
    "title": "Class InputFieldEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class InputFieldEditor Inheritance object Object ScriptableObject Editor InputFieldEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(InputField))] public class InputFieldEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.Interactable.html": {
    "href": "api/TinyGiantStudio.Text.Interactable.html",
    "title": "Class Interactable | Trophy - Ultimate Score System Documentation",
    "summary": "Class Interactable Any component that can be hovered, clicked etc. Inheritance object Object Component Behaviour MonoBehaviour Interactable Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public abstract class Interactable : MonoBehaviour Fields state Declaration public UIState state Field Value Type Description UIState"
  },
  "api/TinyGiantStudio.Text.KerningPair.html": {
    "href": "api/TinyGiantStudio.Text.KerningPair.html",
    "title": "Struct KerningPair | Trophy - Ultimate Score System Documentation",
    "summary": "Struct KerningPair Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public struct KerningPair Constructors KerningPair(char, char, float) Declaration public KerningPair(char left, char right, float offset) Parameters Type Name Description char left char right float offset Fields left Declaration public char left Field Value Type Description char offset Declaration public float offset Field Value Type Description float right Declaration public char right Field Value Type Description char"
  },
  "api/TinyGiantStudio.Text.Letter.html": {
    "href": "api/TinyGiantStudio.Text.Letter.html",
    "title": "Class Letter | Trophy - Ultimate Score System Documentation",
    "summary": "Class Letter Inheritance object Object Component Behaviour MonoBehaviour Letter Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [ExecuteInEditMode] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/text/fonts/letter\")] public class Letter : MonoBehaviour Fields model Declaration public Renderer model Field Value Type Description Renderer"
  },
  "api/TinyGiantStudio.Text.List.html": {
    "href": "api/TinyGiantStudio.Text.List.html",
    "title": "Class List | Trophy - Ultimate Score System Documentation",
    "summary": "Class List Inheritance object Object Component Behaviour MonoBehaviour List Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/List\", 20007)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/list\")] public class List : MonoBehaviour Fields applyBeingPressedModuleContainers While the mouse click or touch is held down, the module or event is constantly called. Declaration [FormerlySerializedAs(\"applyOnPressModuleContainers\")] public bool applyBeingPressedModuleContainers Field Value Type Description bool applyPressCompleteModuleContainers When the user releases the key. Declaration [FormerlySerializedAs(\"applyOnClickModuleContainers\")] public bool applyPressCompleteModuleContainers Field Value Type Description bool applySelectedModuleContainers Selected is the state when Mouse hovers on a UI item or it is selected via keyboard/controller by scrolling in a list. Declaration [FormerlySerializedAs(\"applyOnSelectModuleContainers\")] public bool applySelectedModuleContainers Field Value Type Description bool applyUnSelectedModuleContainers Unselect is the state that appears when a UI element enters the normal state from selected. Declaration [FormerlySerializedAs(\"applyUnSelectModuleContainers\")] public bool applyUnSelectedModuleContainers Field Value Type Description bool beingPressedModuleContainers While the mouse click or touch is held down, the module or event is constantly called. Declaration [FormerlySerializedAs(\"onPressModuleContainers\")] public List<ModuleContainer> beingPressedModuleContainers Field Value Type Description List<ModuleContainer> holdPressedVisualFor Declaration public float holdPressedVisualFor Field Value Type Description float ignoreChildBeingPressedModuleContainers While the mouse click or touch is held down, the module or event is constantly called. Declaration [FormerlySerializedAs(\"ignoreChildOnPressModuleContainers\")] public bool ignoreChildBeingPressedModuleContainers Field Value Type Description bool ignoreChildModules If set to false, disables all modules on the list items like buttons. Declaration public bool ignoreChildModules Field Value Type Description bool ignoreChildPressCompleteModuleContainers When the user releases the key. Declaration [FormerlySerializedAs(\"ignoreChildOnClickModuleContainers\")] public bool ignoreChildPressCompleteModuleContainers Field Value Type Description bool ignoreChildSelectedModuleContainers Selected is the state when Mouse hovers on a UI item or it is selected via keyboard/controller by scrolling in a list. Declaration [FormerlySerializedAs(\"ignoreChildOnSelectModuleContainers\")] public bool ignoreChildSelectedModuleContainers Field Value Type Description bool ignoreChildUnSelectedModuleContainers Unselect is the state that appears when a UI element enters the normal state from selected. Declaration [FormerlySerializedAs(\"ignoreChildUnSelectModuleContainers\")] public bool ignoreChildUnSelectedModuleContainers Field Value Type Description bool pressCompleteModuleContainers When the user releases the key. Declaration [FormerlySerializedAs(\"onClickModuleContainers\")] public List<ModuleContainer> pressCompleteModuleContainers Field Value Type Description List<ModuleContainer> selected Declaration public bool selected Field Value Type Description bool selectedItem Declaration public int selectedItem Field Value Type Description int selectedModuleContainers Selected is the state when Mouse hovers on a UI item or it is selected via keyboard/controller by scrolling in a list. Declaration [FormerlySerializedAs(\"onSelectModuleContainers \")] public List<ModuleContainer> selectedModuleContainers Field Value Type Description List<ModuleContainer> unSelectedModuleContainers Unselect is the state that appears when a UI element enters the normal state from selected. Declaration [FormerlySerializedAs(\"unSelectModuleContainers\")] public List<ModuleContainer> unSelectedModuleContainers Field Value Type Description List<ModuleContainer> useModules If set to false, disables all modules on this list. Declaration public bool useModules Field Value Type Description bool Properties DisabledBackgroundMaterial Declaration public Material DisabledBackgroundMaterial { get; set; } Property Value Type Description Material DisabledTextMaterial Declaration public Material DisabledTextMaterial { get; set; } Property Value Type Description Material DisabledTextSize Declaration public Vector3 DisabledTextSize { get; set; } Property Value Type Description Vector3 NormalBackgroundMaterial Declaration public Material NormalBackgroundMaterial { get; set; } Property Value Type Description Material NormalTextMaterial Declaration public Material NormalTextMaterial { get; set; } Property Value Type Description Material NormalTextSize Declaration public Vector3 NormalTextSize { get; set; } Property Value Type Description Vector3 PressedBackgroundMaterial Declaration public Material PressedBackgroundMaterial { get; set; } Property Value Type Description Material PressedTextMaterial Declaration public Material PressedTextMaterial { get; set; } Property Value Type Description Material PressedTextSize Declaration public Vector3 PressedTextSize { get; set; } Property Value Type Description Vector3 SelectedBackgroundMaterial Declaration public Material SelectedBackgroundMaterial { get; set; } Property Value Type Description Material SelectedTextMaterial Declaration public Material SelectedTextMaterial { get; set; } Property Value Type Description Material SelectedTextSize Declaration public Vector3 SelectedTextSize { get; set; } Property Value Type Description Vector3 UseDisabledItemVisual Declaration public bool UseDisabledItemVisual { get; set; } Property Value Type Description bool UseNormalItemVisual If set to false, disables normal style from being applied from this list. Individual element style is used in that case. Declaration public bool UseNormalItemVisual { get; set; } Property Value Type Description bool UsePressedItemVisual Declaration public bool UsePressedItemVisual { get; set; } Property Value Type Description bool UseSelectedItemVisual Declaration public bool UseSelectedItemVisual { get; set; } Property Value Type Description bool UseStyle If set to false, disables all style controls from this list. Declaration public bool UseStyle { get; set; } Property Value Type Description bool Methods AlertSelectedItem(int) Alerts the list item that it was selected. Doesn't alert the list. Call the SelectItem(int) to update the list Declaration public void AlertSelectedItem(int number) Parameters Type Name Description int number EmptyEffect(List<ModuleContainer>) Create an empty effect and adds it to MText_ModuleContainer List Declaration public void EmptyEffect(List<ModuleContainer> moduleList) Parameters Type Name Description List<ModuleContainer> moduleList Focus() Toggles focus Declaration public void Focus() Focus(bool) Focuses/defocuses the list Declaration public void Focus(bool enable) Parameters Type Name Description bool enable Focus(bool, bool) Focuses/defocus the list with a single frame delay if true is passed as second parameter Declaration public void Focus(bool enable, bool delay) Parameters Type Name Description bool enable bool delay FocusToggle() Switches the focus mode Declaration [ContextMenu(\"Toggle Focus\")] public void FocusToggle() PressSelectedItem() Declaration public void PressSelectedItem() PresstItem(int) Declaration public void PresstItem(int number) Parameters Type Name Description int number ScrollDown() Declaration public void ScrollDown() ScrollLeft() Declaration public void ScrollLeft() ScrollRight() Declaration public void ScrollRight() ScrollUp() Declaration public void ScrollUp() SelectItem(int) Processes the selected item for the list. Doesn't let the selected item know it was selected. Call the AlertSelectedItem(int number) to update the ui item Declaration public void SelectItem(int number) Parameters Type Name Description int number UnselectEverything() Declaration public void UnselectEverything() UnselectEverythingDontChangeSelectedItemValue() Unselects everything but does not reset the \"selectedItem\" number. Keeping the selected item value means the previously selected item can still be pressed after selected and scrolling via keyboard continues from the previously selected one instead of starting from 0 Declaration public void UnselectEverythingDontChangeSelectedItemValue() UnselectEverythingExceptSelected() Declaration public void UnselectEverythingExceptSelected() UnselectItem(int) Declaration public void UnselectItem(int i) Parameters Type Name Description int i UpdateList() Updates the list positioning Declaration [ContextMenu(\"Update List\")] public void UpdateList() UpdateStyle() Reapplies all variables/style choices, updating them. Declaration public void UpdateStyle()"
  },
  "api/TinyGiantStudio.Text.ListEditor.html": {
    "href": "api/TinyGiantStudio.Text.ListEditor.html",
    "title": "Class ListEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ListEditor Inheritance object Object ScriptableObject Editor ListEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(List))] public class ListEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.MenuItem.html": {
    "href": "api/TinyGiantStudio.Text.MenuItem.html",
    "title": "Class MenuItem | Trophy - Ultimate Score System Documentation",
    "summary": "Class MenuItem Inheritance object Object Component Behaviour MonoBehaviour MenuItem Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class MenuItem : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.MeshCombiner.html": {
    "href": "api/TinyGiantStudio.Text.MeshCombiner.html",
    "title": "Class MeshCombiner | Trophy - Ultimate Score System Documentation",
    "summary": "Class MeshCombiner Inheritance object MeshCombiner Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public static class MeshCombiner Methods CombinedMesh(List<MeshLayout>, Vector3, bool) Declaration public static List<Mesh> CombinedMesh(List<MeshLayout> meshLayouts, Vector3 scale, bool useIncreasedVerticiesCountForCombinedMesh) Parameters Type Name Description List<MeshLayout> meshLayouts Vector3 scale bool useIncreasedVerticiesCountForCombinedMesh Returns Type Description List<Mesh> RemoveNaNAndInfinityErrorIfAny(Quaternion) Declaration public static Quaternion RemoveNaNAndInfinityErrorIfAny(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion RemoveNaNAndInfinityErrorIfAny(Vector3) Declaration public static Vector3 RemoveNaNAndInfinityErrorIfAny(Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Vector3"
  },
  "api/TinyGiantStudio.Text.MeshPostProcess.html": {
    "href": "api/TinyGiantStudio.Text.MeshPostProcess.html",
    "title": "Enum MeshPostProcess | Trophy - Ultimate Score System Documentation",
    "summary": "Enum MeshPostProcess Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum MeshPostProcess Fields Name Description projectUV wrapUV"
  },
  "api/TinyGiantStudio.Text.MeshPostProcessing.html": {
    "href": "api/TinyGiantStudio.Text.MeshPostProcessing.html",
    "title": "Class MeshPostProcessing | Trophy - Ultimate Score System Documentation",
    "summary": "Class MeshPostProcessing Inheritance object Object Component Behaviour MonoBehaviour MeshPostProcessing Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class MeshPostProcessing : MonoBehaviour Methods PostProcess(Mesh, MeshPostProcess) Declaration public static Mesh PostProcess(Mesh mesh, MeshPostProcess meshPostProcess) Parameters Type Name Description Mesh mesh MeshPostProcess meshPostProcess Returns Type Description Mesh WrapUV(Mesh) Declaration public static Mesh WrapUV(Mesh mesh) Parameters Type Name Description Mesh mesh Returns Type Description Mesh"
  },
  "api/TinyGiantStudio.Text.Modular3DText.html": {
    "href": "api/TinyGiantStudio.Text.Modular3DText.html",
    "title": "Class Modular3DText | Trophy - Ultimate Score System Documentation",
    "summary": "Class Modular3DText Inheritance object Object Component Behaviour MonoBehaviour Modular3DText Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [SelectionBase] [DisallowMultipleComponent] [RequireComponent(typeof(TextUpdater))] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/3D Text\", 200)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/text/modular-3d-text\")] public class Modular3DText : MonoBehaviour Fields addingModules Declaration public List<ModuleContainer> addingModules Field Value Type Description List<ModuleContainer> applyModuleOnNewCharacter Declaration public bool applyModuleOnNewCharacter Field Value Type Description bool applyModulesOnEnable Declaration [Tooltip(\"If turned on, adding modules will be automatically called when a prefab with existing text is enabled instead of only when a new character is added\")] public bool applyModulesOnEnable Field Value Type Description bool applyModulesOnStart Declaration [Tooltip(\"If turned on, adding modules will be automatically called when a prefab with existing text is instantiated on Start() instead of only when a new character is added.\")] public bool applyModulesOnStart Field Value Type Description bool assetPath Where the prefab is saved. This is only for some edge cases that can be enabled via advanced settings. Declaration public string assetPath Field Value Type Description string autoFontSize Declaration public bool autoFontSize Field Value Type Description bool autoSaveMesh Declaration public bool autoSaveMesh Field Value Type Description bool canBreakOutermostPrefab Declaration [Tooltip(\"Breaks prefab connection while saving prefab location, can replace prefab at that location with a click\")] public bool canBreakOutermostPrefab Field Value Type Description bool characterObjectList Contains a list of all the character gameObject created by Text Declaration public List<GameObject> characterObjectList Field Value Type Description List<GameObject> combineMeshDuringRuntime Declaration public bool combineMeshDuringRuntime Field Value Type Description bool combineMeshInEditor Declaration public bool combineMeshInEditor Field Value Type Description bool customDeleteAfterDuration If set to true, deleteAfter float is used to determine when to delete a character. Declaration public bool customDeleteAfterDuration Field Value Type Description bool debugLogs Declaration public bool debugLogs Field Value Type Description bool deleteAfter Declaration public float deleteAfter Field Value Type Description float deletingModules Declaration public List<ModuleContainer> deletingModules Field Value Type Description List<ModuleContainer> destroyChildObjectsWithGameObject Declaration [Tooltip(\"When text is updated, old characters are moved to their correct position if their position is moved by something like a module.\")] public bool destroyChildObjectsWithGameObject Field Value Type Description bool editorTimeLogging Declaration public bool editorTimeLogging Field Value Type Description bool fontSizeIterationAmount Declaration public float fontSizeIterationAmount Field Value Type Description float generatedMeshes Declaration public List<Mesh> generatedMeshes Field Value Type Description List<Mesh> hideLettersInHierarchyInEditMode Declaration [Tooltip(\"If combine mesh is turned off\")] public bool hideLettersInHierarchyInEditMode Field Value Type Description bool hideLettersInHierarchyInPlayMode Declaration [Tooltip(\"Don't let letters show up in hierarchy in play mode. They are still there but not visible.\")] public bool hideLettersInHierarchyInPlayMode Field Value Type Description bool logDeletedCharacters Declaration public bool logDeletedCharacters Field Value Type Description bool logFontUpdates Declaration public bool logFontUpdates Field Value Type Description bool logMaterialUpdates Declaration public bool logMaterialUpdates Field Value Type Description bool logSingleMeshStatus Declaration public bool logSingleMeshStatus Field Value Type Description bool logTextUpdates Declaration public bool logTextUpdates Field Value Type Description bool maxFontSize Declaration public Vector3 maxFontSize Field Value Type Description Vector3 maxIterationTimes Declaration public int maxIterationTimes Field Value Type Description int meshPaths Where the mesh is saved if mesh save is turned on Declaration public List<string> meshPaths Field Value Type Description List<string> meshPostProcess Named UV Remapping in the inspector for now, since that's the only thing it dictates for now. Dictates if additional post-processing is done on the mesh. Project UV is default which means no additional calculation is done. Wrap UV tries to wrap the texture around the mesh. Additional post-processing types might be added in the future. Declaration public MeshPostProcess meshPostProcess Field Value Type Description MeshPostProcess minFontSize Declaration public Vector3 minFontSize Field Value Type Description Vector3 oldText This is used to check which letters need to be recreated/replaced by comparing to new text. Declaration public string oldText Field Value Type Description string reApplyModulesToOldCharacters Declaration public bool reApplyModulesToOldCharacters Field Value Type Description bool repositionOldCharacters Declaration public bool repositionOldCharacters Field Value Type Description bool runTimeLogging Declaration public bool runTimeLogging Field Value Type Description bool singleInPrefab Declaration public bool singleInPrefab Field Value Type Description bool sizeGraceAmount Declaration public float sizeGraceAmount Field Value Type Description float startAddingModuleFromChar If true, the adding module uses MonoBehavior attached to the character created to run its coroutine. This way, if the text is deactivated, the module isn't interrupted. Declaration public bool startAddingModuleFromChar Field Value Type Description bool startDeletingModuleFromChar If true, the deleting module uses MonoBehavior attached to the char to run the coroutine. This way, if the text is deactivated, the module isn't interrupted. Declaration public bool startDeletingModuleFromChar Field Value Type Description bool updateTextOncePerFrame Declaration public bool updateTextOncePerFrame Field Value Type Description bool useIncreasedVertexCountForCombinedMesh Changes mesh index format from 16 to 32 when set to true. index format 16-bit takes less memory and bandwidth. Even if it is on, it doesn't change the index format if it is not needed. Declaration public bool useIncreasedVertexCountForCombinedMesh Field Value Type Description bool useModules Declaration public bool useModules Field Value Type Description bool wordArray List of words in the text Declaration public string[] wordArray Field Value Type Description string[] Properties AutoLetterSize If turned on, instead of using the predetermined size of each letter, their size is taken from the size they take in the render view. Please remember, this is letter size, this doesn't modify the font size. Declaration public bool AutoLetterSize { get; set; } Property Value Type Description bool Capitalize If both Capitalize and LowerCase are true, Capitalize is applied Declaration public bool Capitalize { get; set; } Property Value Type Description bool Font Declaration public Font Font { get; set; } Property Value Type Description Font FontSize Assigning a new font size recreates the entire text. This is to avoid interfering with anything any module or usercreated code is doing. Declaration public Vector3 FontSize { get; set; } Property Value Type Description Vector3 LowerCase If both Capitalize and LowerCase are true, Capitalize is applied Declaration public bool LowerCase { get; set; } Property Value Type Description bool Material Declaration public Material Material { get; set; } Property Value Type Description Material Text Text or any property changes trigger an automatic update of the mesh at the end of the frame. This avoids wasting resources on needless calculations when multiple properties change in the same frame. This behavior can be modified in the Advanced setting. Declaration public string Text { get; set; } Property Value Type Description string WordSpacing Declaration public float WordSpacing { get; set; } Property Value Type Description float Methods CleanUpdateText() This will completely remove the old letters and create the complete text. Other methods of updating text will try to only update the ones that need to be updated Example: Adding the 'e' at the end of the existing text \"nam\" will try to add only 'e' without touching the other text unnecessarily. Declaration [ContextMenu(\"CleanUpdateText\")] public void CleanUpdateText() DestroyMesh(Mesh) This is used by a static method to destroy meshes Declaration public void DestroyMesh(Mesh mesh) Parameters Type Name Description Mesh mesh DoesStyleInheritFromAParent() Used by editor to write the values overwritten info message in the info box and hide property in inspector Declaration public bool DoesStyleInheritFromAParent() Returns Type Description bool EmptyEffect(List<ModuleContainer>) Please use the method NewEffect, this will be removed at a later date. Declaration public void EmptyEffect(List<ModuleContainer> moduleList) Parameters Type Name Description List<ModuleContainer> moduleList GetDeleteDurationFromEffects() Declaration public float GetDeleteDurationFromEffects() Returns Type Description float NewEffect(List<ModuleContainer>, Module) Declaration public void NewEffect(List<ModuleContainer> moduleList, Module newModule = null) Parameters Type Name Description List<ModuleContainer> moduleList Module newModule ShouldItCreateChild() True = Create child objects Declaration public bool ShouldItCreateChild() Returns Type Description bool UpdateText() Declaration public void UpdateText() UpdateText(int) Updates the text instantly with the number as text. Declaration public void UpdateText(int number) Parameters Type Name Description int number The Text UpdateText(float) Updates the text instantly with the number as text. Declaration public void UpdateText(float number) Parameters Type Name Description float number The Text UpdateText(string) Declaration public void UpdateText(string newText) Parameters Type Name Description string newText"
  },
  "api/TinyGiantStudio.Text.Modular3DTextEditor.html": {
    "href": "api/TinyGiantStudio.Text.Modular3DTextEditor.html",
    "title": "Class Modular3DTextEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class Modular3DTextEditor Inheritance object Object ScriptableObject Editor Modular3DTextEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(Modular3DText))] public class Modular3DTextEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.RaycastInputProcessor.html": {
    "href": "api/TinyGiantStudio.Text.RaycastInputProcessor.html",
    "title": "Class RaycastInputProcessor | Trophy - Ultimate Score System Documentation",
    "summary": "Class RaycastInputProcessor Handles input for raycast selector Inheritance object Object Component Behaviour MonoBehaviour RaycastInputProcessor Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Input System/Raycast Input Processor\", 20052)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/input/mouse-touch/raycast-input-processor\")] [DisallowMultipleComponent] [RequireComponent(typeof(RaycastSelector))] public class RaycastInputProcessor : MonoBehaviour Fields currentTarget Declaration public Transform currentTarget Field Value Type Description Transform myCamera Declaration [Tooltip(\"If not assigned, it will automatically get Camera.main on Start\")] public Camera myCamera Field Value Type Description Camera pointerOnUI Declaration public Transform pointerOnUI Field Value Type Description Transform"
  },
  "api/TinyGiantStudio.Text.RaycastSelector.html": {
    "href": "api/TinyGiantStudio.Text.RaycastSelector.html",
    "title": "Class RaycastSelector | Trophy - Ultimate Score System Documentation",
    "summary": "Class RaycastSelector This component is used to cast a ray from camera to interact with 3D UI Elements. Handles the logic part only. Not the input part. Inheritance object Object Component Behaviour MonoBehaviour RaycastSelector Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Input System/Raycast Selector\", 20052)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/input/mouse-touch/raycast-selector\")] public class RaycastSelector : MonoBehaviour Fields onlyOneTargetFocusedAtOnce Declaration [Tooltip(\"True = How normal UI works. It toggles if clicking a inputfield enables it and clicking somewhere else disables it\")] public bool onlyOneTargetFocusedAtOnce Field Value Type Description bool unselectBtnOnUnhover Declaration [Tooltip(\"Unhovering mouse from a Btn will unselect it\")] public bool unselectBtnOnUnhover Field Value Type Description bool Methods DragEnded(Transform, Transform) Declaration public void DragEnded(Transform hit, Transform currentTarget) Parameters Type Name Description Transform hit Transform currentTarget Dragging(Transform, Vector3) Declaration public void Dragging(Transform hit, Vector3 cursorPosition) Parameters Type Name Description Transform hit Vector3 cursorPosition PressTarget(Transform) Declaration public void PressTarget(Transform hit) Parameters Type Name Description Transform hit RaycastCheck(Ray) Recieves ray Declaration public Transform RaycastCheck(Ray ray) Parameters Type Name Description Ray ray Returns Type Description Transform What was hit SelectTarget(Transform) Selects the 3D UI passed as parameter Declaration public void SelectTarget(Transform target) Parameters Type Name Description Transform target UnselectTarget(Transform) Declaration public void UnselectTarget(Transform target) Parameters Type Name Description Transform target"
  },
  "api/TinyGiantStudio.Text.RaycastSelectorEditor.html": {
    "href": "api/TinyGiantStudio.Text.RaycastSelectorEditor.html",
    "title": "Class RaycastSelectorEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class RaycastSelectorEditor Inheritance object Object ScriptableObject Editor RaycastSelectorEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(RaycastSelector))] public class RaycastSelectorEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.RaycastSelectorInputProcessorEditor.html": {
    "href": "api/TinyGiantStudio.Text.RaycastSelectorInputProcessorEditor.html",
    "title": "Class RaycastSelectorInputProcessorEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class RaycastSelectorInputProcessorEditor Inheritance object Object ScriptableObject Editor RaycastSelectorInputProcessorEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(RaycastInputProcessor))] public class RaycastSelectorInputProcessorEditor : Editor Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.RuntimeFontImporter.html": {
    "href": "api/TinyGiantStudio.Text.RuntimeFontImporter.html",
    "title": "Class RuntimeFontImporter | Trophy - Ultimate Score System Documentation",
    "summary": "Class RuntimeFontImporter This handles importing font files during runtime. Call CreateFontFromTTFFile(byte[] rfontBytes), pass the TTF file as a byte array and it will return a new Font. Inheritance object Object Component Behaviour MonoBehaviour RuntimeFontImporter Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class RuntimeFontImporter : MonoBehaviour Methods CreateFontFromTTFFile(byte[]) Pass the TTF file as a byte array and it will return a new Font. Declaration public Font CreateFontFromTTFFile(byte[] fontBytes) Parameters Type Name Description byte[] fontBytes Content of the TTF file converted into a byte array. Returns Type Description Font"
  },
  "api/TinyGiantStudio.Text.SampleScene.AutoUpdateInputSystemToSampleScene.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.AutoUpdateInputSystemToSampleScene.html",
    "title": "Class AutoUpdateInputSystemToSampleScene | Trophy - Ultimate Score System Documentation",
    "summary": "Class AutoUpdateInputSystemToSampleScene Inheritance object Object Component Behaviour MonoBehaviour AutoUpdateInputSystemToSampleScene Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax [ExecuteAlways] public class AutoUpdateInputSystemToSampleScene : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_Announcement.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_Announcement.html",
    "title": "Class MText_SampleScene_Announcement | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_SampleScene_Announcement Inheritance object Object Component Behaviour MonoBehaviour MText_SampleScene_Announcement Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public class MText_SampleScene_Announcement : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_Cursor.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_Cursor.html",
    "title": "Class MText_SampleScene_Cursor | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_SampleScene_Cursor Inheritance object Object Component Behaviour MonoBehaviour MText_SampleScene_Cursor Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public class MText_SampleScene_Cursor : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_FontTest.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_FontTest.html",
    "title": "Class MText_SampleScene_FontTest | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_SampleScene_FontTest Inheritance object Object Component Behaviour MonoBehaviour MText_SampleScene_FontTest Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public class MText_SampleScene_FontTest : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_ListTest.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_ListTest.html",
    "title": "Class MText_SampleScene_ListTest | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_SampleScene_ListTest Inheritance object Object Component Behaviour MonoBehaviour MText_SampleScene_ListTest Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public class MText_SampleScene_ListTest : MonoBehaviour Methods Next() Declaration public void Next() Previous() Declaration public void Previous()"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_VRCam.RotationAxes.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_VRCam.RotationAxes.html",
    "title": "Enum MText_SampleScene_VRCam.RotationAxes | Trophy - Ultimate Score System Documentation",
    "summary": "Enum MText_SampleScene_VRCam.RotationAxes Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public enum MText_SampleScene_VRCam.RotationAxes Fields Name Description MouseX MouseXAndY MouseY"
  },
  "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_VRCam.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.MText_SampleScene_VRCam.html",
    "title": "Class MText_SampleScene_VRCam | Trophy - Ultimate Score System Documentation",
    "summary": "Class MText_SampleScene_VRCam Inheritance object Object Component Behaviour MonoBehaviour MText_SampleScene_VRCam Namespace: TinyGiantStudio.Text.SampleScene Assembly: Assembly-CSharp-firstpass.dll Syntax public class MText_SampleScene_VRCam : MonoBehaviour Fields axes Declaration public MText_SampleScene_VRCam.RotationAxes axes Field Value Type Description MText_SampleScene_VRCam.RotationAxes frameCounter Declaration public float frameCounter Field Value Type Description float maximumX Declaration public float maximumX Field Value Type Description float maximumY Declaration public float maximumY Field Value Type Description float minimumX Declaration public float minimumX Field Value Type Description float minimumY Declaration public float minimumY Field Value Type Description float sensitivityX Declaration public float sensitivityX Field Value Type Description float sensitivityY Declaration public float sensitivityY Field Value Type Description float Methods ClampAngle(float, float, float) Declaration public static float ClampAngle(float angle, float min, float max) Parameters Type Name Description float angle float min float max Returns Type Description float"
  },
  "api/TinyGiantStudio.Text.SampleScene.html": {
    "href": "api/TinyGiantStudio.Text.SampleScene.html",
    "title": "Namespace TinyGiantStudio.Text.SampleScene | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Text.SampleScene Classes AutoUpdateInputSystemToSampleScene MText_SampleScene_Announcement MText_SampleScene_Cursor MText_SampleScene_FontTest MText_SampleScene_ListTest MText_SampleScene_VRCam Enums MText_SampleScene_VRCam.RotationAxes"
  },
  "api/TinyGiantStudio.Text.Slider.ValueRange.html": {
    "href": "api/TinyGiantStudio.Text.Slider.ValueRange.html",
    "title": "Class Slider.ValueRange | Trophy - Ultimate Score System Documentation",
    "summary": "Class Slider.ValueRange Inheritance object Slider.ValueRange Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class Slider.ValueRange Fields icon Enabled and disabled when within range Declaration public GameObject icon Field Value Type Description GameObject max Declaration public float max Field Value Type Description float min Declaration public float min Field Value Type Description float oneTimeEvents Declaration public UnityEvent oneTimeEvents Field Value Type Description UnityEvent repeatEvents Declaration public UnityEvent repeatEvents Field Value Type Description UnityEvent triggeredAlready Declaration public bool triggeredAlready Field Value Type Description bool"
  },
  "api/TinyGiantStudio.Text.Slider.html": {
    "href": "api/TinyGiantStudio.Text.Slider.html",
    "title": "Class Slider | Trophy - Ultimate Score System Documentation",
    "summary": "Class Slider Inheritance object Object Component Behaviour MonoBehaviour Slider Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Slider\", 20005)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/slider\")] public class Slider : MonoBehaviour Fields autoFocusOnGameStart Selects on Awake() Selected items can be controlled by keyboard If it's in a list, this is controlled by list Declaration public bool autoFocusOnGameStart Field Value Type Description bool background Declaration public Transform background Field Value Type Description Transform backgroundSize Declaration public float backgroundSize Field Value Type Description float clickedHandleMat Declaration public Material clickedHandleMat Field Value Type Description Material directionChoice 0 is left to right Declaration public int directionChoice Field Value Type Description int disabledHandleMat Declaration public Material disabledHandleMat Field Value Type Description Material handle Declaration public SliderHandle handle Field Value Type Description SliderHandle handleGraphic Declaration public Renderer handleGraphic Field Value Type Description Renderer interactable As the name suggests, if it isn't interactable nothing can interact with it and it gets ignored in a list Declaration public bool interactable Field Value Type Description bool keyStep Declaration [Tooltip(\"How much to change on key press\")] public float keyStep Field Value Type Description float maxValue Declaration [Tooltip(\"Maximum value\")] public float maxValue Field Value Type Description float minValue Declaration [Tooltip(\"Minimum value\")] public float minValue Field Value Type Description float onValueChanged Declaration public UnityEvent<float> onValueChanged Field Value Type Description UnityEvent<float> progressBar Declaration public Transform progressBar Field Value Type Description Transform progressBarPrefab Declaration public GameObject progressBarPrefab Field Value Type Description GameObject selectedHandleMat Declaration public Material selectedHandleMat Field Value Type Description Material sliderDragEnded Declaration [Tooltip(\"Mouse/touch dragging the slider ended\")] public UnityEvent sliderDragEnded Field Value Type Description UnityEvent unSelectedHandleMat Declaration public Material unSelectedHandleMat Field Value Type Description Material useEvents Declaration public bool useEvents Field Value Type Description bool usePercentage Declaration public bool usePercentage Field Value Type Description bool useValueRangeEvents Declaration public bool useValueRangeEvents Field Value Type Description bool valueRangeEvents Events are called when the slider value enters a specific range Checks value in the top to down order. If you have two ranges that can be fulfilled simultaneously, the first one gets called. Declaration public List<Slider.ValueRange> valueRangeEvents Field Value Type Description List<Slider.ValueRange> Properties CurrentValue Declaration public float CurrentValue { get; set; } Property Value Type Description float Methods ApplyDisabledStyleFromParent() Declaration public (bool, List) ApplyDisabledStyleFromParent() Returns Type Description (bool, List) ApplyNormalStyleFromParent() Declaration public (bool, List) ApplyNormalStyleFromParent() Returns Type Description (bool, List) ApplyPressedStyleFromParent() Declaration public (bool, List) ApplyPressedStyleFromParent() Returns Type Description (bool, List) ApplySelectedStyleFromParent() Declaration public (bool, List) ApplySelectedStyleFromParent() Returns Type Description (bool, List) ClickedVisual() Declaration public void ClickedVisual() CurrentPercentage() Declaration public float CurrentPercentage() Returns Type Description float DecreaseValue() Declaration public void DecreaseValue() DecreaseValue(int) Declaration public void DecreaseValue(int amount) Parameters Type Name Description int amount DecreaseValue(float) Declaration public void DecreaseValue(float amount) Parameters Type Name Description float amount DisabledVisual() Declaration public void DisabledVisual() Focus(bool) Selects/deselects slider Declaration public void Focus(bool enable) Parameters Type Name Description bool enable GetCurrentValueFromHandle() Updates the value of the slider according to position of the handle Used by raycast selector to update the value after dragging handle Declaration public void GetCurrentValueFromHandle() GetParentList() Declaration public List GetParentList() Returns Type Description List IncreaseValue() Increases the value of the slider Declaration public void IncreaseValue() IncreaseValue(int) Increases the value of the slider by the given amount Declaration public void IncreaseValue(int amount) Parameters Type Name Description int amount IncreaseValue(float) Increases the value of the slider by the given amount Declaration public void IncreaseValue(float amount) Parameters Type Name Description float amount Interactable() Sets slider to interactable Declaration public void Interactable() NewValueRange() Creates new value range event Declaration public void NewValueRange() SelectedVisual() Declaration public void SelectedVisual() UnSelectedVisual() Declaration public void UnSelectedVisual() Uninteractable() Sets slider to uninteractable Declaration public void Uninteractable() UpdateBackgroundSize() Declaration public void UpdateBackgroundSize() UpdateGraphic() Updates the graphic of slider to match the value Declaration public void UpdateGraphic() UpdateValue() This can be used to udate the slider's graphic and call the appropriate events incase they weren't called. Declaration public void UpdateValue() UpdateValue(int) Updates the value of the slider This is same as setting the CurrentValue directly Declaration public void UpdateValue(int newValue) Parameters Type Name Description int newValue The parameter is the new value of the slider UpdateValue(float) Updates the value of the slider. This is same as setting the CurrentValue directly Declaration public void UpdateValue(float newValue) Parameters Type Name Description float newValue The parameter is the new value of the slider ValueChangeEnded() Used by raycast selector to call events after dragging handle ended Declaration public void ValueChangeEnded() ValueChanged() Calls events after value is changed Declaration public void ValueChanged()"
  },
  "api/TinyGiantStudio.Text.SliderEditor.html": {
    "href": "api/TinyGiantStudio.Text.SliderEditor.html",
    "title": "Class SliderEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class SliderEditor Inheritance object Object ScriptableObject Editor SliderEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(Slider))] public class SliderEditor : Editor Fields settings Declaration public AssetSettings settings Field Value Type Description AssetSettings Methods OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.SliderHandle.html": {
    "href": "api/TinyGiantStudio.Text.SliderHandle.html",
    "title": "Class SliderHandle | Trophy - Ultimate Score System Documentation",
    "summary": "Class SliderHandle Inheritance object Object Component Behaviour MonoBehaviour SliderHandle Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/slider/sliderhandle\")] public class SliderHandle : MonoBehaviour Fields slider Declaration public Slider slider Field Value Type Description Slider"
  },
  "api/TinyGiantStudio.Text.StaticMethods.html": {
    "href": "api/TinyGiantStudio.Text.StaticMethods.html",
    "title": "Class StaticMethods | Trophy - Ultimate Score System Documentation",
    "summary": "Class StaticMethods This class contains different reusable methods for the asset Inheritance object StaticMethods Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public class StaticMethods Methods GetParentList(Transform) Returns if an item has a List as parent Declaration public static List GetParentList(Transform transform) Parameters Type Name Description Transform transform The transform being checked Returns Type Description List"
  },
  "api/TinyGiantStudio.Text.TextUpdater.html": {
    "href": "api/TinyGiantStudio.Text.TextUpdater.html",
    "title": "Class TextUpdater | Trophy - Ultimate Score System Documentation",
    "summary": "Class TextUpdater List of problems this is trying to solve 1. Sometimes, unity destroys the mesh of the text when destroying the other game object with the same mesh. (Shared mesh) This checks if a mesh is empty, then updates it to fix empty texts 2. On prefab updates, the instance of the mesh in scene doesn't get updated automatically. Inheritance object Object Component Behaviour MonoBehaviour TextUpdater Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [ExecuteAlways] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/text/text-updater\")] public class TextUpdater : MonoBehaviour"
  },
  "api/TinyGiantStudio.Text.Toggle.html": {
    "href": "api/TinyGiantStudio.Text.Toggle.html",
    "title": "Class Toggle | Trophy - Ultimate Score System Documentation",
    "summary": "Class Toggle Inheritance object Object Component Behaviour MonoBehaviour Toggle Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Tiny Giant Studio/Modular 3D Text/Toggle\", 20004)] [HelpURL(\"https://ferdowsur.gitbook.io/modular-3d-text/ui/toggle\")] public class Toggle : MonoBehaviour Fields offEvent Declaration public UnityEvent offEvent Field Value Type Description UnityEvent offGraphic Declaration [Tooltip(\"The game object that is active when the toggle is off and inactive when the toggle is on. \\n\\nVariable name: offGraphic\")] public GameObject offGraphic Field Value Type Description GameObject onEvent Declaration public UnityEvent onEvent Field Value Type Description UnityEvent onGraphic Declaration [Tooltip(\"The game object that is active when the toggle is on and inactive when the toggle is off. \\n\\nVariable name: onGraphic\")] public GameObject onGraphic Field Value Type Description GameObject Properties IsOn Declaration public bool IsOn { get; set; } Property Value Type Description bool Methods ActiveVisualUpdate() Changes the graphic to activated. This only changes the visual. Doesn't update the \"active\" bool Declaration public void ActiveVisualUpdate() CallToggleEvent() Calls the correct event according to the state of the toggle Declaration public void CallToggleEvent() InactiveVisualUpdate() Changes the graphic to activated. This only changes the visual. Doesn't update the \"active\" bool Declaration public void InactiveVisualUpdate() Set(bool) Sets the activate state according to the parameter passed. Declaration public void Set(bool set) Parameters Type Name Description bool set ToggleState() Switches between on and off. Declaration public void ToggleState() VisualUpdate() Updates the visual of the Toggle to match the 'isOn' variable Declaration public void VisualUpdate()"
  },
  "api/TinyGiantStudio.Text.ToggleEditor.html": {
    "href": "api/TinyGiantStudio.Text.ToggleEditor.html",
    "title": "Class ToggleEditor | Trophy - Ultimate Score System Documentation",
    "summary": "Class ToggleEditor Inheritance object Object ScriptableObject Editor ToggleEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-Editor-firstpass.dll Syntax [CustomEditor(typeof(Toggle))] public class ToggleEditor : Editor Methods CreateInspectorGUI() Implement this method to make a custom UIElements inspector. Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement Overrides UnityEditor.Editor.CreateInspectorGUI()"
  },
  "api/TinyGiantStudio.Text.UIState.StateEnum.html": {
    "href": "api/TinyGiantStudio.Text.UIState.StateEnum.html",
    "title": "Enum UIState.StateEnum | Trophy - Ultimate Score System Documentation",
    "summary": "Enum UIState.StateEnum Not yet implemented everywhere https://ferdowsur.gitbook.io/modular-3d-text/utility/ui-states Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax public enum UIState.StateEnum Fields Name Description beingPressed disabled focused hovered normal Primary states. UI will enter these states and stay press Transition states UI will move away from these states after entering pressComplete pressStart unfocused unhovered"
  },
  "api/TinyGiantStudio.Text.UIState.html": {
    "href": "api/TinyGiantStudio.Text.UIState.html",
    "title": "Class UIState | Trophy - Ultimate Score System Documentation",
    "summary": "Class UIState If current state is focused, it won't set state to hovered and unhovered Inheritance object UIState Namespace: TinyGiantStudio.Text Assembly: Assembly-CSharp-firstpass.dll Syntax [Serializable] public class UIState Fields _state Declaration [SerializeField] public UIState.StateEnum _state Field Value Type Description UIState.StateEnum Properties State Declaration public UIState.StateEnum State { get; set; } Property Value Type Description UIState.StateEnum Methods CallAppropriateMethods() Declaration public void CallAppropriateMethods() Events Focused Declaration public event EventHandler Focused Event Type Type Description EventHandler HoverEnter Declaration public event EventHandler HoverEnter Event Type Type Description EventHandler HoverExit Declaration public event EventHandler HoverExit Event Type Type Description EventHandler PressComplete Declaration public event EventHandler PressComplete Event Type Type Description EventHandler PressStart Declaration public event EventHandler PressStart Event Type Type Description EventHandler Unfocused Declaration public event EventHandler Unfocused Event Type Type Description EventHandler"
  },
  "api/TinyGiantStudio.Text.html": {
    "href": "api/TinyGiantStudio.Text.html",
    "title": "Namespace TinyGiantStudio.Text | Trophy - Ultimate Score System Documentation",
    "summary": "Namespace TinyGiantStudio.Text Classes AssetSettings This is used by the asset to store default settings shared by different scripts Default File location: Assets/Plugins/Tiny Giant Studio/Modular 3D Text/Utility/M3D Editor Settings.asset Button The component for 3D buttons. ButtonEditor ButtonInputProcessor ButtonInputProcessor.StandardInput ButtonInputProcessorEditor ButtonInputSystemGlobal ButtonInputSystemGlobalEditor ButtonInputSystemLocal Character CharacterCleanUp Under construction. This will handle all the destroy object calls for modular 3d text in the future To-do: destroy calls on OnDestroy should be re factored to use this class CharacterDrawer DebugLogger DelayCallCharacterCleanUp Apologies for my poor explanation: Inside the editor, Unity doesn't let certain tasks to be done on the same frame the script calls them. So, they have to created with EditorApplication.delayCall. A lot of things can cause issues with this. For example: if the script reloads while a task is on delay call, the reloaded script isn't the one that called the delay call. This can result in leftover letter getting created but no text that they belong to. (Usually as a copy). This is super rare but can be annoying if it happens This script handles this issue. Font FontEditor TODO: Loop through all characters and check if any is empty FontInstanceUpdater The purpose of this script is to update all instance of a font. Used by editor script to update scene objects GetCharacterObject To-do: Check if it is possible to pass null as previous char, this will allow me to use one method, instead of two to get mesh layout and object To-do: Test out alternatives to using statics HorizontalSelector HorizontalSelectorEditor InputField InputFieldEditor Interactable Any component that can be hovered, clicked etc. Letter List ListEditor MenuItem MeshCombiner MeshPostProcessing Modular3DText Modular3DTextEditor RaycastInputProcessor Handles input for raycast selector RaycastSelector This component is used to cast a ray from camera to interact with 3D UI Elements. Handles the logic part only. Not the input part. RaycastSelectorEditor RaycastSelectorInputProcessorEditor RuntimeFontImporter This handles importing font files during runtime. Call CreateFontFromTTFFile(byte[] rfontBytes), pass the TTF file as a byte array and it will return a new Font. Slider Slider.ValueRange SliderEditor SliderHandle StaticMethods This class contains different reusable methods for the asset TextUpdater List of problems this is trying to solve 1. Sometimes, unity destroys the mesh of the text when destroying the other game object with the same mesh. (Shared mesh) This checks if a mesh is empty, then updates it to fix empty texts 2. On prefab updates, the instance of the mesh in scene doesn't get updated automatically. Toggle ToggleEditor UIState If current state is focused, it won't set state to hovered and unhovered Structs KerningPair Enums AssetSettings.CharInputStyle AssetSettings.MeshExportStyle ButtonInputSystemGlobal.ButtonInputProcessorStyle InputField.ContentType MeshPostProcess UIState.StateEnum Not yet implemented everywhere https://ferdowsur.gitbook.io/modular-3d-text/utility/ui-states"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Trophy - Ultimate Score System Documentation",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting Started | Trophy - Ultimate Score System Documentation",
    "summary": "Getting Started"
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction | Trophy - Ultimate Score System Documentation",
    "summary": "Introduction"
  }
}
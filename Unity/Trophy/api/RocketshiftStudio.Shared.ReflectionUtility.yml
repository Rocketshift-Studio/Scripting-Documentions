### YamlMime:ManagedReference
items:
- uid: RocketshiftStudio.Shared.ReflectionUtility
  commentId: T:RocketshiftStudio.Shared.ReflectionUtility
  id: ReflectionUtility
  parent: RocketshiftStudio.Shared
  children:
  - RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes(System.Type)
  langs:
  - csharp
  - vb
  name: ReflectionUtility
  nameWithType: ReflectionUtility
  fullName: RocketshiftStudio.Shared.ReflectionUtility
  type: Class
  source:
    remote:
      path: Assets/Rocketshift Studio/Shared/Scripts/Reflection/ReflectionUtility.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: ReflectionUtility
    path: ../Assets/Rocketshift Studio/Shared/Scripts/Reflection/ReflectionUtility.cs
    startLine: 8
  assemblies:
  - RocketshiftStudio.Shared
  namespace: RocketshiftStudio.Shared
  syntax:
    content: public static class ReflectionUtility
    content.vb: Public Module ReflectionUtility
  inheritance:
  - System.Object
- uid: RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes(System.Type)
  commentId: M:RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes(System.Type)
  id: DerivedTypes(System.Type)
  isExtensionMethod: true
  parent: RocketshiftStudio.Shared.ReflectionUtility
  langs:
  - csharp
  - vb
  name: DerivedTypes(Type)
  nameWithType: ReflectionUtility.DerivedTypes(Type)
  fullName: RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes(System.Type)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Shared/Scripts/Reflection/ReflectionUtility.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: DerivedTypes
    path: ../Assets/Rocketshift Studio/Shared/Scripts/Reflection/ReflectionUtility.cs
    startLine: 10
  assemblies:
  - RocketshiftStudio.Shared
  namespace: RocketshiftStudio.Shared
  syntax:
    content: public static IEnumerable<Type> DerivedTypes(this Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public Shared Function DerivedTypes(type As Type) As IEnumerable(Of Type)
  overload: RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes*
references:
- uid: RocketshiftStudio.Shared
  commentId: N:RocketshiftStudio.Shared
  href: RocketshiftStudio.html
  name: RocketshiftStudio.Shared
  nameWithType: RocketshiftStudio.Shared
  fullName: RocketshiftStudio.Shared
  spec.csharp:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Shared
    name: Shared
    href: RocketshiftStudio.Shared.html
  spec.vb:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Shared
    name: Shared
    href: RocketshiftStudio.Shared.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes*
  commentId: Overload:RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes
  href: RocketshiftStudio.Shared.ReflectionUtility.html#RocketshiftStudio_Shared_ReflectionUtility_DerivedTypes_System_Type_
  name: DerivedTypes
  nameWithType: ReflectionUtility.DerivedTypes
  fullName: RocketshiftStudio.Shared.ReflectionUtility.DerivedTypes
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true

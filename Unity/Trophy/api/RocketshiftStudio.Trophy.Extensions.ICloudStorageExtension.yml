### YamlMime:ManagedReference
items:
- uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  id: ICloudStorageExtension
  parent: RocketshiftStudio.Trophy.Extensions
  children:
  - RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync(System.String[],System.String)
  langs:
  - csharp
  - vb
  name: ICloudStorageExtension
  nameWithType: ICloudStorageExtension
  fullName: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  type: Interface
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/ICloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: ICloudStorageExtension
    path: ../Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/ICloudStorageExtension.cs
    startLine: 7
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To allow cloud storage based save/load operations on score values
  example: []
  syntax:
    content: 'public interface ICloudStorageExtension : IStorageExtension, ISpecialPermissionExtension, IExtension'
    content.vb: Public Interface ICloudStorageExtension Inherits IStorageExtension, ISpecialPermissionExtension, IExtension
  inheritedMembers:
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(System.String[])
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
  - RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(System.String[])
  - RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
- uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync(System.String[],System.String)
  commentId: M:RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync(System.String[],System.String)
  id: LoadMultipleAsync(System.String[],System.String)
  parent: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension
  langs:
  - csharp
  - vb
  name: LoadMultipleAsync(string[], string)
  nameWithType: ICloudStorageExtension.LoadMultipleAsync(string[], string)
  fullName: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync(string[], string)
  type: Method
  source:
    remote:
      path: Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/ICloudStorageExtension.cs
      branch: main
      repo: https://github.com/Rocketshift-Studio/Trophy.git
    id: LoadMultipleAsync
    path: ../Assets/Rocketshift Studio/Systems/Trophy/Scripts/Extensions/Storage/ICloudStorageExtension.cs
    startLine: 15
  assemblies:
  - RocketshiftStudio.Trophy
  namespace: RocketshiftStudio.Trophy.Extensions
  summary: To fetch score values of a user with id
  example: []
  syntax:
    content: Task<ScoreData[]> LoadMultipleAsync(string[] keys, string userId)
    parameters:
    - id: keys
      type: System.String[]
      description: Target keys
    - id: userId
      type: System.String
      description: Id of user
    return:
      type: System.Threading.Tasks.Task{RocketshiftStudio.Trophy.ScoreData[]}
      description: Score data collection
    content.vb: Function LoadMultipleAsync(keys As String(), userId As String) As Task(Of ScoreData())
  overload: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync*
  nameWithType.vb: ICloudStorageExtension.LoadMultipleAsync(String(), String)
  fullName.vb: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync(String(), String)
  name.vb: LoadMultipleAsync(String(), String)
references:
- uid: RocketshiftStudio.Trophy.Extensions
  commentId: N:RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.html
  name: RocketshiftStudio.Trophy.Extensions
  nameWithType: RocketshiftStudio.Trophy.Extensions
  fullName: RocketshiftStudio.Trophy.Extensions
  spec.csharp:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Trophy
    name: Trophy
    href: RocketshiftStudio.Trophy.html
  - name: .
  - uid: RocketshiftStudio.Trophy.Extensions
    name: Extensions
    href: RocketshiftStudio.Trophy.Extensions.html
  spec.vb:
  - uid: RocketshiftStudio
    name: RocketshiftStudio
    href: RocketshiftStudio.html
  - name: .
  - uid: RocketshiftStudio.Trophy
    name: Trophy
    href: RocketshiftStudio.Trophy.html
  - name: .
  - uid: RocketshiftStudio.Trophy.Extensions
    name: Extensions
    href: RocketshiftStudio.Trophy.Extensions.html
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(System.String[])
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(System.String[])
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadMultipleAsync_System_String___
  name: LoadMultipleAsync(string[])
  nameWithType: IStorageExtension.LoadMultipleAsync(string[])
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(string[])
  nameWithType.vb: IStorageExtension.LoadMultipleAsync(String())
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(String())
  name.vb: LoadMultipleAsync(String())
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(System.String[])
    name: LoadMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadMultipleAsync_System_String___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.LoadMultipleAsync(System.String[])
    name: LoadMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_LoadMultipleAsync_System_String___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveMultipleAsync_RocketshiftStudio_Trophy_ScoreData___
  name: SaveMultipleAsync(ScoreData[])
  nameWithType: IStorageExtension.SaveMultipleAsync(ScoreData[])
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
  nameWithType.vb: IStorageExtension.SaveMultipleAsync(ScoreData())
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData())
  name.vb: SaveMultipleAsync(ScoreData())
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
    name: SaveMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveMultipleAsync_RocketshiftStudio_Trophy_ScoreData___
  - name: (
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.SaveMultipleAsync(RocketshiftStudio.Trophy.ScoreData[])
    name: SaveMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_SaveMultipleAsync_RocketshiftStudio_Trophy_ScoreData___
  - name: (
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: (
  - name: )
  - name: )
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(System.String[])
  commentId: M:RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(System.String[])
  parent: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  isExternal: true
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteMultipleAsync_System_String___
  name: DeleteMultipleAsync(string[])
  nameWithType: IStorageExtension.DeleteMultipleAsync(string[])
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(string[])
  nameWithType.vb: IStorageExtension.DeleteMultipleAsync(String())
  fullName.vb: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(String())
  name.vb: DeleteMultipleAsync(String())
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(System.String[])
    name: DeleteMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteMultipleAsync_System_String___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension.DeleteMultipleAsync(System.String[])
    name: DeleteMultipleAsync
    href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html#RocketshiftStudio_Trophy_Extensions_IStorageExtension_DeleteMultipleAsync_System_String___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
  commentId: M:RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
  parent: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  name: IsAuthorized()
  nameWithType: ISpecialPermissionExtension.IsAuthorized()
  fullName: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized()
  spec.csharp:
  - uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
    name: IsAuthorized
    href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  - name: (
  - name: )
  spec.vb:
  - uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.IsAuthorized
    name: IsAuthorized
    href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html#RocketshiftStudio_Trophy_Extensions_ISpecialPermissionExtension_IsAuthorized
  - name: (
  - name: )
- uid: RocketshiftStudio.Trophy.Extensions.IStorageExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.IStorageExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.IStorageExtension.html
  name: IStorageExtension
  nameWithType: IStorageExtension
  fullName: RocketshiftStudio.Trophy.Extensions.IStorageExtension
- uid: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  commentId: T:RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
  parent: RocketshiftStudio.Trophy.Extensions
  href: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension.html
  name: ISpecialPermissionExtension
  nameWithType: ISpecialPermissionExtension
  fullName: RocketshiftStudio.Trophy.Extensions.ISpecialPermissionExtension
- uid: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync*
  commentId: Overload:RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync
  href: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.html#RocketshiftStudio_Trophy_Extensions_ICloudStorageExtension_LoadMultipleAsync_System_String___System_String_
  name: LoadMultipleAsync
  nameWithType: ICloudStorageExtension.LoadMultipleAsync
  fullName: RocketshiftStudio.Trophy.Extensions.ICloudStorageExtension.LoadMultipleAsync
- uid: System.String[]
  isExternal: true
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
  - name: (
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{RocketshiftStudio.Trophy.ScoreData[]}
  commentId: T:System.Threading.Tasks.Task{RocketshiftStudio.Trophy.ScoreData[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: RocketshiftStudio.Trophy.ScoreData.html
  name: Task<ScoreData[]>
  nameWithType: Task<ScoreData[]>
  fullName: System.Threading.Tasks.Task<RocketshiftStudio.Trophy.ScoreData[]>
  nameWithType.vb: Task(Of ScoreData())
  fullName.vb: System.Threading.Tasks.Task(Of RocketshiftStudio.Trophy.ScoreData())
  name.vb: Task(Of ScoreData())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: RocketshiftStudio.Trophy.ScoreData
    name: ScoreData
    href: RocketshiftStudio.Trophy.ScoreData.html
  - name: (
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
